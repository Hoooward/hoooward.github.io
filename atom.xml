<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-03T06:46:10.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dispatch_semaphore 的使用</title>
    <link href="http://yoursite.com/2017/03/01/2017-03-01%20dispatch_semaphore%20%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/03/01/2017-03-01 dispatch_semaphore 的使用/</id>
    <published>2017-03-01T12:01:00.000Z</published>
    <updated>2017-03-03T06:46:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>利用 GCD 提供的 <code>dispatch_async</code> 函数在并发队列中执行任务时, 其任务的执行顺序以及并发数量不可控, 想要实现并发控制的解决方案其实有很多. 比如使用 <code>NSOperationQueue</code> 的 <code>maxConcurrentOperationCount</code> 属性可以控制 <code>NSOperation</code> 中同时执行任务的最大数量. 下面我们来看看再 GCD 中的解决方法</p>
<h3 id="dispatch-semaphore"><a href="#dispatch-semaphore" class="headerlink" title="dispatch_semaphore"></a>dispatch_semaphore</h3><p>我们先来看看有关 <code>dispatch_semaphore</code> 的三个方法.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dispatch_semaphore_create =&gt; 创建一个信号量       </div><div class="line">dispatch_semaphore_signal =&gt; 发送一个信号</div><div class="line">dispatch_semaphore_wait =&gt; 等待信号</div></pre></td></tr></table></figure>
<p>我们可以像这样 <code>dispatch_semaphore_t semaphore = dispatch_semaphore_create(0)</code> 创建一个信号量, 方法需要传入一个 <code>long</code> 型的参数, 我们可以想象其为库存量.</p>
<p><code>dispatch_semaphore_wait</code> 很直观可以判断其是一个阻塞当前线程的方法, 其等待逻辑是每运行一次, 响应的库存就会减少一, 当库存量为 0 时, 这个方法就会根据传入的等待时间, 来决定等待添加库存的时间. 如果设置成 <code>DISPATCHTIMEFOREVER</code>, 那么就是永久等待添加库存, 否则就永远不往下执行.</p>
<p><code>dispatch_semaphore_signal</code> 就是添加库存的方法.</p>
<p>考虑下面的代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">0</span>); </div><div class="line">dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER); </div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"等待 semaphore"</span>);</div></pre></td></tr></table></figure>
<p>上面代码中 <code>NSLog(@&quot;等待 semaphore&quot;);</code> 永远不会执行, 因为初始化的信号量库存是 0, 且等待库存增加的时间为 <code>DISPATCH_TIME_FOREVER</code>, 也就是说, 除非有地方执行 <code>dispatch_semaphore_signal</code> 增加库存, 否则就永远等待.</p>
<p>我们来看一个实际应用的场景:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ThreadSafeDictionary *dict = [[ThreadSafeDictionary alloc] init];</div><div class="line"></div><div class="line">dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="built_in">dispatch_async</span>(concurrentQueue, ^&#123;</div><div class="line">       </div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">     </div><div class="line">        [dict setObject:@(i) forKey:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%d"</span>, i] block:^(ThreadSafeDictionary *dict, <span class="built_in">NSString</span> *key, <span class="keyword">id</span> object) &#123;</div><div class="line">                </div><div class="line">        &#125;];</div><div class="line">            </div><div class="line">    &#125;</div><div class="line">        dispatch_semaphore_signal(semaphore);</div><div class="line">&#125;);</div><div class="line">    </div><div class="line">dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class="line">    </div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"----End dict = %@"</span>, dict);</div></pre></td></tr></table></figure>
<p>我们使用一个自定义线程安全的 Dictionary, 声明信号量库存为 0, 并执行一个 1000 次的写入数据的循环, 并选择在循环结束后,增加信号库存, 由于向字典写入数据的是异步在并发队列中的, 所以并不会阻塞当前线程, 会直接继续执行到<code>dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</code>这行代码, 显而易见, 只有当 1000 次的写入数据结束, 库存量才会增加, 因此最后的 <code>NSLog</code> 会输出完整的字典.</p>
<p>当然我们也可以利用 <code>dispatch_semaphore_t</code> 控制并发数量. 下面是代码示例:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CustomOperationQueue</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)initWithConcurrentCount:(<span class="keyword">int</span>)count &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (count &lt; <span class="number">1</span>) count = <span class="number">5</span>;</div><div class="line">        semaphore = dispatch_semaphore_create(count);</div><div class="line">        queue = Dispatch_queue_create(<span class="string">"com.custom.queue"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">id</span>)init &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> initWithConcurrentCount:<span class="number">5</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addTask:(TaskBlock)block &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">        </div><div class="line">        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class="line">        </div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">        </div><div class="line">            <span class="keyword">if</span> (block) &#123;</div><div class="line">                block();</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            dispatch_semaphore_signal(semaphore);</div><div class="line">                </div><div class="line">        &#125;);</div><div class="line">    </div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们把重点放在 <code>- (void)addTask:(TaskBlock)block</code> 方法中.<br>首先我们创建了一个库存量为 5 的信号量.<br>在方法内部因为库存为 5, 所以每添加一个任务 <code>dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</code> 都会放行, 并减少一个库存, 而当我们完成一个任务, 也就是 <code>block()</code> 执行完毕后, 又会调用 <code>dispatch_semaphore_signal(semaphore)</code> 方法增加一个库存.<br>那么假如我们执行的任务耗时很长, 我们就会一直消耗库存, 如果添加到第 6 个任务时, 此时的库存数为 0,所以 <code>dispatch_semaphore_wait</code> 方法就会一直等待, 不执行第 6 个任务, 直到前面的某个任务完成,又增加了库存量, 才会放行执行第 6 个任务. 这样我们就实现了并发量的控制.</p>
<h3 id="dispatch-group"><a href="#dispatch-group" class="headerlink" title="dispatch_group"></a>dispatch_group</h3><p>检测并发任务是否全部执行完毕是 <code>dispatch_group</code> 常用的应用场景. 我们直接来看代码</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dispatch_group_t serviceGroup = dispatch_group_create();<span class="comment">// 开始第一个请求     </span><span class="comment">// 进入组    </span>dispatch_group_enter(serviceGroup);[<span class="keyword">self</span>.configService startWithCompletion:^(ConfigResponse *results, <span class="built_in">NSError</span>* error)&#123;      configError = error;      <span class="comment">// 离开组</span>      dispatch_group_leave(serviceGroup);  &#125;];<span class="comment">// 开始第二个请求       </span><span class="comment">// 进入组</span>dispatch_group_enter(serviceGroup);[<span class="keyword">self</span>.preferenceService startWithCompletion:^(PreferenceResponse *results, <span class="built_in">NSError</span>* error)&#123;</div><div class="line">      <span class="comment">// 离开组    </span>      preferenceError = error; </div><div class="line">      dispatch_group_leave(serviceGroup);&#125;];<span class="comment">// 当组内任务清空后,通知主线程完成了所有的任务                          </span></div><div class="line">dispatch_group_notify(serviceGroup, dispatch_get_main_queue(),^&#123;    </div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"两个请求都已经完成"</span>);  &#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用 GCD 提供的 &lt;code&gt;dispatch_async&lt;/code&gt; 函数在并发队列中执行任务时, 其任务的执行顺序以及并发数量不可控, 想要实现并发控制的解决方案其实有很多. 比如使用 &lt;code&gt;NSOperationQueue&lt;/code&gt; 的 &lt;code&gt;m
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>编写高质量的 Objective-C 代码 3. 接口</title>
    <link href="http://yoursite.com/2017/02/21/2017-02-21/"/>
    <id>http://yoursite.com/2017/02/21/2017-02-21/</id>
    <published>2017-02-21T12:01:00.000Z</published>
    <updated>2017-02-26T14:56:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>选择与你公司、应用程序或者皆有关联的名称作为类的前缀，并在代码中均使用这一前缀。<br>若自己所开发的 App 使用到第三方库，则应为其的名称加上前缀。</p>
<h4 id="1-提供初始化方法"><a href="#1-提供初始化方法" class="headerlink" title="1. 提供初始化方法"></a>1. 提供初始化方法</h4><p>如果创建类实例的方式不止一种，那么这个类就会有多个初始化方法。不过要在其中选中一个作为全能初始化方法，并做到其他初始化方法都调用它。</p>
<p>比如说，编写一个表示矩形的类。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCRectangle</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>, <span class="keyword">readonly</span>) <span class="keyword">float</span> width;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>, <span class="keyword">readonly</span>) <span class="keyword">float</span> height;</div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="comment">// 我们可能会提供一个初始化方法</span></div><div class="line">-(<span class="keyword">id</span>)initWithWidth:(<span class="keyword">float</span>)width andHeight:(<span class="keyword">float</span>)height &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        _width = width;</div><div class="line">        _height = height;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 为了避免外界直接调用 init 方法初始化</span></div><div class="line"><span class="comment">// 可以重写 init 并指定默认值</span></div><div class="line">- (<span class="keyword">id</span>)init &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> initWithWidth: <span class="number">5.0</span>f andHeight: <span class="number">10.0</span>f];</div><div class="line">&#125;</div><div class="line"><span class="comment">// 或者直接抛出异常,当然通常不建议这样做</span></div><div class="line">- (<span class="keyword">id</span>)init &#123;</div><div class="line">    <span class="keyword">@throw</span> [<span class="built_in">NSException</span> exceptionWithName: <span class="built_in">NSInternalInconsistencyException</span> </div><div class="line">            reason: <span class="string">@"请使用便利初始化方法"</span> userInfo: <span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假设我们现在要创建一个 EOCSquare 类，令其成为 EOCRectangle 的子类，下面是子类的初始化方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"EOCRectangle.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCSquare</span> : <span class="title">EOCRectangle</span></span></div><div class="line">- (<span class="keyword">id</span>)initWithDimension:(<span class="keyword">float</span>)dimension;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">EOCSquare</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)initWithDimension:(<span class="keyword">float</span>)dimension &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> initWithWidth: dimension andHeight: dimension];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 如果子类的初始化方法与父类名称不同，总应该重写父类的全能初始化方法</span></div><div class="line">- (<span class="keyword">id</span>)initWithWidth:(<span class="keyword">float</span>)width andHeight:(<span class="keyword">float</span>)height &#123;</div><div class="line">    <span class="keyword">float</span> dimension = MAX(width, height);</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> initWithDimension: dimension];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 此例中也要重写 init 方法</span></div><div class="line">- (<span class="keyword">id</span>)init &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> initWithDimension: <span class="number">5.0</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这里有一个特别的情况，某个类可能存在两个全能初始化方法。比如我们让 EOCRectangle 遵守 NSCoding 协议，从而实现此类的序列化。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCRectangle</span> : <span class="title">NSObject</span> &lt;<span class="title">NSCoding</span>&gt;</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>, <span class="keyword">readonly</span>) <span class="built_in">CGFloat</span> width;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>, <span class="keyword">readonly</span>) <span class="built_in">CGFloat</span> height;</div><div class="line">- (<span class="keyword">instancetype</span>)initWithWidth:(<span class="built_in">CGFloat</span>)width andHeight:(<span class="built_in">CGFloat</span>)height;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">EOCRectangle</span></span></div><div class="line"></div><div class="line"><span class="comment">// 其余初始化方法与之前代码一样</span></div><div class="line">- (<span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder &#123;</div><div class="line">    /</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        _width = [aDecoder decodeFloatForKey:<span class="string">@"width"</span>];</div><div class="line">        _height = [aDecoder decodeFloatForKey:<span class="string">@"height"</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCSquare</span> : <span class="title">EOCRectangle</span> &lt;<span class="title">NSCoding</span>&gt;</span></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">EOCSquare</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder &#123;</div><div class="line">    </div><div class="line">    <span class="comment">// 如果 super 遵循了 NSCoding 协议，需要调用超类的 initWithCoder 方法。</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> initWithCoder:aDecoder]) &#123;</div><div class="line">        <span class="comment">// specific initializer</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>因此可以看到，在自定义类时需要提供一个全能初始化方法，并尽量在文档中指出，其他初始化方法均应调用此方法。<br>如果全能初始化方法与超类不同，应该重写超类中对应的方法。<br>如果超类的初始化方法不适合与子类，那么可以选择重写超类的这个方法，并在其中抛出异常。</p>
<h4 id="2-实现-description-方法"><a href="#2-实现-description-方法" class="headerlink" title="2. 实现 description 方法"></a>2. 实现 description 方法</h4><p>调试程序时，我们往往希望在控制台打印出更丰富的信息。而在某个类构建需要打印到日志的字符串时，会收到 description 消息，我们通过重写此方法就可以自定义描述信息了。下面这个例子展示了一种不错的输出格式。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSString</span> *)description &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"&lt;%@: %p, %@&gt;"</span>,</div><div class="line">            [<span class="keyword">self</span> <span class="keyword">class</span>],</div><div class="line">            <span class="keyword">self</span>,</div><div class="line">            @&#123;<span class="string">@"width"</span>:@(_width),</div><div class="line">              <span class="string">@"height"</span>: @(_height),</div><div class="line">              &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="number">22</span>:<span class="number">52</span>:<span class="number">11.691</span> Ads[<span class="number">8785</span>:<span class="number">2103515</span>] &lt;EOCRectangle: <span class="number">0x600000036600</span>, &#123;</div><div class="line">    height = <span class="number">10</span>;</div><div class="line">    width = <span class="number">5</span>;</div><div class="line">&#125;&gt;</div></pre></td></tr></table></figure>
<h4 id="3-尽量使用不可变对象"><a href="#3-尽量使用不可变对象" class="headerlink" title="3. 尽量使用不可变对象"></a>3. 尽量使用不可变对象</h4><p>这点和 swift 中的应用一样，只有在必要的时候才将对象定义为可变。而在 OC 中声明属性时默认是 <code>readwrite</code> 的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;选择与你公司、应用程序或者皆有关联的名称作为类的前缀，并在代码中均使用这一前缀。&lt;br&gt;若自己所开发的 App 使用到第三方库，则应为其的名称加上前缀。&lt;/p&gt;
&lt;h4 id=&quot;1-提供初始化方法&quot;&gt;&lt;a href=&quot;#1-提供初始化方法&quot; class=&quot;headerlin
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>编写高质量的 Objective-C 代码 第一章 对象、消息、运行时</title>
    <link href="http://yoursite.com/2017/02/19/%E5%AF%B9%E8%B1%A1%E3%80%81%E6%B6%88%E6%81%AF%E3%80%81%E8%BF%90%E8%A1%8C%E6%97%B6%20/"/>
    <id>http://yoursite.com/2017/02/19/对象、消息、运行时 /</id>
    <published>2017-02-19T12:19:00.000Z</published>
    <updated>2017-03-03T06:49:08.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-理解属性这一概念"><a href="#1-理解属性这一概念" class="headerlink" title="1. 理解属性这一概念"></a>1. 理解属性这一概念</h4><p>使用 @property 语法来定义对象中所封装的数据。<br>通过 <code>assign strong weak copy unsafe_unretained</code>定义存储数据所需的正确语义。<br>开发 iOS 程序时应该使用 <code>nonatomic</code> 属性，因为 <code>atomic</code> 属性会严重影响性能。</p>
<h4 id="2-在对象内部尽量直接访问实例变量"><a href="#2-在对象内部尽量直接访问实例变量" class="headerlink" title="2. 在对象内部尽量直接访问实例变量"></a>2. 在对象内部尽量直接访问实例变量</h4><p>在对象内部读取数据时，应该直接通过实例变量来读，而写入数据时，则应该通过属性来写，以确保其声明的内存管理语意。<br>在初始化和 <code>dealloc</code> 方法中，总是应该直接通过实例变量来读取数据。<br>在使用惰性初始化时，需要通过属性来读取数据。</p>
<h4 id="3-理解-对象等同性-这一概念。"><a href="#3-理解-对象等同性-这一概念。" class="headerlink" title="3. 理解 对象等同性 这一概念。"></a>3. 理解 <code>对象等同性</code> 这一概念。</h4><p>如果想检测对象的等同性，可提供 <code>NSObjcet</code>协议中的 <code>isEqual</code> 和 <code>hash</code> 方法。<br>相同的对象一定拥有相同的哈希码，但是两个哈希码相同的对象却未必相同。<br>不要盲目选择逐个检查每条属性，而是应该依照具体需求来定制方案，比如可以使用唯一的 <code>identifier</code> 来对比检查两个对象是否相等。<br>编写 <code>hash</code> 方法时,应该使用计算速度快而且哈希码碰撞几率低的算法。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Person 类</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCPerson</span>: <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *firstName;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *lastName;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSUInteger</span> age;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// 实现 isEqual 方法</span></div><div class="line">- (<span class="built_in">BOOL</span>)isEqual:(<span class="keyword">id</span>)object &#123;</div><div class="line">	<span class="comment">// 如果指针相等，则其均指向同一对象</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">self</span> == object) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 判断两个对象所属类是否相同</span></div><div class="line">	<span class="keyword">if</span> ([<span class="keyword">self</span> <span class="keyword">class</span>] != [object <span class="keyword">class</span>]) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 可能存在父类与子类进行对比</span></div><div class="line">	EOCPerson *otherPerson = (EOCPerson *)object;</div><div class="line">	<span class="comment">// 检查每个属性是否相等。</span></div><div class="line">	<span class="keyword">if</span> (![_firstName isEqualToString: otherPerson.firstName]) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (![_lastName isEqualToString: otherPerson.lastName]) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (_age != otherPerson.age) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">	&#125; </div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"><span class="comment">// 这种写法如果将对象放入集合中就会产生性能问题。</span></div><div class="line"><span class="comment">// 因为集合类型需要检索哈希表，会用对象的哈希码做索引。</span></div><div class="line">- （<span class="built_in">NSUInteger</span>)hash &#123;</div><div class="line">	<span class="keyword">return</span> <span class="number">1337</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 这种写法需要额外负担创建字符串开销。如果将对象放入集合，需要先计算哈希码。</span></div><div class="line">- （<span class="built_in">NSUInteger</span>)hash &#123;</div><div class="line">	<span class="built_in">NSString</span> *stringToHash = [<span class="built_in">NSString</span> stringWithFormat: <span class="string">@"%@:%@:%i"</span>, _firstName, _lastName, _age];</div><div class="line">	<span class="keyword">return</span> [stringToHash hash];</div><div class="line">&#125;</div><div class="line"><span class="comment">// 既能保持较高效率，也不会过于频繁的重复。</span></div><div class="line"><span class="comment">// 在编写 hash 方法时， 应该用当前的对象做做实验，以便在减少碰撞频度与降低运算复杂度之间取舍。</span></div><div class="line">- （<span class="built_in">NSUInteger</span>)hash &#123;</div><div class="line">	<span class="built_in">NSUInteger</span> firstNameHash = [_firstName hash];</div><div class="line">	<span class="built_in">NSUInteger</span> lastNameHash = [_lastName hash];</div><div class="line">	<span class="built_in">NSUinteger</span> ageHash = _age;</div><div class="line">	<span class="keyword">return</span> firstNameHash ^ lastNameHash ^ ageHash;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="3-以-类族模式-隐藏实现细节"><a href="#3-以-类族模式-隐藏实现细节" class="headerlink" title="3. 以 类族模式 隐藏实现细节"></a>3. 以 <code>类族模式</code> 隐藏实现细节</h4><p>用以隐藏 <code>抽象基类</code> 的实现细节。 比如 <code>UIButton</code> 类，若想创建按钮，需要调用下面这个类方法:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 该方法返回的对象都继承自同一个基类 UIButton</span></div><div class="line">+ (<span class="built_in">UIButton</span> *)buttonWithType:(<span class="built_in">UIButtonType</span>)type;</div></pre></td></tr></table></figure>
<p>举例演示如何创建类族，假设有一个处理员工的类，每个员工都有名字和薪水两个属性，犹豫每个员工的工作内容不同，项目经理在带领员工做项目时，无需关心每个人如何完成工作，仅需指示其开工即可。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, EOCEmployeeType) &#123;</div><div class="line">	EOCEmployeeTypeDeveloper = <span class="number">0</span>;</div><div class="line">	EOCEmployeeTypeDesigner;</div><div class="line">	EOCEmployeeTypeFinance;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义抽象基类</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCEmployee</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSUInteger</span> salary;</div><div class="line"></div><div class="line"><span class="comment">// 创建员工对象</span></div><div class="line">+ (EOCEmployee *)employeeWithType:(EOCEmployeeType)type;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)doADayWork;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">EOCEmployee</span></span></div><div class="line"></div><div class="line">+ (EOCEmployee *)employeeWithType:(EOCEmployeeType)type &#123;</div><div class="line">	</div><div class="line">	<span class="keyword">switch</span> (type) &#123;</div><div class="line">		<span class="keyword">case</span> EOCEmployeeTypeDeveloper:</div><div class="line">			<span class="keyword">return</span> [EOCEmployeeDeveloper new];</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">			</div><div class="line">		<span class="keyword">case</span> EOCEmployeeTypeDesigner:</div><div class="line">			<span class="keyword">return</span> [EOCEmployeeTypeDesigner new];</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">				</div><div class="line">		<span class="keyword">case</span> EOCEmployeeTypeFinance:</div><div class="line">			<span class="keyword">return</span> [EOCEmployeeTypeFinance new];</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)doADaysWork &#123;</div><div class="line">	<span class="comment">// 因为 OC 中没有方法指明某个基类是抽象的</span></div><div class="line">	<span class="comment">// 可以选择在基类的方法中抛出异常，避免外界调用。</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// 定义子类</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCEmployeeDeveloper</span> : <span class="title">EOCEmployee</span></span></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">EOCEmployeeDeveloper</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)doADaysWord &#123;</div><div class="line">	[<span class="keyword">self</span> writeCode];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>如果对象所属的类位于某个类族，那么在查询其类型时要格外当心。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 看上去会返回 YES，但实际返回 NO</span></div><div class="line"><span class="comment">// 因为 employee 并非 Employee 类的实例，而是其子类的实例。</span></div><div class="line">[employee isMemberOfClass: [EOCEmployee <span class="keyword">class</span>]]</div></pre></td></tr></table></figure>
<p>正确判断对象所属类是否位于某个类族时，应该使用下面的方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> maybeAnArray = <span class="comment">/* ... */</span>;</div><div class="line"><span class="comment">// 正确</span></div><div class="line"><span class="keyword">if</span> ([maybeAnArray isKindOfClass:[<span class="built_in">NSArray</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 错误</span></div><div class="line"><span class="keyword">if</span> ([maybeAnArray <span class="keyword">class</span>] == [<span class="built_in">NSArray</span> <span class="keyword">class</span>]) &#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">    永远不会执行，因为 NSArray 是个类族</div><div class="line">    [maybeAnArray class] 所返回的类不是 NSArray 类本地</div><div class="line">    因为 NSArray 的初始化方法所返回的那个实例是隐藏在类族公共接口后面的某个内部类型。</div><div class="line">    */</div><div class="line">&#125;</div><div class="line">``` </div><div class="line"><span class="meta">#### 4. 在既有类中使用关联对象存放自定义数据</span></div><div class="line">可以通过关联对象机制将两个对象链接起来。</div><div class="line">定义关联对象时可指定内存管理语义，用以模仿定义属性时采用的拥有关系和非拥有关系。</div><div class="line">只有再其他做法不可行时才应选用关联对象，因为这种做法通常会引入难于查找的 bug。</div><div class="line"></div><div class="line">管理关联对象的方法：</div><div class="line"></div><div class="line">```objc</div><div class="line"><span class="comment">// 以给定的键值和策略对某对象设置关联对象值。</span></div><div class="line"><span class="keyword">void</span> objc_setAssociatedObject(<span class="keyword">id</span> object, <span class="keyword">void</span>*key, <span class="keyword">id</span> value, objec_AssociationPolicy policy)</div><div class="line"><span class="comment">//根据给定的键从某对象中获取响应关联对象的值</span></div><div class="line"><span class="keyword">id</span> objc_getAssociatedObject(<span class="keyword">id</span> object, <span class="keyword">void</span>*key)</div><div class="line"><span class="comment">//移除指定对象的全部关联对象</span></div><div class="line"><span class="keyword">void</span> objc_removeAssociatedObjects(<span class="keyword">id</span> object)</div></pre></td></tr></table></figure>
<p>关联对象时内存管理的语义表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">关联类型</th>
<th style="text-align:center">等效的 @Property 属性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">OBJC_ASSOCIATION_ASSIGN</td>
<td style="text-align:center">assign</td>
</tr>
<tr>
<td style="text-align:center">OBJC_ASSOCIATION_RETAIN_NONATOMIC</td>
<td style="text-align:center">nonatomic, retain</td>
</tr>
<tr>
<td style="text-align:center">OBJC_ASSOCIATION_COPY_NONATOMIC</td>
<td style="text-align:center">nonatomic, copy</td>
</tr>
<tr>
<td style="text-align:center">OBJC_ASSOCIATION_RETAIN</td>
<td style="text-align:center">retain</td>
</tr>
<tr>
<td style="text-align:center">OBJC_ASSOCIATION_COPY</td>
<td style="text-align:center">copy</td>
</tr>
</tbody>
</table>
<p>举例演示应用场景，比如 UIAlertView 类, 当用户点击按钮关闭视图时需要用 delegate 来处理动作。但代码分作两部分，读起来有点乱。所以可以使用关联对象的特性整合代码。(举例，并不推荐直接应用).</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> *EOCMyAlertViewKey = <span class="string">"EOCMyAlertViewKey"</span>;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)askUserAQuestion &#123;</div><div class="line">	</div><div class="line">	<span class="built_in">UIAlertView</span> *alert = [[<span class="built_in">UIAlertView</span> alloc] initWithTitle: <span class="string">@"Question"</span> message: <span class="string">@"What do you want to do?"</span> delegate: <span class="keyword">self</span>, cancelButtonTitle: <span class="string">@"Cancel"</span> otherButtonTitles:<span class="string">@"Continue"</span>, <span class="literal">nil</span>];</div><div class="line">	</div><div class="line">	<span class="keyword">void</span> (^block)(<span class="built_in">NSInteger</span>) = ^(<span class="built_in">NSInteger</span> buttonIndex) &#123;</div><div class="line">		<span class="keyword">if</span> (buttonIndex == <span class="number">0</span>) &#123;</div><div class="line">			[<span class="keyword">self</span> doCancel];</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			[<span class="keyword">self</span> doContinue];</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	</div><div class="line">	objc_setAssociateObject(alert, EOCMyAlertViewKey, block, BJC_ASSOCIATION_COPY);</div><div class="line">	</div><div class="line">	[alert show];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// UIAlertView Delegate</span></div><div class="line">- (<span class="keyword">void</span>)alertView:(<span class="built_in">UIAlertView</span> *)alertView clickedButtonAtIndex: (<span class="built_in">NSInteger</span>) buttonIndex &#123;</div><div class="line">	<span class="keyword">void</span> (^block)(<span class="built_in">NSInteger</span>) = objc_getAssociatedObject(alertView EOCMyAlertViewKey);</div><div class="line">	block(buttonIndex);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-理解-objc-megSend-的作用"><a href="#5-理解-objc-megSend-的作用" class="headerlink" title="5. 理解 objc_megSend 的作用"></a>5. 理解 objc_megSend 的作用</h4><p>传递消息是 OC 中经常使用的功能，消息有 name 或 selector 可以接受参数，而且可以能还有返回值。<br>由于 Objective-C 是 C 的超集，所以要先理解 C 语言的函数调用方式， C 语言使用静态绑定，也就是说，在编译期就能决定运行时所应调用的函数，比如以下代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">void</span> printHello() &#123;</div><div class="line">printf(<span class="string">"Hello, world!\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> printGoodbye() &#123;</div><div class="line">printf(<span class="string">"Goodbye, world!\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> doTheThing(<span class="keyword">int</span> type) &#123;</div><div class="line">    <span class="keyword">if</span> (type == <span class="number">0</span>) &#123;</div><div class="line">        printHello();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        printGoodbye();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译器在编译代码的时候就已经知道程序中有 printHello 和 printGoodbye 这两个函数了,于是会直接生成调用这些函数的指令。而函数地址实际上是硬编码在指令之中的。但如果写成这样：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> doTheThing(<span class="keyword">int</span> type) &#123;</div><div class="line">    <span class="keyword">void</span> (*fnc)();</div><div class="line">    <span class="keyword">if</span> (type == <span class="number">0</span>) &#123;</div><div class="line">        fnc = printHello;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        fnc = printGoodbye;</div><div class="line">    &#125;</div><div class="line">    fnc();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时就得使用动态绑定了，所调用的函数直到运行时才能确定。OC 如果要向某个对象传递消息就会使用动态绑定的机制来决定需要调用的方法.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// someObject -&gt; 消息接受者</span></div><div class="line"><span class="comment">// messageName -&gt; selector</span></div><div class="line"><span class="comment">// parameter -&gt; 参数</span></div><div class="line"><span class="keyword">id</span> returnValue = [someObject messageName:parameter];</div><div class="line"></div><div class="line"><span class="comment">// 其背后的 C 语言函数叫做 objc_msgSend</span></div><div class="line"><span class="keyword">void</span> objc_msgSend(<span class="keyword">id</span> <span class="keyword">self</span>, SEL cmd, ...)</div><div class="line"></div><div class="line"><span class="comment">// 转换之后</span></div><div class="line"><span class="keyword">id</span> returnValue = objc_msgSend(someObject, <span class="keyword">@selector</span>(messageName:), parameter);</div><div class="line"></div><div class="line"><span class="comment">// 对于一些特殊情况，会调用不同的 msgSend 函数</span></div><div class="line"><span class="comment">// 如果待发送的消息要返回结构体，那么由此函数处理，仅当 CPU 寄存器能够容纳下该消息返回类型时执行。</span></div><div class="line">objc_msgSend_stret</div><div class="line"><span class="comment">// 如果消息返回类型为浮点数，那么由此函数处理，为了解决类似 X86 架构 CPU 中某些令人奇怪的状况。</span></div><div class="line">objc_msgSend_fpret</div><div class="line"><span class="comment">// 如果给超类发送消息，比如 [super class] 由此函数处理</span></div><div class="line"><span class="comment">// 需要了解 super 仅是编辑器的标识符，并不是超类的指针</span></div><div class="line"><span class="comment">// 调用 [super class] 仍然是向当前类发送消息。</span></div><div class="line">objc_msgSendSuper</div></pre></td></tr></table></figure>
<p>消息由接受者、selector 及参数构成，给某个对象发送消息也就是相当于在该对象上调用方法。<br>发送给某对象的全部消息都要由动态消息派发系统来处理，该系统查找对应的方法，并执行相应的代码。<br>每个类都拥有一张表格，其中的指针都指向方法实现的函数，<br>而 <code>selector</code> 就是查表时使用的 <code>key</code>。<br><code>objc_msgSend</code> 等函数就是通过这张表格来寻找应该执行的方法并跳转至其实现。</p>
<h4 id="6-理解消息转发机制"><a href="#6-理解消息转发机制" class="headerlink" title="6. 理解消息转发机制"></a>6. 理解消息转发机制</h4><p>当对象在收到无法解读的消息时就会启动消息转发机制，我们可由此过程告诉对象应该如何处理未知消息。</p>
<p>若对象无法响应某个 selector，则进入消息转发流程。<br>通过 <code>runtime</code> 的动态方法解析功能，我们可以在需要用到某个方法时再将其加入到类中。<br>对象可以把其无法解读的某个消息转交给其他对象处理。</p>
<p>消息转发分为两个阶段：</p>
<ol>
<li>第一阶段：询问接受者，所属的类，看其是否动态添加了方法 -&gt; 动态方法解析。</li>
<li>第二阶段：如果第一阶段执行结束，接受者就无法再用动态新增方法的手段来响应未知 <code>selector</code> 了。首先会询问接受者看看有没有其他对象能够处理这条消息，如果有，转发给那个对象，消息转发结束。如果没有备选的消息接受者，则启动完整的消息转发机制，将消息有关的细节封装到 <code>NSInvocation</code> 中，再给接受者最后一次机会，设法解决当前还未处理的消息。</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 对象在无法解读消息后，首先调用其所属类的这个方法</span></div><div class="line"></div><div class="line"><span class="comment">/* </span></div><div class="line"> * return 表示这个类是否能新增一个实例方法处理 SEL</div><div class="line"> * 参数 selector: 未知的 selector</div><div class="line">*/</div><div class="line"><span class="comment">// 处理实例方法</span></div><div class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)selector</div><div class="line"><span class="comment">// 处理类方法</span></div><div class="line">+ (<span class="built_in">BOOL</span>)resloveClassMethod:(SEL)selector</div><div class="line"></div><div class="line"><span class="comment">// 2. 当前接受者还有第二次机会来处理未知 selector</span></div><div class="line"><span class="comment">//    询问对象能不能将消息转发给其他接受者处理</span></div><div class="line"></div><div class="line"><span class="comment">/* </span></div><div class="line"> * 在对象内部，可能还有一系列其他对象，该对象可经由此方法将</div><div class="line"> * 能够处理某 selector 的相关内部对象返回。</div><div class="line"> * return: 如果可以找到备选的接受者，将其返回，否则返回 nil </div><div class="line"> * 参数 selector: 未知的 selector</div><div class="line">*/</div><div class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)selector</div><div class="line"></div><div class="line"><span class="comment">// 3. 如果进入这一步，唯一能做的就是启动完整消息转发机制。</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 这个方法基本和第二步的实现方法等效，所以应该场景可能是：</div><div class="line">  在触发消息前，以某种方式改变消息内容，比如追加另外一个参数，等。</div><div class="line">*/</div><div class="line">- (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)invocation</div></pre></td></tr></table></figure>
<p>消息转发全流程图：<br><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2017-02-19-14874995796584.jpg" alt=""><br>接受者在每一步均有机会处理消息，步骤越往后，处理消息的代价就越大。如果在第一步处理最好，这样的话，<code>runtime</code> 就可以将此方法缓存起来，之后该实例再接受到同样的 Selector 就无需启动转发流程了。若想在第三步转发消息，不如提前到第二部，就省去了创建 NSInvocation 的系统开销。</p>
<p>我们来看完整的例子，说明消息转发机制的意义。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCAutoDictionary</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *string;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSNumber</span> *number;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSDate</span> *date;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="keyword">id</span> opaqueObject;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"EOCAutoDictionary.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCAutoDictionary</span>()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableDictionary</span> *backingStore;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">EOCAutoDictionary</span></span></div><div class="line"><span class="comment">// 禁止编译器生成实例变量及存取方法</span></div><div class="line"><span class="keyword">@dynamic</span> string, number, date, opaqueObject;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>) init &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        _backingStore = [<span class="built_in">NSMutableDictionary</span> new];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 取方法函数</span></div><div class="line"><span class="keyword">id</span> autoDictionaryGetter(<span class="keyword">id</span> <span class="keyword">self</span>, SEL _cmd) &#123;</div><div class="line">    </div><div class="line">    EOCAutoDictionary *typedSelf = (EOCAutoDictionary *)<span class="keyword">self</span>;</div><div class="line">    <span class="built_in">NSMutableDictionary</span> *backingStore = typedSelf.backingStore;</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *key = <span class="built_in">NSStringFromSelector</span>(_cmd);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> [backingStore objectForKey:key];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 存方法函数</span></div><div class="line"><span class="keyword">void</span> autoDictionarySetter(<span class="keyword">id</span> <span class="keyword">self</span>, SEL _cmd, <span class="keyword">id</span> value) &#123;</div><div class="line">    </div><div class="line">    EOCAutoDictionary *typedSelf = (EOCAutoDictionary *)<span class="keyword">self</span>;</div><div class="line">    <span class="built_in">NSMutableDictionary</span> *backingStore = typedSelf.backingStore;</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *selectorString = <span class="built_in">NSStringFromSelector</span>(_cmd);</div><div class="line">    <span class="built_in">NSMutableString</span> *key = [selectorString mutableCopy];</div><div class="line">    </div><div class="line">    <span class="comment">// 删除最后的 ':'</span></div><div class="line">    [key deleteCharactersInRange:<span class="built_in">NSMakeRange</span>(key.length - <span class="number">1</span>, <span class="number">1</span>)];</div><div class="line">    </div><div class="line">    <span class="comment">// 删除 'set' 前缀</span></div><div class="line">    [key deleteCharactersInRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">3</span>)];</div><div class="line">    </div><div class="line">    <span class="comment">// 第一位小写</span></div><div class="line">    <span class="built_in">NSString</span> *lowercaseFirstChar = [[key substringToIndex:<span class="number">1</span>] lowercaseString];</div><div class="line">    [key replaceCharactersInRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">1</span>) withString:lowercaseFirstChar];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (value) &#123;</div><div class="line">        [backingStore setObject:value forKey:key];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        [backingStore removeObjectForKey:key];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="comment">// 动态添加实例方法</span></div><div class="line">+(<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *selectorString = <span class="built_in">NSStringFromSelector</span>(sel);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ([selectorString hasPrefix:<span class="string">@"set"</span>]) &#123;</div><div class="line">        class_addMethod(<span class="keyword">self</span>,</div><div class="line">                        sel,</div><div class="line">                        (IMP)autoDictionarySetter,</div><div class="line">                        <span class="string">"v@:@"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        class_addMethod(<span class="keyword">self</span>,</div><div class="line">                        sel,</div><div class="line">                        (IMP)autoDictionaryGetter,</div><div class="line">                        <span class="string">"@@:"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="comment">// 测试</span></div><div class="line">EOCAutoDictionary *dict = [EOCAutoDictionary new];</div><div class="line">dict.date = [<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">475372800</span>];</div><div class="line">    </div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dict.date = %@"</span>, dict.date);</div><div class="line"><span class="comment">// output: dict.date = 2032-03-14 11:01:57 +0000</span></div></pre></td></tr></table></figure>
<p>其他属性的访问方法与 date 类似， 要想添加新属性，只需要用 <code>@property</code> 来定义，并将其声明为 <code>@dynamic</code> 即可。</p>
<h4 id="7-方法替换-（method-swizzling）"><a href="#7-方法替换-（method-swizzling）" class="headerlink" title="7. 方法替换 （method swizzling）"></a>7. 方法替换 （method swizzling）</h4><p>类的方法列表会把 selector 的名称映射到相关的方法实现上，使得动态消息派发系统据此找到应该调用的方法。这些方法均以函数指针的形式来表示，即 IMP， 其原型：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> (* IMP)(<span class="keyword">id</span>, SEL, ...)</div></pre></td></tr></table></figure>
<p>在运行时，可以向类中新增或者替换 selector 所对应的方法实现。<br>使用另一份实现来代替原有的方法实现，开发者常使用此技术向原有实现中添加新功能。<br>一般来说，只有调试程序时才需要修改方法实现，不宜滥用。</p>
<p>以 <code>NSString</code> 为例，它可以响应 <code>lowercaseString</code>、<code>uppercaseString</code>、<code>capitalizedString</code> 等方法，映射表如下:</p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2017-02-19-14875030634285.jpg" alt=""></p>
<p>而我们说的方法替换就是利用几个 <code>runtime</code> 函数来操作这张表，比如改成这样子：<br><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2017-02-19-14875031488005.jpg" alt=""></p>
<p>上图中新增了 <code>newSelector</code> 方法，并交换了 lowercaseString 与 uppercaseString 的实现指针。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 实现交换两个方法实现的函数</span></div><div class="line"><span class="keyword">void</span> method_exchangeImplementations(Method m1, Method m2);</div><div class="line"><span class="comment">// 获取方法实现的函数</span></div><div class="line">Method class_getInstanceMethod(Class aClass, SEL aSelector);</div><div class="line"><span class="comment">// 实现上图中交换两个方法实现的代码</span></div><div class="line">Method originalMethod = class_getInstanceMethod([<span class="built_in">NSString</span> <span class="keyword">class</span>], </div><div class="line"><span class="keyword">@selector</span>(lowercaseString));</div><div class="line"></div><div class="line">Method swappedMethod = class_getInstanceMethod([<span class="built_in">NSString</span> <span class="keyword">class</span>], </div><div class="line"><span class="keyword">@selector</span>(uppercaseString));</div><div class="line"></div><div class="line">method_exchangeImplementations(originalMethod, swappedMethod);</div></pre></td></tr></table></figure>
<p>当然，实际应用中像这样直接交换两个方法实现意义不大。但是可以通过这个手段为即有方法实现添加新功能。下面的示例演示如果为 <code>NSString</code> 的 <code>lowercaseString</code> 方法添加 Debug 的功能。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 为 NSString 添加分类</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSString</span> (<span class="title">EOCMyAdditions</span>)</span></div><div class="line">- (<span class="built_in">NSString</span> *)eoc_myLowercaseString;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"NSString+EOCMyAdditions.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSString</span> (<span class="title">EOCMyAdditions</span>)</span></div><div class="line"><span class="comment">// 交换方法</span></div><div class="line">+(<span class="keyword">void</span>)load &#123;</div><div class="line">    Method originalMethod = class_getInstanceMethod([<span class="built_in">NSString</span> <span class="keyword">class</span>], </div><div class="line">    <span class="keyword">@selector</span>(lowercaseString));</div><div class="line">    Method swappedMethod = class_getInstanceMethod([<span class="built_in">NSString</span> <span class="keyword">class</span>], </div><div class="line">    <span class="keyword">@selector</span>(eoc_myLowercaseString));</div><div class="line">    </div><div class="line">    method_exchangeImplementations(originalMethod, swappedMethod);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 看上去会陷入递归调用死循环，但运行时方法会进行交换。</span></div><div class="line">- (<span class="built_in">NSString</span> *)eoc_myLowercaseString &#123;</div><div class="line">    <span class="built_in">NSString</span> *lowercase = [<span class="keyword">self</span> eoc_myLowercaseString];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ =&gt; %@"</span>, <span class="keyword">self</span>, lowercase);</div><div class="line">    <span class="keyword">return</span> lowercase;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// 测试</span></div><div class="line"><span class="built_in">NSString</span> *string = <span class="string">@"This iS tHe StRiNg"</span>;</div><div class="line"><span class="built_in">NSString</span> *lowercaseString = [string lowercaseString];</div><div class="line"><span class="comment">// Output: This iS tHe StRiNg =&gt; this is the string</span></div></pre></td></tr></table></figure>
<h4 id="8-理解-类对象-的用意"><a href="#8-理解-类对象-的用意" class="headerlink" title="8. 理解 类对象 的用意"></a>8. 理解 类对象 的用意</h4><p>每个实例都有一个指向 Class 对象的指针(isa), 用来表示其类型，而这些 Class 对象则构成了类的继承体系。<br>如果对象类型无法在编译器决定，那么就应该使用类型信息查询方法来探知。<br>尽量使用类型信息查询方法来确定对象类型，不要直接用 == 比较类对象，因为某些对象可能实现了消息转发。<br>描述 Objective-C 对象所用的数据结构定义在 runtime 库中的头文件中，其中 id 类型定义如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_object &#123;</div><div class="line">    Class isa;</div><div class="line">&#125; *<span class="keyword">id</span>;</div></pre></td></tr></table></figure>
<p>每个对象结构体的首个成员就是 Class 类的变量，叫做 “is a” 指针, 该变量定义了对象所属的类。比如下面代码</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *string = <span class="string">@"This is a string"</span>;</div></pre></td></tr></table></figure>
<p>其中的 “is a” 指针指向的就是 NSString， Class 对象的定义如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_class *Class;</div><div class="line"><span class="keyword">struct</span> objc_class &#123;</div><div class="line">    Class isa;</div><div class="line">    Class super_class;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</div><div class="line">    <span class="keyword">long</span> version;</div><div class="line">    <span class="keyword">long</span> info;</div><div class="line">    <span class="keyword">long</span> instance_size;</div><div class="line">    <span class="keyword">struct</span> objc_ivar_lit *ivars;</div><div class="line">    <span class="keyword">struct</span> objc_method_list **methodLists;</div><div class="line">    <span class="keyword">struct</span> objc_cache *cache;</div><div class="line">    <span class="keyword">struct</span> objc_protocol_list *protocols;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此结构体存放类的<code>元数据</code>， 当然这个结构体的首个变量也是 isa 指针， 说明 Class 本身也是 Objective-C 对象。结构体中还有一个叫做 <code>super_class</code> 的变量，它定义了本类的超类。类对象所属的类型 (也就是 isa 指针指向的类型) 是另外一个类，叫做 <code>元类</code>，用来描述类对象本身所具备的元数据。类方法就定义在此处。假如有一个名为 <code>SomeClass</code> 的子类继承自 <code>NSObject</code>，其继承体系如下图：</p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2017-02-19-14875051992425.jpg" alt=""></p>
<p>super_class 指针确定了继承关系，而 isa 指针描述了实例所属的类。这是我们在查询类继承体系时的参照标准。</p>
<p>我们使用 <code>isMemberOfClass</code> 能够判断出对象是否为某个特定类的实例， 而 <code>isKindOfClass</code> 则能判断出对象是否为某类或者其派生类的实例。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSMutableDictionary</span> *dict = [<span class="built_in">NSMutableDictionary</span> new];</div><div class="line">[dict isMemberOfClass: [<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]; <span class="comment">// = NO</span></div><div class="line">[dict isMemberOfClass: [<span class="built_in">NSMutableDictionary</span> <span class="keyword">class</span>]] <span class="comment">// = YES</span></div><div class="line">[dict isKindOfClass: [<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]; <span class="comment">// = YES</span></div><div class="line">[dict isKindOfClass: [<span class="built_in">NSArray</span> <span class="keyword">class</span>]]; <span class="comment">// = NO</span></div></pre></td></tr></table></figure>
<p>像这样的类型查询方法使用 isa 指针获取对象所属的类，然后通过 super_class 指针在继承体系中游走。比如要查询某个集合类型中元素的类型，通常得到的结果是 id，如果想知道具体类型，就需要使用上面方法。假如我们需要根据数据中存储的对象来生成字符串，就是下列的代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSString</span> *)commaSeparatedStringFromObjects: (<span class="built_in">NSArray</span> *)array &#123;</div><div class="line">    <span class="built_in">NSMutableString</span> *string = [<span class="built_in">NSMutableString</span> new];</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">id</span> object <span class="keyword">in</span> array) &#123;</div><div class="line">        <span class="keyword">if</span> ([object isKindOfClass: [<span class="built_in">NSString</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">            [string appendFormat:<span class="string">@"%@,"</span>, object];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([object isKindOfClass: [<span class="built_in">NSNumber</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">            [string appendFormat:<span class="string">@"%d,"</span> ,[object intValue]];   </div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([object isKindOfClass: [<span class="built_in">NSData</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">            <span class="built_in">NSString</span> *base64Encoded = <span class="comment">/* base64 encoded data */</span>;</div><div class="line">            [string appendFormat:<span class="string">@"%@,"</span>, base64Encoded];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 不支持的类型</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> string;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-理解属性这一概念&quot;&gt;&lt;a href=&quot;#1-理解属性这一概念&quot; class=&quot;headerlink&quot; title=&quot;1. 理解属性这一概念&quot;&gt;&lt;/a&gt;1. 理解属性这一概念&lt;/h4&gt;&lt;p&gt;使用 @property 语法来定义对象中所封装的数据。&lt;br&gt;通过 &lt;code&gt;assign strong weak copy unsafe_unretained&lt;/code&gt;定义存储数据所需的正确语义。&lt;br&gt;开发 iOS 程序时应该使用 &lt;code&gt;nonatomic&lt;/code&gt; 属性，因为 &lt;code&gt;atomic&lt;/code&gt; 属性会严重影响性能。&lt;/p&gt;
&lt;h4 id=&quot;2-在对象内部尽量直接访问实例变量&quot;&gt;&lt;a href=&quot;#2-在对象内部尽量直接访问实例变量&quot; class=&quot;headerlink&quot; title=&quot;2. 在对象内部尽量直接访问实例变量&quot;&gt;&lt;/a&gt;2. 在对象内部尽量直接访问实例变量&lt;/h4&gt;&lt;p&gt;在对象内部读取数据时，应该直接通过实例变量来读，而写入数据时，则应该通过属性来写，以确保其声明的内存管理语意。&lt;br&gt;在初始化和 &lt;code&gt;dealloc&lt;/code&gt; 方法中，总是应该直接通过实例变量来读取数据。&lt;br&gt;在使用惰性初始化时，需要通过属性来读取数据。&lt;/p&gt;
&lt;h4 id=&quot;3-理解-对象等同性-这一概念。&quot;&gt;&lt;a href=&quot;#3-理解-对象等同性-这一概念。&quot; class=&quot;headerlink&quot; title=&quot;3. 理解 对象等同性 这一概念。&quot;&gt;&lt;/a&gt;3. 理解 &lt;code&gt;对象等同性&lt;/code&gt; 这一概念。&lt;/h4&gt;&lt;p&gt;如果想检测对象的等同性，可提供 &lt;code&gt;NSObjcet&lt;/code&gt;协议中的 &lt;code&gt;isEqual&lt;/code&gt; 和 &lt;code&gt;hash&lt;/code&gt; 方法。&lt;br&gt;相同的对象一定拥有相同的哈希码，但是两个哈希码相同的对象却未必相同。&lt;br&gt;不要盲目选择逐个检查每条属性，而是应该依照具体需求来定制方案，比如可以使用唯一的 &lt;code&gt;identifier&lt;/code&gt; 来对比检查两个对象是否相等。&lt;br&gt;编写 &lt;code&gt;hash&lt;/code&gt; 方法时,应该使用计算速度快而且哈希码碰撞几率低的算法。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Person 类&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;EOCPerson&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *firstName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *lastName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 实现 isEqual 方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)isEqual:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)object &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 如果指针相等，则其均指向同一对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; == object) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 判断两个对象所属类是否相同&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;] != [object &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 可能存在父类与子类进行对比&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	EOCPerson *otherPerson = (EOCPerson *)object;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 检查每个属性是否相等。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![_firstName isEqualToString: otherPerson.firstName]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![_lastName isEqualToString: otherPerson.lastName]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_age != otherPerson.age) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这种写法如果将对象放入集合中就会产生性能问题。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 因为集合类型需要检索哈希表，会用对象的哈希码做索引。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- （&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt;)hash &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1337&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这种写法需要额外负担创建字符串开销。如果将对象放入集合，需要先计算哈希码。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- （&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt;)hash &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *stringToHash = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat: &lt;span class=&quot;string&quot;&gt;@&quot;%@:%@:%i&quot;&lt;/span&gt;, _firstName, _lastName, _age];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [stringToHash hash];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 既能保持较高效率，也不会过于频繁的重复。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在编写 hash 方法时， 应该用当前的对象做做实验，以便在减少碰撞频度与降低运算复杂度之间取舍。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- （&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt;)hash &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; firstNameHash = [_firstName hash];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; lastNameHash = [_lastName hash];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;NSUinteger&lt;/span&gt; ageHash = _age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; firstNameHash ^ lastNameHash ^ ageHash;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>编写高质量的 Objective-C 代码 第一章 熟悉 Objective-C</title>
    <link href="http://yoursite.com/2017/02/18/%E7%86%9F%E6%82%89%20Objective-C%20/"/>
    <id>http://yoursite.com/2017/02/18/熟悉 Objective-C /</id>
    <published>2017-02-18T07:44:00.000Z</published>
    <updated>2017-03-03T06:49:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为好久没写 OC 代码了，回头重看 《Effective Objective-C 编写高质量 iOS 与 OS X 代码的 52 个有效方法》，总结一些 OC 编码时的技巧。</p>
<h5 id="1-除非必要，否则不要引入头文件"><a href="#1-除非必要，否则不要引入头文件" class="headerlink" title="1. 除非必要，否则不要引入头文件"></a>1. 除非必要，否则不要引入头文件</h5><p>一般来说，应再某个类的头文件中使用向前声明来提及某个类，并在实现文件（.m）中引入那些类的头文件，以降低类之间的耦合。<br>当无法使用向前声明时，比如要声明某个类遵循某个协议。在这种情况下，尽量把<code>该类遵循某协议</code>的声明移入<code>class-continuation 分类</code>中。如果不行的话，就把某协议单独放在一个头文件中，然后将其引入。</p>
<h5 id="2-尽量使用字面量创建数组、字典、字符串、数值"><a href="#2-尽量使用字面量创建数组、字典、字符串、数值" class="headerlink" title="2. 尽量使用字面量创建数组、字典、字符串、数值"></a>2. 尽量使用字面量创建数组、字典、字符串、数值</h5><p>与常规方法相比更加简明。同时，如果值中有 nil，则会抛出异常，方便定位问题。而使用常规方法遇到 nil 会自动结束向集合添加数值。<br><a id="more"></a></p>
<h5 id="3-避免使用-define-预处理命令定义常量"><a href="#3-避免使用-define-预处理命令定义常量" class="headerlink" title="3. 避免使用 #define 预处理命令定义常量"></a>3. 避免使用 #define 预处理命令定义常量</h5><p>因为这样定义出来的常量不含类型信息，仅做预编译阶段的替换操作。无法利用编译器产生警告信息。<br>应该选择在实现文件中使用 <code>static（定义作用域） const（readOnly）</code> 来定义只在编译单元内可见的常量，此常量不在全局符号表中，无需加前缀。<br>如果需要定义全局常量，选择在头文件中使用 <code>extern</code>.并在相关实现文件中初始化其值，因为这种常量会出现再全局符号表中，所以应该加前缀，通常使用与之相关的类名做前缀。（OC 没有命名空间）。</p>
<h5 id="4-使用枚举表示状态、选项、状态码"><a href="#4-使用枚举表示状态、选项、状态码" class="headerlink" title="4. 使用枚举表示状态、选项、状态码"></a>4. 使用枚举表示状态、选项、状态码</h5><p>应该使用枚举来表示状态机的状态、传递给方法的选择以及状态码等值，给这些值起个易懂的名字。<br>如果把传递给某个方法的选项用枚举表示，而多个选择又可以同时使用，那么就将各选项值定义为 2 的幂，以便通过按位或操作将其组合起来。<br>用 <code>NS_ENUM</code> 与 <code>NS_OPTIONS</code> 宏来定义枚举类型，并指明底层数据类型。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, EOCConnectionState) &#123;</div><div class="line">	EOCConnectionStateDisconnected,</div><div class="line">	EOCConnectionStateConnecting,</div><div class="line">	EOCConnectionStateConnected,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, EOCPermittedDirection) &#123;</div><div class="line">	EOCPermittedDirectionUp    = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</div><div class="line">	EOCPermittedDirectionDown  = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</div><div class="line">	EOCPermittedDirectionLeft  = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</div><div class="line">	EOCPermittedDirectionRight = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为好久没写 OC 代码了，回头重看 《Effective Objective-C 编写高质量 iOS 与 OS X 代码的 52 个有效方法》，总结一些 OC 编码时的技巧。&lt;/p&gt;
&lt;h5 id=&quot;1-除非必要，否则不要引入头文件&quot;&gt;&lt;a href=&quot;#1-除非必要，否则不要引入头文件&quot; class=&quot;headerlink&quot; title=&quot;1. 除非必要，否则不要引入头文件&quot;&gt;&lt;/a&gt;1. 除非必要，否则不要引入头文件&lt;/h5&gt;&lt;p&gt;一般来说，应再某个类的头文件中使用向前声明来提及某个类，并在实现文件（.m）中引入那些类的头文件，以降低类之间的耦合。&lt;br&gt;当无法使用向前声明时，比如要声明某个类遵循某个协议。在这种情况下，尽量把&lt;code&gt;该类遵循某协议&lt;/code&gt;的声明移入&lt;code&gt;class-continuation 分类&lt;/code&gt;中。如果不行的话，就把某协议单独放在一个头文件中，然后将其引入。&lt;/p&gt;
&lt;h5 id=&quot;2-尽量使用字面量创建数组、字典、字符串、数值&quot;&gt;&lt;a href=&quot;#2-尽量使用字面量创建数组、字典、字符串、数值&quot; class=&quot;headerlink&quot; title=&quot;2. 尽量使用字面量创建数组、字典、字符串、数值&quot;&gt;&lt;/a&gt;2. 尽量使用字面量创建数组、字典、字符串、数值&lt;/h5&gt;&lt;p&gt;与常规方法相比更加简明。同时，如果值中有 nil，则会抛出异常，方便定位问题。而使用常规方法遇到 nil 会自动结束向集合添加数值。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git 命令清单</title>
    <link href="http://yoursite.com/2016/11/28/git%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/11/28/git总结/</id>
    <published>2016-11-28T03:09:01.000Z</published>
    <updated>2016-11-28T03:22:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-11-28-bg2015120901.png" alt="bg2015120901"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Workspace：工作区</div><div class="line">Index / Stage：暂存区</div><div class="line">Repository：仓库区（或本地仓库）</div><div class="line">Remote：远程仓库</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 在当前目录新建一个Git代码库</div><div class="line">$ git init</div><div class="line"></div><div class="line"># 新建一个目录，将其初始化为Git代码库</div><div class="line">$ git init [project-name]</div><div class="line"></div><div class="line"># 下载一个项目和它的整个代码历史</div><div class="line">$ git clone [url]</div></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 显示当前的Git配置</div><div class="line">$ git config --list</div><div class="line"></div><div class="line"># 编辑Git配置文件</div><div class="line">$ git config -e [--global]</div><div class="line"></div><div class="line"># 设置提交代码时的用户信息</div><div class="line">$ git config [--global] user.name &quot;[name]&quot;</div><div class="line">$ git config [--global] user.email &quot;[email address]&quot;</div></pre></td></tr></table></figure>
<h2 id="添加-删除"><a href="#添加-删除" class="headerlink" title="添加/删除"></a>添加/删除</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># 添加指定文件到暂存区</div><div class="line">$ git add [file1] [file2] ...</div><div class="line"></div><div class="line"># 添加指定目录到暂存区，包括子目录</div><div class="line">$ git add [dir]</div><div class="line"></div><div class="line"># 添加当前目录的所有文件到暂存区</div><div class="line">$ git add .</div><div class="line"></div><div class="line"># 添加每个变化前，都会要求确认</div><div class="line"># 对于同一个文件的多处变化，可以实现分次提交</div><div class="line">$ git add -p</div><div class="line"></div><div class="line"># 删除工作区文件，并且将这次删除放入暂存区</div><div class="line">$ git rm [file1] [file2] ...</div><div class="line"></div><div class="line"># 停止追踪指定文件，但该文件会保留在工作区</div><div class="line">$ git rm --cached [file]</div><div class="line"></div><div class="line"># 改名文件，并且将这个改名放入暂存区</div><div class="line">$ git mv [file-original] [file-renamed]</div></pre></td></tr></table></figure>
<h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># 提交暂存区到仓库区</div><div class="line">$ git commit -m [message]</div><div class="line"></div><div class="line"># 提交暂存区的指定文件到仓库区</div><div class="line">$ git commit [file1] [file2] ... -m [message]</div><div class="line"></div><div class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</div><div class="line">$ git commit -a</div><div class="line"></div><div class="line"># 提交时显示所有diff信息</div><div class="line">$ git commit -v</div><div class="line"></div><div class="line"># 使用一次新的commit，替代上一次提交</div><div class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</div><div class="line">$ git commit --amend -m [message]</div><div class="line"></div><div class="line"># 重做上一次commit，并包括指定文件的新变化</div><div class="line">$ git commit --amend [file1] [file2] ...</div></pre></td></tr></table></figure>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"># 列出所有本地分支</div><div class="line">$ git branch</div><div class="line"></div><div class="line"># 列出所有远程分支</div><div class="line">$ git branch -r</div><div class="line"></div><div class="line"># 列出所有本地分支和远程分支</div><div class="line">$ git branch -a</div><div class="line"></div><div class="line"># 新建一个分支，但依然停留在当前分支</div><div class="line">$ git branch [branch-name]</div><div class="line"></div><div class="line"># 新建一个分支，并切换到该分支</div><div class="line">$ git checkout -b [branch]</div><div class="line"></div><div class="line"># 新建一个分支，指向指定commit</div><div class="line">$ git branch [branch] [commit]</div><div class="line"></div><div class="line"># 新建一个分支，与指定的远程分支建立追踪关系</div><div class="line">$ git branch --track [branch] [remote-branch]</div><div class="line"></div><div class="line"># 切换到指定分支，并更新工作区</div><div class="line">$ git checkout [branch-name]</div><div class="line"></div><div class="line"># 切换到上一个分支</div><div class="line">$ git checkout -</div><div class="line"></div><div class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</div><div class="line">$ git branch --set-upstream [branch] [remote-branch]</div><div class="line"></div><div class="line"># 合并指定分支到当前分支</div><div class="line">$ git merge [branch]</div><div class="line"></div><div class="line"># 选择一个commit，合并进当前分支</div><div class="line">$ git cherry-pick [commit]</div><div class="line"></div><div class="line"># 删除分支</div><div class="line">$ git branch -d [branch-name]</div><div class="line"></div><div class="line"># 删除远程分支</div><div class="line">$ git push origin --delete [branch-name]</div><div class="line">$ git branch -dr [remote/branch]</div></pre></td></tr></table></figure>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"># 列出所有tag</div><div class="line">$ git tag</div><div class="line"></div><div class="line"># 新建一个tag在当前commit</div><div class="line">$ git tag [tag]</div><div class="line"></div><div class="line"># 新建一个tag在指定commit</div><div class="line">$ git tag [tag] [commit]</div><div class="line"></div><div class="line"># 删除本地tag</div><div class="line">$ git tag -d [tag]</div><div class="line"></div><div class="line"># 删除远程tag</div><div class="line">$ git push origin :refs/tags/[tagName]</div><div class="line"></div><div class="line"># 查看tag信息</div><div class="line">$ git show [tag]</div><div class="line"></div><div class="line"># 提交指定tag</div><div class="line">$ git push [remote] [tag]</div><div class="line"></div><div class="line"># 提交所有tag</div><div class="line">$ git push [remote] --tags</div><div class="line"></div><div class="line"># 新建一个分支，指向某个tag</div><div class="line">$ git checkout -b [branch] [tag]</div></pre></td></tr></table></figure>
<h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"># 显示有变更的文件</div><div class="line">$ git status</div><div class="line"></div><div class="line"># 显示当前分支的版本历史</div><div class="line">$ git log</div><div class="line"></div><div class="line"># 显示commit历史，以及每次commit发生变更的文件</div><div class="line">$ git log --stat</div><div class="line"></div><div class="line"># 搜索提交历史，根据关键词</div><div class="line">$ git log -S [keyword]</div><div class="line"></div><div class="line"># 显示某个commit之后的所有变动，每个commit占据一行</div><div class="line">$ git log [tag] HEAD --pretty=format:%s</div><div class="line"></div><div class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</div><div class="line">$ git log [tag] HEAD --grep feature</div><div class="line"></div><div class="line"># 显示某个文件的版本历史，包括文件改名</div><div class="line">$ git log --follow [file]</div><div class="line">$ git whatchanged [file]</div><div class="line"></div><div class="line"># 显示指定文件相关的每一次diff</div><div class="line">$ git log -p [file]</div><div class="line"></div><div class="line"># 显示过去5次提交</div><div class="line">$ git log -5 --pretty --oneline</div><div class="line"></div><div class="line"># 显示所有提交过的用户，按提交次数排序</div><div class="line">$ git shortlog -sn</div><div class="line"></div><div class="line"># 显示指定文件是什么人在什么时间修改过</div><div class="line">$ git blame [file]</div><div class="line"></div><div class="line"># 显示暂存区和工作区的差异</div><div class="line">$ git diff</div><div class="line"></div><div class="line"># 显示暂存区和上一个commit的差异</div><div class="line">$ git diff --cached [file]</div><div class="line"></div><div class="line"># 显示工作区与当前分支最新commit之间的差异</div><div class="line">$ git diff HEAD</div><div class="line"></div><div class="line"># 显示两次提交之间的差异</div><div class="line">$ git diff [first-branch]...[second-branch]</div><div class="line"></div><div class="line"># 显示今天你写了多少行代码</div><div class="line">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</div><div class="line"></div><div class="line"># 显示某次提交的元数据和内容变化</div><div class="line">$ git show [commit]</div><div class="line"></div><div class="line"># 显示某次提交发生变化的文件</div><div class="line">$ git show --name-only [commit]</div><div class="line"></div><div class="line"># 显示某次提交时，某个文件的内容</div><div class="line">$ git show [commit]:[filename]</div><div class="line"></div><div class="line"># 显示当前分支的最近几次提交</div><div class="line">$ git reflog</div></pre></td></tr></table></figure>
<p>###远程同步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># 下载远程仓库的所有变动</div><div class="line">$ git fetch [remote]</div><div class="line"></div><div class="line"># 显示所有远程仓库</div><div class="line">$ git remote -v</div><div class="line"></div><div class="line"># 显示某个远程仓库的信息</div><div class="line">$ git remote show [remote]</div><div class="line"></div><div class="line"># 增加一个新的远程仓库，并命名</div><div class="line">$ git remote add [shortname] [url]</div><div class="line"></div><div class="line"># 取回远程仓库的变化，并与本地分支合并</div><div class="line">$ git pull [remote] [branch]</div><div class="line"></div><div class="line"># 上传本地指定分支到远程仓库</div><div class="line">$ git push [remote] [branch]</div><div class="line"></div><div class="line"># 强行推送当前分支到远程仓库，即使有冲突</div><div class="line">$ git push [remote] --force</div><div class="line"></div><div class="line"># 推送所有分支到远程仓库</div><div class="line">$ git push [remote] --all</div></pre></td></tr></table></figure></p>
<h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"># 恢复暂存区的指定文件到工作区</div><div class="line">$ git checkout [file]</div><div class="line"></div><div class="line"># 恢复某个commit的指定文件到暂存区和工作区</div><div class="line">$ git checkout [commit] [file]</div><div class="line"></div><div class="line"># 恢复暂存区的所有文件到工作区</div><div class="line">$ git checkout .</div><div class="line"></div><div class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</div><div class="line">$ git reset [file]</div><div class="line"></div><div class="line"># 重置暂存区与工作区，与上一次commit保持一致</div><div class="line">$ git reset --hard</div><div class="line"></div><div class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</div><div class="line">$ git reset [commit]</div><div class="line"></div><div class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</div><div class="line">$ git reset --hard [commit]</div><div class="line"></div><div class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</div><div class="line">$ git reset --keep [commit]</div><div class="line"></div><div class="line"># 新建一个commit，用来撤销指定commit</div><div class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</div><div class="line">$ git revert [commit]</div><div class="line"></div><div class="line"># 暂时将未提交的变化移除，稍后再移入</div><div class="line">$ git stash</div><div class="line">$ git stash pop</div></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 生成一个可供发布的压缩包</div><div class="line">$ git archive</div></pre></td></tr></table></figure>
<p>ps: 来自 [阮一峰的网络日志][<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a>]</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; class=&quot;headerlink&quot; title=&quot;流程&quot;&gt;&lt;/a&gt;流程&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrfzx.com1.z0.glb.clouddn.com/2016-11-28-bg2015120901.png&quot; alt=&quot;bg2015120901&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Workspace：工作区&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Index / Stage：暂存区&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Repository：仓库区（或本地仓库）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Remote：远程仓库&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在 iOS10 中隐藏 NavigationBar 底部的实线.</title>
    <link href="http://yoursite.com/2016/10/30/%E9%9A%90%E8%97%8FNavigationBar%E5%BA%95%E9%83%A8%E7%9A%84%E5%AE%9E%E7%BA%BF/"/>
    <id>http://yoursite.com/2016/10/30/隐藏NavigationBar底部的实线/</id>
    <published>2016-10-30T08:44:00.000Z</published>
    <updated>2016-11-11T15:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>在自己实现的项目中需要隐藏掉 UINavigtionBar 底部的实线, 并在底部添加一个外观一样的 UIView, 用来实现为 NavigationBar “增高”的功能. 之前在 iOS9 中使用的方法失效了. Google 了一下找到的通用的办法.</p>
<p>我们将这个功能写在 <code>UINavigationController</code> 的 extension 中. 首先利用简单的递归找到底部那条实线.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UINavigationController</span> </span>&#123; </div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">navigationBarLine</span><span class="params">(view: UIView)</span></span> -&gt; <span class="type">UIView</span>? &#123;</div><div class="line">    </div><div class="line">        <span class="keyword">if</span> view.isKind(of: <span class="type">UIImageView</span>.classForCoder()) </div><div class="line">        &amp;&amp; view.bounds.size.height &lt;= <span class="number">1.0</span> &#123;</div><div class="line">            <span class="keyword">return</span> view</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> view <span class="keyword">in</span> view.subviews &#123;</div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> imageView = navigationBarLine(view: view) &#123;</div><div class="line">                <span class="keyword">return</span> imageView</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>之后我们在 extension 中定义一个 <code>navigationBarLine</code> 的计算属性, 方便外部访问.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">var</span> navigationBarLine: <span class="type">UIImageView</span> &#123;</div><div class="line">     <span class="keyword">return</span> navigationBarLine(view: <span class="keyword">self</span>.navigationBar) <span class="keyword">as</span>! <span class="type">UIImageView</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>OK! Done.<br>这样我们就可以在需要的时候直接访问 <code>navigationBarLine</code> 属性来将其隐藏了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在自己实现的项目中需要隐藏掉 UINavigtionBar 底部的实线, 并在底部添加一个外观一样的 UIView, 用来实现为 NavigationBar “增高”的功能. 之前在 iOS9 中使用的方法失效了. Google 了一下找到的通用的办法.&lt;/p&gt;
&lt;p&gt;我们将这个功能写在 &lt;code&gt;UINavigationController&lt;/code&gt; 的 extension 中. 首先利用简单的递归找到底部那条实线.&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UINavigationController&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;navigationBarLine&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(view: UIView)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;UIView&lt;/span&gt;? &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; view.isKind(of: &lt;span class=&quot;type&quot;&gt;UIImageView&lt;/span&gt;.classForCoder()) &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;amp;&amp;amp; view.bounds.size.height &amp;lt;= &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; view&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; view &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; view.subviews &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; imageView = navigationBarLine(view: view) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; imageView&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>实现 StarRatingView 控件</title>
    <link href="http://yoursite.com/2016/10/28/%E5%AE%9E%E7%8E%B0%20StarRatingView%20%E6%8E%A7%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/10/28/实现 StarRatingView 控件/</id>
    <published>2016-10-28T07:44:00.000Z</published>
    <updated>2016-11-12T05:10:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>自已项目中需要使用一个类此为 iTunes 中音乐评星的功能. 在 gihub 中找了一些发现都太繁琐. 本着一切从简, 能自己动手就自己动手的原则, 就参照开源的实现自己写了一个.</p>
<p>先来看看图片中我们要实现的控件.<br><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-11-12-1.01.45.png" alt="1.01.45"><br>这个 <code>StarRatingView</code> 有两种状态, 分别是可编辑和不可编辑的状态. UI结构是一个 baseView 中拥有 5 个 <code>UIImageView</code>, 根据用户手指的移动 <code>CGPoint</code>, 为相应的 <code>UIImageView</code> 填充高亮或普通的 star 图片.<br><a id="more"></a></p>
<p>首先, 我们创建一个 <code>StarRatingView</code> 的类, 它继承自 UIView. </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StarRatingView</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line"></div><div class="line"> <span class="comment">// 普通的 star 图片</span></div><div class="line"> <span class="keyword">private</span> <span class="keyword">var</span> notSelectedImage: <span class="type">UIImage</span> = <span class="type">UIImage</span>(named: <span class="string">"star_empty"</span>)! &#123;</div><div class="line">        <span class="keyword">didSet</span> &#123;</div><div class="line">            refresh()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> <span class="comment">// 高亮的 star 图片  </span></div><div class="line"> <span class="keyword">private</span> <span class="keyword">var</span> halfSeletedImage: <span class="type">UIImage</span> = <span class="type">UIImage</span>(named: <span class="string">"star_full"</span>)! &#123;</div><div class="line">        <span class="keyword">didSet</span> &#123;</div><div class="line">            refresh()</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line"> </div><div class="line"> <span class="comment">// 是否可以编辑</span></div><div class="line"> <span class="meta">@IBInspectable</span> <span class="keyword">var</span> editable: <span class="type">Bool</span> = <span class="literal">true</span></div><div class="line"> </div><div class="line"> <span class="comment">// 当前高亮 star 的数量.</span></div><div class="line"> <span class="meta">@IBInspectable</span> <span class="keyword">var</span> rating: <span class="type">Int</span> = <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">didSet</span> &#123;</div><div class="line">            refresh()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line"> <span class="comment">// 用来存储 StarRatingView 中所有的 星星 imageView</span></div><div class="line"> <span class="keyword">private</span> <span class="keyword">var</span> imageViews = [<span class="type">UIImageView</span>]()</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着我们定义一个<code>maxRating</code>属性, 它用来表示最大星星数量, 默认值是 5. 在它的 <code>didSet</code> 方法中, 我们进行 UIImageView 的初始化, 创建相应个数的 UIImageView.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> maxRating: <span class="type">Int</span> = <span class="number">5</span> &#123;</div><div class="line">        <span class="keyword">didSet</span> &#123;</div><div class="line">            imageViews.forEach &#123; $<span class="number">0</span>.removeFromSuperview() &#125;</div><div class="line">            imageViews.removeAll()</div><div class="line">            </div><div class="line">            <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;maxRating &#123;</div><div class="line">                <span class="keyword">let</span> imageView = <span class="type">UIImageView</span>()</div><div class="line">                imageView.contentMode = .scaleAspectFit</div><div class="line">                imageViews.append(imageView)</div><div class="line">                addSubview(imageView)</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            setNeedsLayout()</div><div class="line">            refresh()</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>之后我们来定义上面使用到的 <code>refresh</code> 方法, 它的逻辑非常简单, 就是遍历 imageViews 数组, 填充相应的图片.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">refresh</span><span class="params">()</span></span> &#123;  </div><div class="line">    imageViews.enumerated().forEach &#123;</div><div class="line">        index, imageView <span class="keyword">in</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.rating &gt;= index + <span class="number">1</span> &#123;</div><div class="line">            imageView.image = fullSelectedImage</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            imageView.image = notSelectedImage</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着, 来处理 <code>StarRatingView</code> 的布局. 我们重写 <code>layoutSubviews</code> 的方法. 遍历 imageViews 数组, 为其设置计算好的 frame.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> midMargin: <span class="type">CGFloat</span> = <span class="number">0</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> leftMargin: <span class="type">CGFloat</span> = <span class="number">0</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> minImageSize: <span class="type">CGSize</span> = <span class="type">CGSize</span>.zero</div><div class="line">    </div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSubviews</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.layoutSubviews()</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> desiredImageWidth: <span class="type">CGFloat</span> = <span class="number">0</span></div><div class="line">        </div><div class="line">    <span class="keyword">if</span> editable &#123;</div><div class="line">         desiredImageWidth = (<span class="keyword">self</span>.frame.size.width - (<span class="keyword">self</span>.leftMargin * <span class="number">2</span>) - </div><div class="line">         (<span class="keyword">self</span>.midMargin * <span class="type">CGFloat</span>(<span class="keyword">self</span>.imageViews.<span class="built_in">count</span>))) / </div><div class="line">         <span class="type">CGFloat</span>(<span class="keyword">self</span>.imageViews.<span class="built_in">count</span>)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">         desiredImageWidth = <span class="keyword">self</span>.frame.size.width / <span class="number">5</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> imageWidth = <span class="built_in">max</span>(<span class="keyword">self</span>.minImageSize.width, desiredImageWidth)</div><div class="line">        <span class="keyword">let</span> imageHeight = <span class="built_in">max</span>(<span class="keyword">self</span>.minImageSize.height, <span class="keyword">self</span>.frame.size.height)</div><div class="line">        </div><div class="line">        imageViews.enumerated().forEach &#123;</div><div class="line">            index, imageView <span class="keyword">in</span></div><div class="line">            </div><div class="line">            imageView.frame = <span class="type">CGRect</span>(x: <span class="keyword">self</span>.leftMargin + <span class="type">CGFloat</span>(index) * </div><div class="line">            (<span class="keyword">self</span>.midMargin + imageWidth), y: <span class="number">0</span>, width: imageWidth, height: </div><div class="line">            imageHeight)</div><div class="line">        &#125;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>最后我们来处理用户手指的触摸动作. 我们定义一个 private 的方法 <code>handleTouch(location: CGPoint)</code> 它接受一个用户点击的坐标. 以此来计算需要显示多少个 star.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleTouch</span><span class="params">(location: CGPoint)</span></span> &#123;</div><div class="line">      </div><div class="line">      <span class="keyword">if</span> !<span class="keyword">self</span>.editable &#123; <span class="keyword">return</span> &#125;</div><div class="line">      <span class="keyword">var</span> newRating = <span class="number">0</span></div><div class="line">      </div><div class="line">      <span class="keyword">for</span> (index, imageView) <span class="keyword">in</span> imageViews.enumerated().reversed() &#123;</div><div class="line">          <span class="keyword">if</span> location.x &gt; imageView.frame.origin.x &#123;</div><div class="line">              newRating = index + <span class="number">1</span></div><div class="line">              <span class="keyword">break</span></div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">self</span>.rating = newRating</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这样我们就可以在 UIView 的响应触摸事件的方法中调用 <code>handleTouch(location: CGPoint)</code> 了.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesBegan</span><span class="params">(<span class="number">_</span> touches: Set&lt;UITouch&gt;, with event: UIEvent?)</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> touch = touches.first!</div><div class="line">    <span class="keyword">let</span> location = touch.location(<span class="keyword">in</span>: <span class="keyword">self</span>)</div><div class="line">    handleTouch(location: location)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesMoved</span><span class="params">(<span class="number">_</span> touches: Set&lt;UITouch&gt;, with event: UIEvent?)</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> touch = touches.first!</div><div class="line">    <span class="keyword">let</span> location = touch.location(<span class="keyword">in</span>: <span class="keyword">self</span>)</div><div class="line">    handleTouch(location: location)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OK! Done.</p>
<p>在外部使用的时候, 我们可以指定其最大的 star 数量, 也可以通过 <code>ratring</code> 属性来控制当前高亮的 star 数量, 你也可以非常方便的更换 star 图片.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自已项目中需要使用一个类此为 iTunes 中音乐评星的功能. 在 gihub 中找了一些发现都太繁琐. 本着一切从简, 能自己动手就自己动手的原则, 就参照开源的实现自己写了一个.&lt;/p&gt;
&lt;p&gt;先来看看图片中我们要实现的控件.&lt;br&gt;&lt;img src=&quot;http://7xrfzx.com1.z0.glb.clouddn.com/2016-11-12-1.01.45.png&quot; alt=&quot;1.01.45&quot;&gt;&lt;br&gt;这个 &lt;code&gt;StarRatingView&lt;/code&gt; 有两种状态, 分别是可编辑和不可编辑的状态. UI结构是一个 baseView 中拥有 5 个 &lt;code&gt;UIImageView&lt;/code&gt;, 根据用户手指的移动 &lt;code&gt;CGPoint&lt;/code&gt;, 为相应的 &lt;code&gt;UIImageView&lt;/code&gt; 填充高亮或普通的 star 图片.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>刷新 UITableView &amp; UICollectionView</title>
    <link href="http://yoursite.com/2016/10/20/%E5%88%B7%E6%96%B0UITableView&amp;UICollectionView/"/>
    <id>http://yoursite.com/2016/10/20/刷新UITableView&amp;UICollectionView/</id>
    <published>2016-10-20T13:22:08.000Z</published>
    <updated>2016-11-09T13:08:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>当 tableView 或 collectionView 的数据发生变化时，我们需要自己来处理控制器的刷新行为，比如<code>reloadData</code> <code>insertRowsAtIndexPatch</code> 等刷新方法。我们很可能会使用到枚举或<code>if else</code>进行逻辑判断。在阅读 Yep 代码的时候发现了一种利用 <code>extension</code> 的方法，可以让控制器中的代码更加简洁。</p>
<p>我们首先为 UITableView 创建一个 extension, 并创建一个 enum 用来表示 tableView 的所有刷新行为。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UITableView</span> </span>&#123;</div><div class="line">    </div><div class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">WayToUpdata</span> </span>&#123;</div><div class="line">  </div><div class="line">    <span class="keyword">case</span> <span class="keyword">none</span></div><div class="line">    <span class="keyword">case</span> reloadData</div><div class="line">    <span class="keyword">case</span> insert([<span class="type">IndexPath</span>])</div><div class="line">    <span class="keyword">case</span> reloadAtIndexPath([<span class="type">IndexPath</span>])</div><div class="line">        </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>我们定义的 <code>WayToUpdate</code> 中有两个 case 关联了 <code>IndexPath</code> 的数组。 其关联的对象就是我们要刷新的 indexPaths。</p>
<p>接着为刚才声明的 enum 添加一个控制更新行为的方法：<code>performWithTableView</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">performWithTableView</span><span class="params">(tableView: UITableView)</span></span> &#123;</div><div class="line">            </div><div class="line">            <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">            <span class="keyword">case</span> .<span class="keyword">none</span>:</div><div class="line">                printLog(<span class="string">"tableView WayToUpdata: None"</span>)</div><div class="line">                </div><div class="line">            <span class="keyword">case</span> .reloadData:</div><div class="line">                printLog(<span class="string">"tableView WayToUpdata: ReloadData"</span>)</div><div class="line">                tableView.reloadData()</div><div class="line">                </div><div class="line">            <span class="keyword">case</span> .reloadAtIndexPath(<span class="keyword">let</span> indexPaths):</div><div class="line">                printLog(<span class="string">"tableView WayToUpdata: ReloadAtIndexPath"</span>)</div><div class="line">                tableView.reloadRows(at: indexPaths, with: .<span class="keyword">none</span>)</div><div class="line">                </div><div class="line">            <span class="keyword">case</span> .insert(<span class="keyword">let</span> indexPaths):</div><div class="line">                printLog(<span class="string">"tableView WayToUpdata: Insert"</span>)</div><div class="line">                tableView.insertRows(at: indexPaths, with: .<span class="keyword">none</span>)</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上面的代码是枚举某个 <code>wayToUpdate</code> 实例，来确定要进行的 reloadDate 行为。</p>
<p>tableView 的 extension 部分完成后，我们来看在 tableViewController 中的应用。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 加载新数据后更新 UI 的闭包</span></div><div class="line"> <span class="keyword">let</span> completion: ([<span class="type">Feed</span>]) -&gt; <span class="type">Void</span> = &#123; feeds <span class="keyword">in</span></div><div class="line">            </div><div class="line">            <span class="type">DispatchQueue</span>.main.async &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">                </div><div class="line">                <span class="keyword">guard</span> <span class="keyword">let</span> strongSelf = <span class="keyword">self</span> <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">return</span></div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="keyword">let</span> newFeeds = feeds</div><div class="line">                <span class="comment">// 定义一个可变的更新行为.</span></div><div class="line">                <span class="keyword">var</span> wayToUpdata = <span class="type">UITableView</span>.<span class="type">WayToUpdata</span>.<span class="keyword">none</span></div><div class="line">                </div><div class="line">                <span class="keyword">if</span> strongSelf.feeds.isEmpty &#123;</div><div class="line">                    wayToUpdata = .reloadData</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="keyword">switch</span> uploadMode &#123;</div><div class="line">                <span class="comment">// 顶部插入新数据时  </span></div><div class="line">                <span class="keyword">case</span> .top:</div><div class="line">                    <span class="comment">// 使用reloadData的方法.</span></div><div class="line">                    wayToUpdata = .reloadData</div><div class="line">                    strongSelf.feeds = newFeeds</div><div class="line">                    </div><div class="line">                <span class="comment">// 底部加载更多数据时    </span></div><div class="line">                <span class="keyword">case</span> .loadMore:</div><div class="line">                    </div><div class="line">                    <span class="keyword">let</span> oldFeedsCount = strongSelf.feeds.<span class="built_in">count</span></div><div class="line">                    </div><div class="line">                    <span class="keyword">let</span> oldFeedIDs = <span class="type">Set</span>&lt;<span class="type">String</span>&gt;(strongSelf.feeds.<span class="built_in">map</span></div><div class="line">                     &#123; $<span class="number">0</span>.objectId &#125;)</div><div class="line">                    </div><div class="line">                    <span class="keyword">var</span> newRealFeeds = [<span class="type">Feed</span>]()</div><div class="line">                    <span class="keyword">for</span> feed <span class="keyword">in</span> newFeeds &#123;</div><div class="line">                        <span class="keyword">if</span> !oldFeedIDs.<span class="built_in">contains</span>(feed.objectId) &#123;</div><div class="line">                            newRealFeeds.append(feed)</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                    strongSelf.feeds += newRealFeeds</div><div class="line">                    </div><div class="line">                    <span class="keyword">let</span> newFeedCount = strongSelf.feeds.<span class="built_in">count</span></div><div class="line">                    </div><div class="line">                    <span class="keyword">let</span> indexPaths = <span class="type">Array</span>(oldFeedsCount..&lt;newFeedCount).<span class="built_in">map</span> &#123;</div><div class="line">                        <span class="type">IndexPath</span>(row: $<span class="number">0</span>, section: <span class="type">Section</span>.<span class="type">Feed</span>.rawValue)</div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                    <span class="comment">// 使用插入的方式,并关联需要插入的 indexPaths</span></div><div class="line">                    wayToUpdata = .insert(indexPaths )</div><div class="line">                    </div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 最后指定需要更新的 tableView</span></div><div class="line">                wayToUpdata.performWithTableView(tableView: strongSelf.tableView)</div><div class="line">                </div><div class="line">                finish?()</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>OK! Done.<br>以后凡是有 tableView 需要 reloadData, 就都可以使用这样的方式. </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当 tableView 或 collectionView 的数据发生变化时，我们需要自己来处理控制器的刷新行为，比如&lt;code&gt;reloadData&lt;/code&gt; &lt;code&gt;insertRowsAtIndexPatch&lt;/code&gt; 等刷新方法。我们很可能会使用到枚举或&lt;code&gt;if else&lt;/code&gt;进行逻辑判断。在阅读 Yep 代码的时候发现了一种利用 &lt;code&gt;extension&lt;/code&gt; 的方法，可以让控制器中的代码更加简洁。&lt;/p&gt;
&lt;p&gt;我们首先为 UITableView 创建一个 extension, 并创建一个 enum 用来表示 tableView 的所有刷新行为。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UITableView&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WayToUpdata&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;none&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; reloadData&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; insert([&lt;span class=&quot;type&quot;&gt;IndexPath&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; reloadAtIndexPath([&lt;span class=&quot;type&quot;&gt;IndexPath&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>比 UIAlertController 更好的选择</title>
    <link href="http://yoursite.com/2016/10/11/ActionSheetView/"/>
    <id>http://yoursite.com/2016/10/11/ActionSheetView/</id>
    <published>2016-10-11T02:30:00.000Z</published>
    <updated>2017-02-19T12:18:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 iOS 开发中我们会经常使用到 <code>UIAlertController</code>, 但本身提供的 API 接口有限, 自定义外观会非常麻烦, 更别提在其中使用自定义的 View 了. 今天我们来封装一个 <code>ActionSheetView</code>, 用来代替系统提供的 <code>actionSheet</code> 类型. </p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-11-13-屏幕快照 2016-11-13 下午1.46.14.png" alt="屏幕快照 2016-11-13 下午1.46.14"></p>
<p>图中底部弹出的菜单就是我们要实现的 <code>ActionSheetView</code>, 它有的主体结构是由一个 <code>UITableView</code> 来实现, 我们可以为其定制非常多种类的 <code>UITableViewCell</code>, 并通过 Swift 中的枚举关联值的特性,让其外部使用变得非常简单. 比如下面这种拥有 switch 开关的 cell.<br><a id="more"></a><br><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-11-13-屏幕快照 2016-11-13 下午1.45.18.png" alt="屏幕快照 2016-11-13 下午1.45.18"><br>首先, 我们来创建一个 <code>ActionSheetView</code> 类, 它继承自 UIView. 我们在其中定义一个 Enum, 用来表示所以类型的 <code>UITableViewCell</code>.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActionSheetView</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line">   </div><div class="line">   <span class="class"><span class="keyword">enum</span> <span class="title">Item</span> </span>&#123;</div><div class="line">       <span class="keyword">case</span> <span class="type">Option</span>(title: <span class="type">String</span>, titleColor: <span class="type">UIColor</span>, action: () -&gt; <span class="type">Void</span>)</div><div class="line">       <span class="keyword">case</span> <span class="type">Default</span>(title: <span class="type">String</span>, titleColor: <span class="type">UIColor</span>, action: () -&gt; <span class="type">Bool</span>)</div><div class="line">       <span class="keyword">case</span> <span class="type">Detail</span>(title: <span class="type">String</span>, titleColor: <span class="type">UIColor</span>, action: () -&gt; <span class="type">Void</span>)</div><div class="line">       <span class="keyword">case</span> <span class="type">Switch</span>(title: <span class="type">String</span>, titleColor: <span class="type">UIColor</span>, switchOn: <span class="type">Bool</span>, </div><div class="line">       action: (<span class="number">_</span> switchOn: <span class="type">Bool</span>) -&gt; <span class="type">Void</span>)</div><div class="line">       <span class="keyword">case</span> <span class="type">SubtitleSwitch</span>(title: <span class="type">String</span>, titleColor: <span class="type">UIColor</span>, subtitle: <span class="type">String</span>, </div><div class="line">       subtitleColor: <span class="type">UIColor</span>, switchOn: <span class="type">Bool</span>, </div><div class="line">       action: (<span class="number">_</span> switchOn: <span class="type">Bool</span>) -&gt; <span class="type">Void</span>)</div><div class="line">       <span class="keyword">case</span> <span class="type">Check</span>(title: <span class="type">String</span>, titleColor: <span class="type">UIColor</span>, checked: <span class="type">Bool</span>, </div><div class="line">       action: () -&gt; <span class="type">Void</span>)</div><div class="line">       <span class="keyword">case</span> <span class="type">Cancel</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>接着创建一个 <code>Item</code> 的数组, 并实现 <code>init</code> 方法. 我们使用外部传入的 <code>Item</code> 数组来进行 <code>ActionSheetView</code> 的配置.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> items: [<span class="type">Item</span>]</div><div class="line"></div><div class="line"><span class="keyword">init</span>(items: [<span class="type">Item</span>]) &#123;</div><div class="line">      <span class="keyword">self</span>.items = items</div><div class="line">      <span class="keyword">super</span>.<span class="keyword">init</span>(frame: <span class="type">CGRect</span>.zero)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们来创建需要使用到的 UIView.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">fileprivate <span class="built_in">lazy</span> <span class="keyword">var</span> containerView: <span class="type">UIView</span> = &#123;</div><div class="line">       <span class="keyword">let</span> view = <span class="type">UIView</span>()</div><div class="line">       view.backgroundColor = <span class="type">UIColor</span>.clear</div><div class="line">       <span class="keyword">return</span> view</div><div class="line">   &#125;()</div><div class="line">   </div><div class="line"><span class="comment">// tableView 行高</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">let</span> rowHeight: <span class="type">CGFloat</span> = <span class="number">60</span></div><div class="line"></div><div class="line"><span class="comment">// tableView 的高度   </span></div><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> totalHeight: <span class="type">CGFloat</span> &#123;</div><div class="line">       <span class="keyword">return</span> <span class="type">CGFloat</span>(items.<span class="built_in">count</span>) * rowHeight</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">fileprivate <span class="built_in">lazy</span> <span class="keyword">var</span> tableView: <span class="type">UITableView</span> = &#123;</div><div class="line">       <span class="keyword">let</span> view = <span class="type">UITableView</span>()</div><div class="line">       view.dataSource = <span class="keyword">self</span></div><div class="line">       view.delegate = <span class="keyword">self</span></div><div class="line">       view.rowHeight = <span class="keyword">self</span>.rowHeight</div><div class="line">       view.isScrollEnabled = <span class="literal">false</span></div><div class="line">       view.backgroundColor = <span class="type">UIColor</span>.clear</div><div class="line">       <span class="keyword">return</span> view</div><div class="line">   &#125;()</div></pre></td></tr></table></figure>
<p>上面定义的 <code>containerView</code> 其实算是整个 <code>ActionSheetView</code> 的背景视图, 与 window 大小一致. 用它来对当前屏幕的内容进行遮罩, 我们现在来定义一个 <code>makeUI</code> 的方法, 用来初始化 subViews 的 layout.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用来保存 tableView 的底部约束. </span></div><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> tableViewBottomConstraint: <span class="type">NSLayoutConstraint</span>?</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">makeUI</span><span class="params">()</span></span> &#123;</div><div class="line">        </div><div class="line">        addSubview(containerView)</div><div class="line">        containerView.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></div><div class="line">        </div><div class="line">        containerView.addSubview(tableView)</div><div class="line">        tableView.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.backgroundColor = <span class="type">UIColor</span>.clear</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> viewsDictionary: [<span class="type">String</span>: <span class="type">AnyObject</span>] = [</div><div class="line">            <span class="string">"containerView"</span>: containerView,</div><div class="line">            <span class="string">"tableView"</span>: tableView</div><div class="line">        ]</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> containerViewConstraintsH = </div><div class="line">        <span class="type">NSLayoutConstraint</span>.constraints(withVisualFormat: <span class="string">"H:|[containerView]|"</span>, </div><div class="line">        options:  [], metrics: <span class="literal">nil</span>, views: viewsDictionary)</div><div class="line">        <span class="keyword">let</span> containerViewConstraintsV = </div><div class="line">        <span class="type">NSLayoutConstraint</span>.constraints(withVisualFormat: <span class="string">"V:|[containerView]|"</span>, </div><div class="line">        options: [], metrics: <span class="literal">nil</span>, views: viewsDictionary)</div><div class="line">        </div><div class="line">        <span class="type">NSLayoutConstraint</span>.activate(containerViewConstraintsH)</div><div class="line">        <span class="type">NSLayoutConstraint</span>.activate(containerViewConstraintsV)</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">let</span> tableViewConstraintsH = </div><div class="line">        <span class="type">NSLayoutConstraint</span>.constraints(withVisualFormat: <span class="string">"H:|[tableView]|"</span>, </div><div class="line">        options: [], metrics: <span class="literal">nil</span>, views: viewsDictionary)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> tableViewBottomConstraint = <span class="type">NSLayoutConstraint</span>(item: tableView, </div><div class="line">        attribute: .bottom, relatedBy: .<span class="built_in">equal</span>, toItem: containerView, </div><div class="line">        attribute: .bottom, multiplier: <span class="number">1.0</span>, constant: <span class="keyword">self</span>.totalHeight)</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.tableViewBottomConstraint = tableViewBottomConstraint</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> tableViewHeightConstraint = <span class="type">NSLayoutConstraint</span>(item: tableView, </div><div class="line">        attribute: .height, relatedBy: .<span class="built_in">equal</span>, toItem: <span class="literal">nil</span>, </div><div class="line">        attribute: .notAnAttribute, multiplier: <span class="number">1.0</span>, constant: <span class="keyword">self</span>.totalHeight)</div><div class="line">        </div><div class="line">        <span class="type">NSLayoutConstraint</span>.activate(tableViewConstraintsH)</div><div class="line">        <span class="type">NSLayoutConstraint</span>.activate([tableViewBottomConstraint, </div><div class="line">        tableViewHeightConstraint])</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上面的代码用 <code>containerView</code> 填充了整个屏幕, 下面为其添加一个点击事件, 用于隐藏 <code>ActionSheetView</code>. 我们将把这些代码写到 <code>didMoveToSuperView</code> 中, 并在此执行 <code>makeUI</code> 的初始化.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> isFirstTimeBeenAddedAsSubview = <span class="literal">true</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didMoveToSuperview</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didMoveToSuperview()</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> isFirstTimeBeenAddedAsSubview &#123;</div><div class="line">            isFirstTimeBeenAddedAsSubview = <span class="literal">false</span></div><div class="line">            </div><div class="line">            makeUI()</div><div class="line">        </div><div class="line">            <span class="keyword">let</span> tap = <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: </div><div class="line">            #selector(<span class="type">ActionSheetView</span>.hide))</div><div class="line">            containerView.addGestureRecognizer(tap)</div><div class="line">            tap.cancelsTouchesInView = <span class="literal">true</span></div><div class="line">            tap.delegate = <span class="keyword">self</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>现在我们来实现 <code>ActionSheetView</code> 的 <code>show</code> 和 <code>hide</code> 方法.  我们利用简单的动画让弹出的显得自然, 并利用之前存储的 <code>tableViewBottomConstraint</code> 属性来控制 <code>ActionSheetView</code> 的消失.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(<span class="keyword">in</span> view: UIView)</span></span> &#123;</div><div class="line">       </div><div class="line">       frame = view.bounds</div><div class="line">       </div><div class="line">       view.addSubview(<span class="keyword">self</span>)</div><div class="line">       </div><div class="line">       layoutIfNeeded()</div><div class="line">       </div><div class="line">       containerView.alpha = <span class="number">1</span></div><div class="line">       </div><div class="line">       <span class="type">UIView</span>.animate(withDuration: <span class="number">0.2</span>, delay: <span class="number">0.0</span>, options: .curveEaseIn, </div><div class="line">       animations: &#123; <span class="number">_</span> <span class="keyword">in</span></div><div class="line">           <span class="keyword">self</span>.containerView.backgroundColor = </div><div class="line">           <span class="type">UIColor</span>.black.withAlphaComponent(<span class="number">0.3</span>)</div><div class="line">           </div><div class="line">           &#125;, completion: &#123; <span class="number">_</span> <span class="keyword">in</span></div><div class="line">       &#125;)</div><div class="line">       </div><div class="line">       <span class="type">UIView</span>.animate(withDuration: <span class="number">0.2</span>, delay: <span class="number">0.1</span>, options: .curveEaseOut, </div><div class="line">       animations: &#123; <span class="number">_</span> <span class="keyword">in</span></div><div class="line">           <span class="keyword">self</span>.tableViewBottomConstraint?.constant = <span class="number">0</span></div><div class="line">           </div><div class="line">           <span class="keyword">self</span>.layoutIfNeeded()</div><div class="line">           </div><div class="line">           &#125;, completion: &#123; <span class="number">_</span> <span class="keyword">in</span></div><div class="line">       &#125;)</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">hide</span><span class="params">()</span></span> &#123;</div><div class="line">       </div><div class="line">       <span class="type">UIView</span>.animate(withDuration: <span class="number">0.2</span>, delay: <span class="number">0.0</span>, options: .curveEaseIn, </div><div class="line">       animations: &#123; <span class="number">_</span> <span class="keyword">in</span></div><div class="line">           <span class="keyword">self</span>.tableViewBottomConstraint?.constant = <span class="keyword">self</span>.totalHeight</div><div class="line">           </div><div class="line">           <span class="keyword">self</span>.layoutIfNeeded()</div><div class="line">           </div><div class="line">           &#125;, completion: &#123; <span class="number">_</span> <span class="keyword">in</span></div><div class="line">       &#125;)</div><div class="line">       </div><div class="line">       <span class="type">UIView</span>.animate(withDuration: <span class="number">0.2</span>, delay: <span class="number">0.1</span>, options: .curveEaseOut, </div><div class="line">       animations: &#123; <span class="number">_</span> <span class="keyword">in</span></div><div class="line">           <span class="keyword">self</span>.containerView.backgroundColor = <span class="type">UIColor</span>.clear</div><div class="line">           </div><div class="line">           &#125;, completion: &#123; <span class="number">_</span> <span class="keyword">in</span></div><div class="line">               <span class="keyword">self</span>.removeFromSuperview()</div><div class="line">       &#125;)</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>最后我们来完成 <code>ActionSheetView</code> 中 <code>tableView</code> 的 delegate &amp; dataSource.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ActionSheetView</span>: <span class="title">UITableViewDelegate</span>, <span class="title">UITableViewDataSource</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span></div><div class="line">     -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> items.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> </div><div class="line">    -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> item = items[indexPath.row]</div><div class="line">        </div><div class="line">        <span class="keyword">switch</span> item &#123;</div><div class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Option</span>(title, titleColor, action):</div><div class="line">            <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: </div><div class="line">            <span class="type">ActionSheetOptionCell</span>.reuseIdentifier, <span class="keyword">for</span>: indexPath) <span class="keyword">as</span>!</div><div class="line">             <span class="type">ActionSheetOptionCell</span></div><div class="line">            cell.colorTitlelabel.text = title</div><div class="line">            cell.colorTitleLabeltextColor = titleColor</div><div class="line">            cell.action = action</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> cell</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Default</span>(title, titleColor, <span class="number">_</span>):</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: </div><div class="line">            <span class="type">ActionSheetDefaultCell</span>.reuseIdentifier) <span class="keyword">as</span>! <span class="type">ActionSheetDefaultCell</span></div><div class="line">            cell.colorTitlelabel.text = title</div><div class="line">            cell.colorTitleLabeltextColor = titleColor</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> cell</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Detail</span>(title, titleColor, action):</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: </div><div class="line">            <span class="type">ActionSheetDetailCell</span>.reuseIdentifier) <span class="keyword">as</span>! <span class="type">ActionSheetDetailCell</span></div><div class="line">            cell.textLabel?.text = title</div><div class="line">            cell.textLabel?.textColor = titleColor</div><div class="line">            cell.action = action</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> cell</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Switch</span>(title, titleColor, switchOn, action):</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: </div><div class="line">            <span class="type">ActionSheetSwitchCell</span>.reuseIdentifier) <span class="keyword">as</span>! <span class="type">ActionSheetSwitchCell</span></div><div class="line">            cell.textLabel?.text = title</div><div class="line">            cell.textLabel?.textColor = titleColor</div><div class="line">            cell.checkedSwitch.isOn = switchOn</div><div class="line">            cell.action = action</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> cell</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">SubtitleSwitch</span>(title, titleColor, subtitle, subtitleColor, </div><div class="line">        switchOn, action):</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: </div><div class="line">            <span class="type">ActionSheetSubtitleSwitchCell</span>.reuseIdentifier) <span class="keyword">as</span>! <span class="type">ActionSheetSubtitleSwitchCell</span></div><div class="line">            cell.titleLabel.text = title</div><div class="line">            cell.titleLabel.textColor = titleColor</div><div class="line">            cell.subtitleLabel.text = subtitle</div><div class="line">            cell.subtitleLabel.textColor = subtitleColor</div><div class="line">            cell.checkedSwitch.isOn = switchOn</div><div class="line">            cell.action = action</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> cell</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Check</span>(title, titleColor, checked, <span class="number">_</span>):</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier:</div><div class="line">             <span class="type">ActionSheetCheckCell</span>.reuseIdentifier) <span class="keyword">as</span>! <span class="type">ActionSheetCheckCell</span></div><div class="line">            cell.colorTitleLabel.text = title</div><div class="line">            cell.colorTitleLabelTextColor = titleColor</div><div class="line">            cell.checkImageView.isHidden = !checked</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> cell</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> .<span class="type">Cancel</span>:</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: </div><div class="line">            <span class="type">ActionSheetDefaultCell</span>.reuseIdentifier) <span class="keyword">as</span>! <span class="type">ActionSheetDefaultCell</span></div><div class="line">            cell.colorTitlelabel.text = <span class="type">NSLocalizedString</span>(<span class="string">"取消"</span>, comment: <span class="string">""</span>)</div><div class="line">            cell.colorTitleLabeltextColor = <span class="type">UIColor</span>.cubeTintColor()</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> cell</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">defer</span> &#123;</div><div class="line">            tableView.deselectRow(at: indexPath <span class="keyword">as</span> <span class="type">IndexPath</span>, animated: <span class="literal">true</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> item = items[indexPath.row]</div><div class="line">        </div><div class="line">        <span class="keyword">switch</span> item &#123;</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> .<span class="type">Option</span>(<span class="number">_</span>, <span class="number">_</span>, <span class="keyword">let</span> action):</div><div class="line">            </div><div class="line">            hideAndDo(afterHideAction: action)</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> .<span class="type">Default</span>(<span class="number">_</span>, <span class="number">_</span>, <span class="keyword">let</span> action):</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> action() &#123;</div><div class="line">                hide()</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> .<span class="type">Detail</span>(<span class="number">_</span>, <span class="number">_</span>, <span class="keyword">let</span> action):</div><div class="line">            </div><div class="line">            hideAndDo(afterHideAction: action)</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> .<span class="type">Switch</span>:</div><div class="line">            </div><div class="line">            <span class="keyword">break</span></div><div class="line">            </div><div class="line">        <span class="keyword">case</span> .<span class="type">SubtitleSwitch</span>:</div><div class="line">            </div><div class="line">            <span class="keyword">break</span></div><div class="line">            </div><div class="line">        <span class="keyword">case</span> .<span class="type">Check</span>(<span class="number">_</span>, <span class="number">_</span>, <span class="number">_</span>, <span class="keyword">let</span> action):</div><div class="line">            </div><div class="line">            action()</div><div class="line">            hide()</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> .<span class="type">Cancel</span>:</div><div class="line">            </div><div class="line">            hide()</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>以上代码的逻辑非常简单, 根据传入的 <code>Items</code> 实例, 为每行分配合适的 <code>UITableViewCell</code> , 并对 cell 进行配置. 在 <code>tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)</code> 方法中, 我们在这里执行 <code>Item</code> 枚举所关联的 action. </p>
<p>另外 tableView 所使用的 cell 的实现就不一一列举了, 仅贴出 <code>ActionSheetSwitchCell</code> 的实现好了, 其他都大同小异.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionSheetSwitchCell</span>: <span class="title">UITableViewCell</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">reuseIdentifier</span>: <span class="title">String</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"\(self)"</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> action: ((<span class="type">Bool</span>) -&gt; <span class="type">Void</span>)?</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(style: <span class="type">UITableViewCellStyle</span>, reuseIdentifier: <span class="type">String</span>?) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(style: style, reuseIdentifier: reuseIdentifier)</div><div class="line">        </div><div class="line">        layoutMargins = <span class="type">UIEdgeInsets</span>(top: <span class="number">0</span>, <span class="keyword">left</span>: <span class="number">20</span>, bottom: <span class="number">0</span>, <span class="keyword">right</span>: <span class="number">20</span>)</div><div class="line">        </div><div class="line">        textLabel?.textColor = <span class="type">UIColor</span>.darkGray</div><div class="line">        textLabel?.font = <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">18</span>, weight: <span class="type">UIFontWeightLight</span>)</div><div class="line">        </div><div class="line">        makeUI()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</div><div class="line">        <span class="built_in">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> checkedSwitch: <span class="type">UISwitch</span> = &#123;</div><div class="line">        <span class="keyword">let</span> s = <span class="type">UISwitch</span>()</div><div class="line">        s.addTarget(<span class="keyword">self</span>, action: </div><div class="line">        #selector(<span class="type">ActionSheetSwitchCell</span>.toggleSwitch(<span class="number">_</span>:)), <span class="keyword">for</span>: .valueChanged)</div><div class="line">        <span class="keyword">return</span> s</div><div class="line">    &#125;()</div><div class="line">    </div><div class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">toggleSwitch</span><span class="params">(<span class="number">_</span> sender: UISwitch)</span></span> &#123;</div><div class="line">        action?(sender.isOn)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeUI</span><span class="params">()</span></span> &#123;</div><div class="line">        contentView.addSubview(checkedSwitch)</div><div class="line">        checkedSwitch.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> centerY = <span class="type">NSLayoutConstraint</span>(item: checkedSwitch, attribute: .centerY,</div><div class="line">         relatedBy: .<span class="built_in">equal</span>, toItem: contentView, attribute: .centerY, multiplier: </div><div class="line">         <span class="number">1</span>, constant: <span class="number">0</span>)</div><div class="line">        <span class="keyword">let</span> trailing = <span class="type">NSLayoutConstraint</span>(item: checkedSwitch, </div><div class="line">        attribute: .trailing, relatedBy: .<span class="built_in">equal</span>, toItem: contentView, </div><div class="line">        attribute: .trailing, multiplier: <span class="number">1</span>, constant: -<span class="number">20</span>)</div><div class="line">        </div><div class="line">        <span class="type">NSLayoutConstraint</span>.activate([centerY, trailing])</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OK! Done.<br>我们最后来看一下使用 <code>ActinoSheetView</code> 的代码片段.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> actionSheetView: <span class="type">ActionSheetView</span> = &#123;</div><div class="line">        <span class="keyword">var</span> items = <span class="keyword">self</span>.creatActionSheetViewItems()</div><div class="line">        items.append(<span class="type">ActionSheetView</span>.<span class="type">Item</span>.<span class="type">Cancel</span>)</div><div class="line">        <span class="keyword">let</span> sheetView = <span class="type">ActionSheetView</span>(items: items)</div><div class="line">        <span class="keyword">return</span> sheetView</div><div class="line">    &#125;()</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">creatActionSheetViewItems</span><span class="params">()</span></span> -&gt; [<span class="type">ActionSheetView</span>.<span class="type">Item</span>] &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> switchItem = <span class="type">ActionSheetView</span>.<span class="type">Item</span>.<span class="type">Switch</span>(</div><div class="line">            title: <span class="string">"同步"</span>,</div><div class="line">            titleColor: <span class="type">UIColor</span>.cubeTintColor(),</div><div class="line">            switchOn: <span class="literal">true</span>, action: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] switchOn <span class="keyword">in</span></div><div class="line">            </div><div class="line">        &#125;)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> editItem = <span class="type">ActionSheetView</span>.<span class="type">Item</span>.<span class="type">Option</span>(</div><div class="line">            title: <span class="string">"编辑此公式"</span>,</div><div class="line">            titleColor: <span class="type">UIColor</span>.cubeTintColor(),</div><div class="line">            action: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">                <span class="keyword">guard</span> <span class="keyword">let</span> strongSelf = <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">                </div><div class="line">            &#125;)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> deleteItem = <span class="type">ActionSheetView</span>.<span class="type">Item</span>.<span class="type">Option</span>(</div><div class="line">            title: <span class="string">"删除此公式"</span>,</div><div class="line">            titleColor: <span class="type">UIColor</span>.red,</div><div class="line">            action: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">                <span class="keyword">guard</span> <span class="keyword">let</span> strongSelf = <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">                </div><div class="line">            &#125;)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> copyToMy = <span class="type">ActionSheetView</span>.<span class="type">Item</span>.<span class="type">Option</span>(</div><div class="line">            </div><div class="line">            title: <span class="string">"编辑并添加到公式"</span>,</div><div class="line">            titleColor: <span class="type">UIColor</span>.cubeTintColor(),</div><div class="line">            </div><div class="line">            action: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">                <span class="keyword">guard</span> <span class="keyword">let</span> strongSelf = <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">                </div><div class="line">            &#125;)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> [switchItem, editItem, deleteItem, copyToMy]</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">showActionSheetView</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> window = view.window &#123;</div><div class="line">            actionSheetView.showInView(view: window)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后如何希望实现更多种类的 <code>UITableViewCell</code> 只需要对 <code>Item</code> 这个枚举增加新的 case 就可以了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 iOS 开发中我们会经常使用到 &lt;code&gt;UIAlertController&lt;/code&gt;, 但本身提供的 API 接口有限, 自定义外观会非常麻烦, 更别提在其中使用自定义的 View 了. 今天我们来封装一个 &lt;code&gt;ActionSheetView&lt;/code&gt;, 用来代替系统提供的 &lt;code&gt;actionSheet&lt;/code&gt; 类型. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrfzx.com1.z0.glb.clouddn.com/2016-11-13-屏幕快照 2016-11-13 下午1.46.14.png&quot; alt=&quot;屏幕快照 2016-11-13 下午1.46.14&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中底部弹出的菜单就是我们要实现的 &lt;code&gt;ActionSheetView&lt;/code&gt;, 它有的主体结构是由一个 &lt;code&gt;UITableView&lt;/code&gt; 来实现, 我们可以为其定制非常多种类的 &lt;code&gt;UITableViewCell&lt;/code&gt;, 并通过 Swift 中的枚举关联值的特性,让其外部使用变得非常简单. 比如下面这种拥有 switch 开关的 cell.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>去除 String 中多余的字符</title>
    <link href="http://yoursite.com/2016/10/10/%E5%8E%BB%E9%99%A4String%E7%A9%BA%E6%A0%BC/"/>
    <id>http://yoursite.com/2016/10/10/去除String空格/</id>
    <published>2016-10-10T02:23:00.000Z</published>
    <updated>2016-11-12T03:54:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>在进行 App 内部搜索或者筛选网络加载的 String 内容时, 需要对字符串进行过滤. 比如我们有一个 textField 让用户在此输入 nickName, 他或许会调皮的输入一堆空格. 这时候就需要我们对用户的输入进行检查, 符合标准才能通过. 下面我们为 String 类型增加一个 extension 完成这样的功能.</p>
<p>首先定义一个 enum, 用来表示不同的过滤规则.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">TrimmingType</span> </span>&#123;</div><div class="line">        <span class="comment">///去除两端空格</span></div><div class="line">        <span class="keyword">case</span> whitespace</div><div class="line">        <span class="comment">///去除换行和两端空格 </span></div><div class="line">        <span class="keyword">case</span> whitespaceAndNewLine</div><div class="line">        <span class="comment">///去除所有空格</span></div><div class="line">        <span class="keyword">case</span> squashingWhiteSpace</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>之后我们在 String 的 extension 中增加一个 public 方法 <code>trimming(with trimmingType: TrimmingType) -&gt; String</code>. </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">trimming</span><span class="params">(with trimmingType: TrimmingType)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">switch</span> trimmingType &#123;</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> .whitespace:</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> trimmingCharacters(<span class="keyword">in</span>: <span class="type">NSCharacterSet</span>.whitespaces)</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> .whitespaceAndNewLine:</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> trimmingCharacters(<span class="keyword">in</span>: <span class="type">NSCharacterSet</span>.whitespacesAndNewlines)</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> .squashingWhiteSpace:</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> compoents = components(separatedBy: </div><div class="line">            <span class="type">NSCharacterSet</span>.whitespaces).<span class="built_in">filter</span> &#123;</div><div class="line">                !$<span class="number">0</span>.isEmpty</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> compoents.joined(separator: <span class="string">""</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>OK! Done.<br>我们在外部使用时只需要用字符串实例直接调用自己的 <code>trimming</code> 方法就可以了.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> string = <span class="string">"    测试字符串 "</span></div><div class="line"><span class="keyword">let</span> resultString = string.trimming(trimmingType: .whitespace)</div><div class="line"><span class="built_in">print</span>(resultString)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在进行 App 内部搜索或者筛选网络加载的 String 内容时, 需要对字符串进行过滤. 比如我们有一个 textField 让用户在此输入 nickName, 他或许会调皮的输入一堆空格. 这时候就需要我们对用户的输入进行检查, 符合标准才能通过. 下面我们为 String 类型增加一个 extension 完成这样的功能.&lt;/p&gt;
&lt;p&gt;首先定义一个 enum, 用来表示不同的过滤规则.&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;String&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TrimmingType&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;///去除两端空格&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; whitespace&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;///去除换行和两端空格 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; whitespaceAndNewLine&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;///去除所有空格&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; squashingWhiteSpace&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在 Xcode8 中继续使用 XVim</title>
    <link href="http://yoursite.com/2016/08/21/%E5%9C%A8Xcode8%E4%B8%AD%E7%BB%A7%E7%BB%AD%E4%BD%BF%E7%94%A8XVIM/"/>
    <id>http://yoursite.com/2016/08/21/在Xcode8中继续使用XVIM/</id>
    <published>2016-08-21T07:21:37.000Z</published>
    <updated>2016-11-11T16:21:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>在学习 iOS 开发初期的时候从一些技术大牛的文章中了解到 Vim 这个神器, 却因为学习成本过高, 屡次尝试屡次放弃. 直到某一天在 YouTube 上搜索到了一个叫做 <a href="https://www.youtube.com/watch?v=_NUO4JEtkDw" target="_blank" rel="external">Learning Vim in a Week</a> 的讲座, 短短的20分钟视频让我迅速上手了 Vim. 视频中不仅仅介绍了 Vim 的组合键的应用场景. 还提到了一个非常实用的技巧: 利用 <code>Karabiner</code> 这款映射键盘的软件配置按键重复触发的延迟, 来让 <code>hjkl</code> 这些控制光标的操作如闪电般迅速. 经过反复观看视频, 大概一周左右的磨合, 就可以做到 <code>break up with your mouse</code> 了.<br><a id="more"></a><br>之前在 Xcode7 中一直使用 XVim 这款插件, 由于 Xcode8 禁止加载外部插件, 导致很长一段时间我都在苦苦寻找解决办法. 最终尝试了 github 上各种 issuse 中提到到方法后, 找到了解决方案.  </p>
<p><a href="https://github.com/inket/update_xcode_plugins" target="_blank" rel="external">update_xcode_plugins</a> 只需要一条命令. 就可以生成一个 unsign 版本的 Xcode. 具体加载插件的流程 github 上已经有详细介绍了.</p>
<p>当然, 发布应用的时候记得使用 AppStore 下载的 Xcode 版本.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习 iOS 开发初期的时候从一些技术大牛的文章中了解到 Vim 这个神器, 却因为学习成本过高, 屡次尝试屡次放弃. 直到某一天在 YouTube 上搜索到了一个叫做 &lt;a href=&quot;https://www.youtube.com/watch?v=_NUO4JEtkDw&quot;&gt;Learning Vim in a Week&lt;/a&gt; 的讲座, 短短的20分钟视频让我迅速上手了 Vim. 视频中不仅仅介绍了 Vim 的组合键的应用场景. 还提到了一个非常实用的技巧: 利用 &lt;code&gt;Karabiner&lt;/code&gt; 这款映射键盘的软件配置按键重复触发的延迟, 来让 &lt;code&gt;hjkl&lt;/code&gt; 这些控制光标的操作如闪电般迅速. 经过反复观看视频, 大概一周左右的磨合, 就可以做到 &lt;code&gt;break up with your mouse&lt;/code&gt; 了.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>封装一个简单的 HUD 视图</title>
    <link href="http://yoursite.com/2016/08/16/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84HUD/"/>
    <id>http://yoursite.com/2016/08/16/实现一个简单的HUD/</id>
    <published>2016-08-16T07:21:37.000Z</published>
    <updated>2016-11-11T15:34:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>开发中我们通常在 App 长时间加载某些数据的时候需要展示 HUD 视图，告知用户当前 App 的状态。Apple 为我们提供了 <code>UIAlertView</code> <code>UIActivityView</code> 方便我们在必要的时候提醒用户。 但通常它们提供的 API 无法让我们做针对性的自定义，今天我们来实现一个简单的自定义 HUD。</p>
<p>首先我们先看一下在 App 中的实际运行效果。</p>
<p>结构非常简单: 一个灰色半透明的 <code>UIView</code> 和一个 <code>UIAvtivityIndicatorView</code> .<br><a id="more"></a></p>
<p>开始我们的工作，首先创建一个抽象类 <code>CubeHUD</code>, 它负责展示和隐藏 HUD 逻辑。考虑到实际开发中在很多界面下都需要展示 HUD ，所以我们直接使用单例。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CubeHUD</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">// MARK: Properties</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shardInstance = <span class="type">CubeHUD</span>()</div></pre></td></tr></table></figure>
<p>在 swift 中完成单例非常简单， 只需上面一行代码。</p>
<p>接着我们完成<code>CubeHUD</code>中的自定义试图， 我们来实现 <code>containerView</code> 和 <code>activityIndicator</code>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> containerView: <span class="type">UIView</span> = &#123;</div><div class="line">     </div><div class="line">     <span class="keyword">let</span> view = <span class="type">UIView</span>()</div><div class="line">     view.backgroundColor = <span class="type">UIColor</span>.black.withAlphaComponent(<span class="number">0.3</span>)</div><div class="line">     <span class="keyword">return</span> view</div><div class="line">     </div><div class="line"> &#125;()</div><div class="line"> </div><div class="line"> <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> activitIndicator: <span class="type">UIActivityIndicatorView</span> = &#123;</div><div class="line">     </div><div class="line">     <span class="keyword">let</span> view = <span class="type">UIActivityIndicatorView</span>(activityIndicatorStyle: <span class="type">UIActivityIndicatorViewStyle</span>.whiteLarge)</div><div class="line">     </div><div class="line">     <span class="keyword">return</span> view</div><div class="line">     </div><div class="line"> &#125;()</div></pre></td></tr></table></figure>
<p>我们还需要定义两个变量，<code>isShowing</code> 用来确保  HUD 视图同一时间只能弹出一个。<code>dismissTimer</code>，用来主动设置 HUD 视图消失的时间。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isShowing = <span class="literal">false</span></div><div class="line"><span class="keyword">var</span> dismissTimer: <span class="type">Timer</span>?</div></pre></td></tr></table></figure>
<p>之后我们来实现展示 HUD 的逻辑，<code>showActivityIndicatorWhile(blockingUI: Bool)</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">showActivityIndicatorWhile</span>(<span class="title">blockingUI</span>: <span class="title">Bool</span> = <span class="title">false</span>) </span>&#123;</div><div class="line">        <span class="comment">// 首先判断是否已经显示了 HUD</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.shardInstance.isShowing &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">            <span class="comment">// 确保可以拿到 app 的 window</span></div><div class="line">            <span class="keyword">if</span></div><div class="line">                <span class="keyword">let</span> appDelegate = <span class="type">UIApplication</span>.shared.delegate <span class="keyword">as</span>? </div><div class="line">                <span class="type">AppDelegate</span>,</div><div class="line">                <span class="keyword">let</span> window = appDelegate.window &#123;</div><div class="line">                </div><div class="line">                <span class="keyword">self</span>.shardInstance.isShowing = <span class="literal">true</span></div><div class="line">                </div><div class="line">                <span class="comment">// 设置是否需要禁止于用户交互</span></div><div class="line">                <span class="keyword">self</span>.shardInstance.containerView.isUserInteractionEnabled </div><div class="line">                = blockingUI</div><div class="line">                </div><div class="line">                <span class="comment">// 配置 containerView</span></div><div class="line">                <span class="keyword">self</span>.shardInstance.containerView.alpha = <span class="number">0</span></div><div class="line">                </div><div class="line">                <span class="comment">// 将 containerView 添加到当前 window</span></div><div class="line">                window.addSubview(<span class="keyword">self</span>.shardInstance.containerView)</div><div class="line">                <span class="keyword">self</span>.shardInstance.containerView.frame = window.bounds</div><div class="line">                </div><div class="line">                <span class="comment">// 之后我们使用一个0.1秒的动画, 展示 HUD 的 containerView</span></div><div class="line">                springWithCompletion(duration: <span class="number">0.1</span>, animations: &#123;</div><div class="line">                    </div><div class="line">                    <span class="keyword">self</span>.shardInstance.containerView.alpha = <span class="number">1</span></div><div class="line">                    </div><div class="line">                    &#125;, completions: &#123; finished <span class="keyword">in</span></div><div class="line">                        <span class="comment">// 在 containerView 出现之后, 我们为其添加 activityIndicator              </span></div><div class="line">                        <span class="keyword">self</span>.shardInstance.containerView.addSubview(</div><div class="line">                        <span class="keyword">self</span>.shardInstance.activitIndicator)</div><div class="line">                        <span class="keyword">self</span>.shardInstance.activitIndicator.center =</div><div class="line">                        <span class="keyword">self</span>.shardInstance.containerView.center</div><div class="line">                        <span class="keyword">self</span>.shardInstance.indicatorLabel.center = </div><div class="line">                        <span class="type">CGPoint</span>(</div><div class="line">                        x: <span class="keyword">self</span>.shardInstance.containerView.center.x,</div><div class="line">                        y: <span class="keyword">self</span>.shardInstance.containerView.center.y +</div><div class="line">                         <span class="number">25</span>)</div><div class="line">                        </div><div class="line">                        <span class="comment">// 配置 activityIndicator, 下先让其缩小并隐藏</span></div><div class="line">                        <span class="keyword">self</span>.shardInstance.activitIndicator.startAnimating()</div><div class="line">                        <span class="keyword">self</span>.shardInstance.activitIndicator.alpha = <span class="number">0</span></div><div class="line">                        <span class="keyword">self</span>.shardInstance.activitIndicator.transform = </div><div class="line">                        <span class="type">CGAffineTransform</span>.<span class="keyword">init</span>(scaleX: <span class="number">0.00001</span>, y: <span class="number">0.00001</span>)</div><div class="line">                        </div><div class="line">                        <span class="comment">// 之后使用一个0.2秒的动画,让其恢复初始的大小并出现.</span></div><div class="line">                        springWithCompletion(duration: <span class="number">0.2</span>, animations: &#123;</div><div class="line">                            </div><div class="line">                            <span class="keyword">self</span>.shardInstance.activitIndicator.transform = </div><div class="line">                            <span class="type">CGAffineTransform</span>.<span class="keyword">init</span>(scaleX: <span class="number">1.0</span>, y: <span class="number">1.0</span>)</div><div class="line">                            <span class="keyword">self</span>.shardInstance.activitIndicator.alpha = <span class="number">1</span></div><div class="line"></div><div class="line">                            &#125;, completions: &#123; finished <span class="keyword">in</span></div><div class="line">                                </div><div class="line">                                <span class="keyword">self</span>.shardInstance.activitIndicator.transform = </div><div class="line">                                <span class="type">CGAffineTransform</span>.identity</div><div class="line">                                </div><div class="line">                             </div><div class="line">                                <span class="keyword">if</span> <span class="keyword">let</span> dismissTimer = </div><div class="line">                                <span class="keyword">self</span>.shardInstance.dismissTimer &#123;</div><div class="line">                            </div><div class="line">                                    dismissTimer.invalidate()</div><div class="line">                                &#125;</div><div class="line">                                <span class="comment">// 完成展示 HUD 动画后, 我们设置计时器, </span></div><div class="line">                                <span class="comment">// Config.forcedHideActivityIndicatorTimeInterval </span></div><div class="line">                                <span class="comment">// 的值为 30 秒. 用来设置 HUD 展示的最长时间为 30 秒.</span></div><div class="line">                                <span class="keyword">self</span>.shardInstance.dismissTimer = </div><div class="line">                                <span class="type">Timer</span>(timeInterval: </div><div class="line">                                <span class="type">Config</span>.forcedHideActivityIndicatorTimeInterval, </div><div class="line">                                target: <span class="keyword">self</span>, selector: </div><div class="line">                                #selector(<span class="type">CubeHUD</span>.forcedHideActivityIndicator), </div><div class="line">                                userInfo: <span class="literal">nil</span>, repeats: <span class="literal">false</span>)</div><div class="line">                        &#125;)</div><div class="line">                        </div><div class="line">                &#125;)</div></pre></td></tr></table></figure>
<p>接着, 我们来实现 HUD 隐藏的逻辑 <code>hideActivityIndicator(completion: @escaping () -&gt; Void )</code> 这个方法会接受一个闭包. 用来定义 HUD 隐藏结束后需要执行的任务.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">hideActivityIndicator</span>(<span class="title">completion</span>: @<span class="title">escaping</span> () -&gt; <span class="title">Void</span> )</span>&#123;</div><div class="line">        </div><div class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> <span class="keyword">self</span>.shardInstance.isShowing &#123;</div><div class="line">                </div><div class="line">                <span class="keyword">self</span>.shardInstance.isShowing = <span class="literal">false</span></div><div class="line">                </div><div class="line">                <span class="keyword">self</span>.shardInstance.activitIndicator.transform = </div><div class="line">                <span class="type">CGAffineTransform</span>.identity</div><div class="line">                <span class="keyword">self</span>.shardInstance.indicatorLabel.transform = </div><div class="line">                <span class="type">CGAffineTransform</span>.identity</div><div class="line">                </div><div class="line">                springWithCompletion(duration: <span class="number">0.5</span>, animations: &#123;</div><div class="line">                    </div><div class="line">                    <span class="keyword">self</span>.shardInstance.activitIndicator.transform =</div><div class="line">                     <span class="type">CGAffineTransform</span>.<span class="keyword">init</span>(scaleX: <span class="number">0.00001</span>, y: <span class="number">0.00001</span>)</div><div class="line">                    <span class="keyword">self</span>.shardInstance.activitIndicator.alpha = <span class="number">0</span></div><div class="line">                </div><div class="line">                    &#125;, completions: &#123; finished <span class="keyword">in</span></div><div class="line">                        </div><div class="line">                        <span class="keyword">self</span>.shardInstance.activitIndicator.removeFromSuperview()</div><div class="line">                        </div><div class="line">                        springWithCompletion(duration: <span class="number">0.1</span>, animations: &#123;</div><div class="line">                            </div><div class="line">                            <span class="keyword">self</span>.shardInstance.containerView.alpha = <span class="number">0</span></div><div class="line">                            </div><div class="line">                            &#125;, completions: &#123; finished <span class="keyword">in</span></div><div class="line">                                         </div><div class="line">                                         <span class="keyword">self</span>.shardInstance.containerView.removeFromSuperview()</div><div class="line">                                </div><div class="line">                                completion()</div><div class="line">                                </div><div class="line">                        &#125;)</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上面的代码理解起来也非常简单, 将 <code>activityIndicator</code> 缩小隐藏之后, 将 <code>containerView</code> 从 window 上移除.</p>
<p>我们再定义两个接口, 让外部调用隐藏 HUD 方法时更加便捷.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 出现超过 30秒 被迫消失时, 需要执行的 alert 提醒.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">forcedHideActivityIndicator</span>() </span>&#123;</div><div class="line">    </div><div class="line">    hideActivityIndicator &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span></div><div class="line">            <span class="keyword">let</span> appDelegate = <span class="type">UIApplication</span>.shared.delegate <span class="keyword">as</span>? <span class="type">AppDelegate</span>,</div><div class="line">            <span class="keyword">let</span> <span class="number">_</span> = appDelegate.window?.rootViewController &#123;</div><div class="line">            </div><div class="line">            <span class="comment">// Alert 超时提醒</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 外部调用隐藏 HUD 时使用.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">hideActivityIndicator</span>() </span>&#123;</div><div class="line">    </div><div class="line">    hideActivityIndicator &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OK! Done.</p>
<p>我们在外部只需要使用 <code>CubeHUD.showActivityIndicator()</code> 和 <code>CubeHUD.hideActivityIndicator()</code> 两个方法就可以展示和隐藏 HUD 视图了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发中我们通常在 App 长时间加载某些数据的时候需要展示 HUD 视图，告知用户当前 App 的状态。Apple 为我们提供了 &lt;code&gt;UIAlertView&lt;/code&gt; &lt;code&gt;UIActivityView&lt;/code&gt; 方便我们在必要的时候提醒用户。 但通常它们提供的 API 无法让我们做针对性的自定义，今天我们来实现一个简单的自定义 HUD。&lt;/p&gt;
&lt;p&gt;首先我们先看一下在 App 中的实际运行效果。&lt;/p&gt;
&lt;p&gt;结构非常简单: 一个灰色半透明的 &lt;code&gt;UIView&lt;/code&gt; 和一个 &lt;code&gt;UIAvtivityIndicatorView&lt;/code&gt; .&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在 Swift 中优雅的缓存 cell 的行高与 subviews 的 layout</title>
    <link href="http://yoursite.com/2016/07/08/%E4%BD%BF%E7%94%A8%20Swift%20%E4%BC%98%E9%9B%85%E7%9A%84%E7%BC%93%E5%AD%98%20Cell%20%E7%9A%84%E8%A1%8C%E9%AB%98%E4%B8%8E%20subviews%20%E7%9A%84%20frame/"/>
    <id>http://yoursite.com/2016/07/08/使用 Swift 优雅的缓存 Cell 的行高与 subviews 的 frame/</id>
    <published>2016-07-08T13:22:08.000Z</published>
    <updated>2016-11-09T13:06:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>UITableView</code> 与 <code>UICollectionView</code> 无疑是 iOS 开发中使用最多的视图控制器，它往往负责展示大量的数据. 伴随着用户的手指不断的滑动，系统会反复刷新UI, 加载所要展示的内容。而一旦数据体积增大，计算的逻辑复杂，就会造成过多的性能浪费。解决这类问题的方法有很多. 最近在 <code>Yep</code> 代码中看到的方法，在应用到自己项目的时候感觉非常不错, 所以有了以下的记录总结.</p>
<p>首先看一下 Demo 要实现的效果<br><a id="more"></a><br><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-11-08-IMG_0230.jpg" alt=""></p>
<p>既然要利用代码的方式实现这样的效果，我们现在分析一下实现的具体过程。</p>
<ul>
<li>图中是一个 TableViewController</li>
<li>有三种不同的 cell 样式</li>
<li>三种不同的 cell 包含一些共同的元素，比如 nickName，avatorImage，还有 comment count，以及 category</li>
</ul>
<p>我们可以先创建一个基类 <code>FeedBaseCell</code>, 用来定义三种样式的公共元素.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeedBaseCell</span>: <span class="title">UITableViewCell</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 控制文本内容使用的 textView 最大的宽度.</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> messageTextViewMaxWidth: <span class="type">CGFloat</span> = &#123;</div><div class="line">        <span class="keyword">let</span> maxWidth = <span class="type">UIScreen</span>.main.bounds.width - (<span class="number">15</span> + <span class="number">40</span> + <span class="number">10</span> + <span class="number">15</span>)</div><div class="line">        <span class="keyword">return</span> maxWidth</div><div class="line">    &#125;()</div><div class="line">    </div><div class="line">    <span class="comment">// 用来配置 cell 时使用的 feed 实例</span></div><div class="line">    <span class="keyword">var</span> feed: <span class="type">Feed</span>?</div><div class="line">    </div><div class="line">    <span class="comment">// 控制 subViews 点击事件</span></div><div class="line">    <span class="keyword">var</span> tapAvataraction: ((<span class="type">FeedBaseCell</span>) -&gt; <span class="type">Void</span>)?</div><div class="line">    <span class="keyword">var</span> touchesBeganAction: ((<span class="type">UITableViewCell</span>) -&gt; <span class="type">Void</span>)?</div><div class="line">    <span class="keyword">var</span> touchesEndedAction: ((<span class="type">UITableViewCell</span>) -&gt; <span class="type">Void</span>)?</div><div class="line">    <span class="keyword">var</span> touchesCancelledAction: ((<span class="type">UITableViewCell</span>) -&gt; <span class="type">Void</span>)?</div><div class="line">    </div><div class="line">     <span class="built_in">lazy</span> <span class="keyword">var</span> avatarImageView: <span class="type">UIImageView</span> = &#123;</div><div class="line">        <span class="keyword">let</span> imageView = <span class="type">UIImageView</span>()</div><div class="line">        <span class="comment">// 自定义样式省略...</span></div><div class="line">        <span class="keyword">return</span> imageView</div><div class="line">    &#125;()</div><div class="line">    </div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> nickNameLabel: <span class="type">UILabel</span> = &#123;</div><div class="line">        <span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line">        <span class="comment">// 自定义样式省略...</span></div><div class="line">        <span class="keyword">return</span> label</div><div class="line">    &#125;()</div><div class="line">    </div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> categoryButton: <span class="type">UIButton</span> = &#123;</div><div class="line">        <span class="keyword">let</span> button = <span class="type">UIButton</span>()</div><div class="line">       <span class="comment">// 自定义样式省略...</span></div><div class="line">        <span class="keyword">return</span> button</div><div class="line">    &#125;()</div><div class="line">    </div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> messageTextView: <span class="type">FeedTextView</span> = &#123;</div><div class="line">        <span class="keyword">let</span> textView = <span class="type">FeedTextView</span>()</div><div class="line">        <span class="comment">// 自定义样式省略...</span></div><div class="line">        <span class="keyword">return</span> textView</div><div class="line">    &#125;()</div><div class="line">    </div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> leftBottomLabel: <span class="type">UILabel</span> = &#123;</div><div class="line">        <span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line">        <span class="comment">// 自定义样式省略...</span></div><div class="line">        <span class="keyword">return</span> label</div><div class="line">    &#125;()</div><div class="line">    </div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> messageCountLabel: <span class="type">UILabel</span> = &#123;</div><div class="line">        <span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line">        <span class="comment">// 自定义样式省略...</span></div><div class="line">        <span class="keyword">return</span> label</div><div class="line">    &#125;()</div></pre></td></tr></table></figure>
<p><code>FeedBaseCell</code> 中不仅包换其中的 subviews 实例，还需实现一个 <code>heightForFeed</code> 的方法用来计算 cell 的高度.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 通过Feed内容计算高度</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">heightOfFeed</span>(<span class="title">feed</span>: <span class="title">Feed</span>) -&gt; <span class="title">CGFloat</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> rect = (feed.contentBody! <span class="keyword">as</span> <span class="type">NSString</span>).boundingRect(with:</div><div class="line">         <span class="type">CGSize</span>(width: <span class="type">FeedBaseCell</span>.messageTextViewMaxWidth, height: </div><div class="line">         <span class="type">CGFloat</span>(<span class="type">FLT_MAX</span>)), options: </div><div class="line">         [.usesLineFragmentOrigin, .usesFontLeading], attributes: </div><div class="line">         [<span class="type">NSFontAttributeName</span>: <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">17</span>)], context: <span class="literal">nil</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> height: <span class="type">CGFloat</span> = <span class="number">10</span> + <span class="number">40</span> + ceil(rect.height) + <span class="number">4</span> + <span class="number">15</span> + <span class="number">17</span> + <span class="number">15</span></div><div class="line">    <span class="keyword">return</span> ceil(height)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着我们在 <code>FeedBaseCell</code> 的初始化方法中将 subviews 实例添加到 contentView.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="keyword">init</span>(style: <span class="type">UITableViewCellStyle</span>, reuseIdentifier: <span class="type">String</span>?) &#123;</div><div class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(style: style, reuseIdentifier: reuseIdentifier)</div><div class="line">    contentView.addSubview(avatarImageView)</div><div class="line">    contentView.addSubview(nickNameLabel)</div><div class="line">    contentView.addSubview(categoryButton)</div><div class="line">    contentView.addSubview(messageTextView)</div><div class="line">    contentView.addSubview(leftBottomLabel)</div><div class="line">    contentView.addSubview(messageCountLabel)</div><div class="line">    contentView.addSubview(discussionImageView)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而 <code>FeedAnyImagesCell</code> 和 <code>FeedBigImageCell</code> 都继承自 <code>FeedBaseCell</code>. 我们重写其父类的 heightOfFeed 方法.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeedAnyImagesCell</span>: <span class="title">FeedBaseCell</span>  </span>&#123;</div><div class="line">    <span class="comment">// 显示 images 的视图创建省略.</span></div><div class="line">    <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">heightOfFeed</span>(<span class="title">feed</span>: <span class="title">Feed</span>) -&gt; <span class="title">CGFloat</span> </span>&#123;</div><div class="line">        <span class="keyword">let</span> height = <span class="keyword">super</span>.heightOfFeed(feed: feed) + </div><div class="line">        <span class="type">Config</span>.<span class="type">FeedAnyImagesCell</span>.imageSize.height + <span class="number">15</span></div><div class="line">         <span class="keyword">return</span> ceil(height)</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeedBiggerImageCell</span>: <span class="title">FeedBaseCell</span> </span>&#123;</div><div class="line">    <span class="comment">// 显示 image 的视图创建省略.</span></div><div class="line">    <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">heightOfFeed</span>(<span class="title">feed</span>: <span class="title">Feed</span>) -&gt; <span class="title">CGFloat</span> </span>&#123;</div><div class="line">        <span class="keyword">let</span> height = <span class="keyword">super</span>.heightOfFeed(feed: feed) + </div><div class="line">         <span class="type">Config</span>.<span class="type">FeedBiggerImageCell</span>.imageSize.height + <span class="number">15</span></div><div class="line">        <span class="keyword">return</span> ceil(height)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>三种样式的 cell 创建完成后, 我们需要定义一个 <code>FeedCellLayout</code> 的结构体, 用来封装不同 cell 类型所对应的 layout 布局.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FeedCellLayout</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> screenWidth = <span class="type">UIScreen</span>.main.bounds.width</div><div class="line">    <span class="comment">// 三种类型 cell 的公共元素.</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DefaultLayout</span> </span>&#123;</div><div class="line">        <span class="keyword">let</span> avatarImageViewFrame: <span class="type">CGRect</span></div><div class="line">        <span class="keyword">let</span> nicknameLabelFrame: <span class="type">CGRect</span></div><div class="line">        <span class="keyword">let</span> categoryButtonFrame: <span class="type">CGRect</span></div><div class="line">        <span class="keyword">let</span> messageTextViewFrame: <span class="type">CGRect</span></div><div class="line">        <span class="keyword">let</span> leftBottomLabelFrame: <span class="type">CGRect</span></div><div class="line">        <span class="keyword">let</span> messageCountLabelFrame: <span class="type">CGRect</span></div><div class="line">        <span class="keyword">let</span> discussionImageViewFrame: <span class="type">CGRect</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> defaultLayout: <span class="type">DefaultLayout</span></div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiggerImageLayout</span> </span>&#123;</div><div class="line">        <span class="keyword">let</span> biggerImageViewFrame: <span class="type">CGRect</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> biggerImageLayout: <span class="type">BiggerImageLayout</span>?</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">AnyImagesLayout</span> </span>&#123;</div><div class="line">        <span class="keyword">let</span> mediaCollectionViewFrame: <span class="type">CGRect</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> anyImagesLayout: <span class="type">AnyImagesLayout</span>?</div><div class="line">    </div><div class="line">    <span class="comment">// cell的高度</span></div><div class="line">    <span class="keyword">var</span> height: <span class="type">CGFloat</span> = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="comment">// init</span></div><div class="line">    <span class="keyword">init</span>(feed: <span class="type">Feed</span>) &#123;</div><div class="line">         <span class="comment">/* init 方法中接受一个 feed 实例,</span></div><div class="line">           我们通过此实例中的附件类型来调用响应的计算cell高度.</div><div class="line">         */</div><div class="line">        <span class="keyword">switch</span> feed.attachment &#123;</div><div class="line">        <span class="keyword">case</span> .<span class="type">Text</span>:</div><div class="line">            height = <span class="type">FeedBaseCell</span>.heightOfFeed(feed: feed)</div><div class="line">        <span class="keyword">case</span> .<span class="type">Image</span>(<span class="keyword">let</span> imagesAttachments):</div><div class="line">            printLog(imagesAttachments)</div><div class="line">            <span class="keyword">if</span> imagesAttachments.<span class="built_in">count</span> &gt; <span class="number">1</span> &#123;</div><div class="line">                height = <span class="type">FeedAnyImagesCell</span>.heightOfFeed(feed: feed)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                height = <span class="type">FeedBiggerImageCell</span>.heightOfFeed(feed: feed)</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 接下来就是根据 Feed 实例所携带的各种信息, 来计算 defaultLayout, </span></div><div class="line">        <span class="comment">// biggerImageLayout, anyImagesLayout </span></div><div class="line">        <span class="keyword">let</span> avatarImageViewFrame = <span class="type">CGRect</span>(x: <span class="number">15</span>, y: <span class="number">10</span>, width: <span class="number">40</span>, height: <span class="number">40</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> nicknameLabelFrame: <span class="type">CGRect</span></div><div class="line">        <span class="keyword">let</span> categoryButtonFrame: <span class="type">CGRect</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> category = <span class="type">FeedCategory</span>(rawValue: feed.category) &#123;</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> rect = (category.rawValue <span class="keyword">as</span> <span class="type">NSString</span>).boundingRect(with: </div><div class="line">            <span class="type">CGSize</span>(width: <span class="number">320</span>, height: <span class="type">CGFloat</span>(<span class="type">FLT_MAX</span>)), options: </div><div class="line">            [.usesLineFragmentOrigin, .usesFontLeading], attributes: </div><div class="line">            <span class="type">Config</span>.<span class="type">FeedDetailCell</span>.categryButtonAttributies, context: <span class="literal">nil</span>)</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> categoryButtonWidth = ceil(rect.width) + <span class="number">20</span></div><div class="line">            </div><div class="line">            categoryButtonFrame = <span class="type">CGRect</span>(x: screenWidth - categoryButtonWidth - </div><div class="line">            <span class="number">15</span>, y: <span class="number">19</span>, width: categoryButtonWidth, height: <span class="number">22</span>)</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> nickNameLabelwidth = screenWidth - <span class="number">65</span> - <span class="number">15</span></div><div class="line">            nicknameLabelFrame = <span class="type">CGRect</span>(x: <span class="number">65</span>, y: <span class="number">21</span>, width: nickNameLabelwidth,</div><div class="line">             height: <span class="number">18</span>)</div><div class="line">            </div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">let</span> nickNameLabelwidth = screenWidth - <span class="number">65</span> - <span class="number">15</span></div><div class="line">            nicknameLabelFrame = <span class="type">CGRect</span>(x: <span class="number">65</span>, y: <span class="number">21</span>, width: nickNameLabelwidth, </div><div class="line">            height: <span class="number">18</span>)</div><div class="line">            categoryButtonFrame = <span class="type">CGRect</span>.zero</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> rect1 = (feed.contentBody! <span class="keyword">as</span> <span class="type">NSString</span>).boundingRect(with: </div><div class="line">        <span class="type">CGSize</span>(width: <span class="type">FeedBaseCell</span>.messageTextViewMaxWidth, height: </div><div class="line">        <span class="type">CGFloat</span>(<span class="type">FLT_MAX</span>)), options: [.usesFontLeading, .usesLineFragmentOrigin], </div><div class="line">        attributes: <span class="type">Config</span>.<span class="type">FeedDetailCell</span>.messageTextViewAttributies, context: </div><div class="line">        <span class="literal">nil</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> messageTextViewHeight = ceil(rect1.height)</div><div class="line">        <span class="keyword">let</span> messageTextViewFrame = <span class="type">CGRect</span>(x: <span class="number">65</span>, y: <span class="number">54</span>, width: screenWidth - <span class="number">65</span> - </div><div class="line">        <span class="number">15</span>, height: messageTextViewHeight)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> leftBottomLabelOriginY = height - <span class="number">17</span> - <span class="number">15</span></div><div class="line">        <span class="keyword">let</span> leftBottomLabelFrame = <span class="type">CGRect</span>(x: <span class="number">65</span>, y: leftBottomLabelOriginY, width: </div><div class="line">        screenWidth - <span class="number">65</span> - <span class="number">85</span>, height: <span class="number">17</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> messageCountLabelWidth: <span class="type">CGFloat</span> = <span class="number">30</span></div><div class="line">        <span class="keyword">let</span> messageConuntLabelFrame = <span class="type">CGRect</span>(x: screenWidth - </div><div class="line">        messageCountLabelWidth - <span class="number">39</span> - <span class="number">8</span>, y: leftBottomLabelOriginY, width: </div><div class="line">        messageCountLabelWidth, height: <span class="number">19</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> discussionImageViewFrame = <span class="type">CGRect</span>(x: screenWidth - <span class="number">24</span> - <span class="number">15</span>, y: </div><div class="line">        leftBottomLabelOriginY - <span class="number">1</span>, width: <span class="number">24</span>, height: <span class="number">20</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> defaultLayout = <span class="type">FeedCellLayout</span>.<span class="type">DefaultLayout</span>(</div><div class="line">            avatarImageViewFrame: avatarImageViewFrame,</div><div class="line">            nicknameLabelFrame: nicknameLabelFrame,</div><div class="line">            categoryButtonFrame: categoryButtonFrame,</div><div class="line">            messageTextViewFrame: messageTextViewFrame,</div><div class="line">            leftBottomLabelFrame: leftBottomLabelFrame,</div><div class="line">            messageCountLabelFrame: messageConuntLabelFrame,</div><div class="line">            discussionImageViewFrame: discussionImageViewFrame</div><div class="line">        )</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.defaultLayout = defaultLayout</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> beginY = messageTextViewFrame.maxY + <span class="number">15</span></div><div class="line">        </div><div class="line">        <span class="keyword">switch</span> feed.attachment &#123;</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> .<span class="type">Image</span>(<span class="keyword">let</span> imagesAttachments):</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> imagesAttachments.<span class="built_in">count</span> &gt; <span class="number">1</span> &#123;</div><div class="line">                </div><div class="line">                <span class="keyword">let</span> mediaCollectionViewFrame = <span class="type">CGRect</span>(origin: <span class="type">CGPoint</span>(x:<span class="number">65</span>, y:</div><div class="line">                 beginY), size: <span class="type">Config</span>.<span class="type">FeedAnyImagesCell</span>.mediaCollectionViewSize)</div><div class="line">                </div><div class="line">                <span class="keyword">self</span>.anyImagesLayout = <span class="type">AnyImagesLayout</span>(mediaCollectionViewFrame: </div><div class="line">                mediaCollectionViewFrame)</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> imagesAttachments.<span class="built_in">count</span> == <span class="number">1</span> &#123;</div><div class="line">                </div><div class="line">                <span class="keyword">let</span> biggerImageViewFrame = <span class="type">CGRect</span>(origin: <span class="type">CGPoint</span>(x: <span class="number">65</span>, y: </div><div class="line">                beginY), size: <span class="type">Config</span>.<span class="type">FeedBiggerImageCell</span>.imageSize)</div><div class="line">                <span class="keyword">let</span> biggerImageLayout = <span class="type">BiggerImageLayout</span>(biggerImageViewFrame: </div><div class="line">                biggerImageViewFrame)</div><div class="line">                <span class="keyword">self</span>.biggerImageLayout = biggerImageLayout</div><div class="line">            </div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>接下来我们来设计缓存逻辑, 我们定义个结构体, 外部只需要传入 Feed 实例, 就能正确得到其对应的 Layout 布局.  </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LayoutCatch</span> </span>&#123;</div><div class="line">    <span class="comment">// 定义一个字典, 存储 feed 对应的 FeedCellLayout,   用 feed 的 bjectID 做 key</span></div><div class="line">    <span class="keyword">var</span> feedCellLayoutHash = [<span class="type">String</span>: <span class="type">FeedCellLayout</span>]()</div><div class="line">    </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">feedCellLayoutOfFeed</span><span class="params">(feed: Feed)</span></span> -&gt; <span class="type">FeedCellLayout</span> &#123;</div><div class="line">        <span class="keyword">let</span> key = feed.objectId ?? <span class="string">""</span></div><div class="line">    </div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> layout = feedCellLayoutHash[key] &#123;</div><div class="line">            <span class="keyword">return</span> layout</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">let</span> layout = <span class="type">FeedCellLayout</span>(feed: feed)</div><div class="line">            updateFeedCellLayout(layout: layout, forFeed: feed)</div><div class="line">            <span class="keyword">return</span> layout</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">updateFeedCellLayout</span><span class="params">(layout: FeedCellLayout, forFeed feed: Feed)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> key = feed.objectId ?? <span class="string">""</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> !key.isEmpty &#123;</div><div class="line">            <span class="type">FeedCellLayoutHash</span>[key] = layout</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">heightOfFeed</span><span class="params">(feed: Feed)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</div><div class="line">        <span class="keyword">let</span> layout = <span class="type">FeedCellLayoutOfFeed</span>(feed: feed)</div><div class="line">        <span class="keyword">return</span> layout.height</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>缓存逻辑完成之后, 我们为三种不同的 cell 样式分别添加 <code>configureWithFeed(feed: Feed, layout: FeedCellLayout, needshowCategory: Bool)</code> 的方法, 将计算好的 layout 应用到 cell.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//FeedBaseCell</span></div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">configureWithFeed</span><span class="params">(feed: Feed, layout: FeedCellLayout, needshowCategory: </span></span></div><div class="line"> Bool) &#123;</div><div class="line">        <span class="keyword">self</span>.feed = feed</div><div class="line">        <span class="keyword">let</span> defaultLayout = layout.defaultLayout</div><div class="line">        </div><div class="line">        messageTextView.text = <span class="string">"\(feed.contentBody!)"</span>           </div><div class="line">        messageTextView.frame = defaultLayout.messageTextViewFrame</div><div class="line">        </div><div class="line">        nickNameLabel.text = feed.creator?.username ?? <span class="string">"iTychooo"</span></div><div class="line">        nickNameLabel.frame = defaultLayout.nicknameLabelFrame</div><div class="line">        </div><div class="line">        avatarImageView.image = <span class="type">UIImage</span>(named: <span class="string">"Howard"</span>)</div><div class="line">        avatarImageView.frame = defaultLayout.avatarImageViewFrame</div><div class="line">        </div><div class="line">        categoryButton.setTitle(feed.category, <span class="keyword">for</span>: .normal)</div><div class="line">        categoryButton.frame = defaultLayout.categoryButtonFrame</div><div class="line">        </div><div class="line">        </div><div class="line">        leftBottomLabel.text = <span class="string">"1小时前"</span></div><div class="line">        leftBottomLabel.frame = defaultLayout.leftBottomLabelFrame</div><div class="line">        discussionImageView.frame = defaultLayout.discussionImageViewFrame</div><div class="line">        </div><div class="line">        messageCountLabel.text = <span class="string">"10"</span></div><div class="line">        messageCountLabel.frame = defaultLayout.messageCountLabelFrame</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="comment">//biggerImageCell</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">configureWithFeed</span><span class="params">(feed: Feed, layout: FeedCellLayout, </span></span></div><div class="line">needshowCategory: Bool) &#123;</div><div class="line">        <span class="keyword">super</span>.configureWithFeed(feed: feed, layout: layout, needshowCategory: </div><div class="line">        needshowCategory)</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> biggerImageLayout = layout.biggerImageLayout &#123;</div><div class="line">            biggerImageView.frame = biggerImageLayout.biggerImageViewFrame</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">switch</span> feed.attachment &#123;</div><div class="line">        <span class="keyword">case</span> .<span class="type">Image</span>(<span class="keyword">let</span> imageAttachments):</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> attachment = imageAttachments.first &#123;</div><div class="line">                <span class="comment">//大图还是使用原始大小的图片.</span></div><div class="line">                imageAttachment = attachment</div><div class="line">                biggerImageView.showActivityIndicatorWhenLoading = <span class="literal">true</span></div><div class="line">                biggerImageView.cube_setImageAtFeedCellWithAttachment(attachment: </div><div class="line">                attachment, withSize: <span class="literal">nil</span>)</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line"><span class="comment">// FeedAnyImagesCell</span></div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">configureWithFeed</span><span class="params">(feed: Feed, layout: FeedCellLayout, </span></span></div><div class="line">    needshowCategory: Bool) &#123;</div><div class="line">        <span class="keyword">super</span>.configureWithFeed(feed: feed, layout: layout, needshowCategory: </div><div class="line">        needshowCategory)</div><div class="line">        </div><div class="line">        <span class="keyword">switch</span> feed.attachment &#123;</div><div class="line">        <span class="keyword">case</span> .<span class="type">Image</span>(<span class="keyword">let</span> imageAttachments):</div><div class="line">            <span class="keyword">self</span>.imageAttachments = imageAttachments</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> anyImagesLayout = layout.anyImagesLayout &#123;</div><div class="line">            mediaCollectionView.frame = anyImagesLayout.mediaCollectionViewFrame</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>最后, 我们在 TableViewController 的 <code>tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell</code> 方法中, 配置 cell 就可以了.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Section</span>: <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> uploadingFeed = <span class="number">0</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Feed</span></div><div class="line">    <span class="keyword">case</span> loadMore</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -</div><div class="line"> &gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> section = <span class="type">Section</span>(rawValue: indexPath.section) <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">fatalError</span>()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">cellForFeed</span><span class="params">(feed: Feed)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">switch</span> feed.attachment &#123;</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> .<span class="type">Text</span>:</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: </div><div class="line">            <span class="type">FeedBaseCellIdentifier</span>, <span class="keyword">for</span>: indexPath) <span class="keyword">as</span>! <span class="type">FeedBaseCell</span></div><div class="line">            cell.configureWithFeed(feed: feed, layout: </div><div class="line">            <span class="type">FeedsViewController</span>.layoutCatch.<span class="type">FeedCellLayoutOfFeed</span>(feed: feed), </div><div class="line">            needshowCategory: <span class="literal">false</span>)</div><div class="line">            <span class="keyword">return</span> cell</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> .<span class="type">Image</span>(<span class="keyword">let</span> imagesAttachments):</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> imagesAttachments.<span class="built_in">count</span>  &gt; <span class="number">1</span> &#123;</div><div class="line">                </div><div class="line">                <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: </div><div class="line">                <span class="type">FeedAnyImagesCellIdentifier</span>, <span class="keyword">for</span>: indexPath) <span class="keyword">as</span>! </div><div class="line">                <span class="type">FeedAnyImagesCell</span></div><div class="line">                </div><div class="line">                cell.configureWithFeed(feed: feed, layout: </div><div class="line">                <span class="type">FeedsViewController</span>.layoutCatch.<span class="type">FeedCellLayoutOfFeed</span>(feed: </div><div class="line">                feed), needshowCategory: <span class="literal">false</span>)</div><div class="line">                </div><div class="line">                <span class="keyword">return</span> cell</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: </div><div class="line">            <span class="type">FeedBiggerImageCellIdentifier</span>, <span class="keyword">for</span>: indexPath) <span class="keyword">as</span>! </div><div class="line">            <span class="type">FeedBiggerImageCell</span></div><div class="line">            </div><div class="line">            cell.configureWithFeed(feed: feed, layout: </div><div class="line">            <span class="type">FeedsViewController</span>.layoutCatch.<span class="type">FeedCellLayoutOfFeed</span>(feed: feed),</div><div class="line">             needshowCategory: <span class="literal">false</span>)</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> cell</div><div class="line">            </div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> <span class="type">UITableViewCell</span>()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">switch</span> section &#123;</div><div class="line">        </div><div class="line">    <span class="keyword">case</span> .uploadingFeed:</div><div class="line">        <span class="keyword">let</span> feed = uploadingFeeds[indexPath.row]</div><div class="line">        <span class="keyword">return</span> cellForFeed(feed: feed)</div><div class="line">        </div><div class="line">    <span class="keyword">case</span> .<span class="type">Feed</span>:</div><div class="line">        <span class="keyword">let</span> feed = feeds[indexPath.row]</div><div class="line">        <span class="keyword">return</span> cellForFeed(feed: feed)</div><div class="line">        </div><div class="line">    <span class="keyword">case</span> .loadMore:</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> tableView.dequeueReusableCell(withIdentifier: </div><div class="line">        <span class="type">LoadMoreTableViewCellIdentifier</span>, <span class="keyword">for</span>: indexPath)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OK, Done! </p>
<p>感谢 Yep 的团队开源如此优秀的代码, 我从中学到了很多. 在浏览了大量 commit 后, 也了解了一个项目从无到有的大概过程, 对于我这种半路出家的自学者, 受益颇多.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;UITableView&lt;/code&gt; 与 &lt;code&gt;UICollectionView&lt;/code&gt; 无疑是 iOS 开发中使用最多的视图控制器，它往往负责展示大量的数据. 伴随着用户的手指不断的滑动，系统会反复刷新UI, 加载所要展示的内容。而一旦数据体积增大，计算的逻辑复杂，就会造成过多的性能浪费。解决这类问题的方法有很多. 最近在 &lt;code&gt;Yep&lt;/code&gt; 代码中看到的方法，在应用到自己项目的时候感觉非常不错, 所以有了以下的记录总结.&lt;/p&gt;
&lt;p&gt;首先看一下 Demo 要实现的效果&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用 Segue 跳转时避免直接使用字符串</title>
    <link href="http://yoursite.com/2016/07/08/%E5%A6%82%E4%BD%95%E5%9C%A8%E8%BF%9B%E8%A1%8C-Segue-%E8%B7%B3%E8%BD%AC%E6%97%B6%E9%81%BF%E5%85%8D%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2016/07/08/如何在进行-Segue-跳转时避免直接使用字符串/</id>
    <published>2016-07-08T13:22:08.000Z</published>
    <updated>2016-11-08T14:38:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Xcode 的代码提示是没有办法验证字符串 (如: “Tychooo”) 的输入正确的, 我们在使用 storyboard 创建 UI 时, 经常会使用到 segue 的 identifier 来进行 viewController 跳转. 对其进行封装, 可以很好的减少自己手残输入错误时 debug 的时间成本. 我们一起来看一下 WWDC 中的 Demo.</p>
<p>我们首先定义一个协议 <code>SegueHandlerType</code>, 之后凡是需要用的 segue 跳转的 viewController 都需要循序此协议. </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SegueHandlerType</span> </span>&#123;</div><div class="line">    associatedtype <span class="type">SegueIdentifier</span>: <span class="type">RawRepresentable</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>在协议中指定一个关联类型 <code>RawRepresentable</code>, 已此来让我们可以对 segue 的 identifier 进行枚举.</p>
<p>接下来实现该协议的具体内容, 在此我们希望凡是循序此协议的类, 必须是 UIViewController 的子类, 同时限定 SegueIdentifier 关联类型的 rawValue 必须是 String 类型.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SegueHandlerType</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">UIViewController</span>, </span></div><div class="line"><span class="title">SegueIdentifier</span>.<span class="title">RawValue</span> == <span class="title">String</span> &#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>做好这些限定, 我们来封装 <code>performSegue</code> 方法. 在协议中实现如下方法. </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">performSegue</span><span class="params">(identifier: SegueIdentifier, sender: AnyObject?)</span></span> &#123;</div><div class="line">        performSegue(withIdentifier: identifier.rawValue, sender: sender)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>OK, Done!<br>我们在 UIViewController 中使用时需要定义一个关联类型是 String 的枚举. 来看一下示例.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseCollectionViewController</span>: <span class="title">UICollectionViewController</span>, </span></div><div class="line"><span class="title">SegueHandlerType</span> &#123;</div><div class="line"></div><div class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">SegueIdentifier</span>: <span class="title">String</span> </span>&#123;</div><div class="line">        <span class="keyword">case</span> showFormulaDetail = <span class="string">"ShowFormulaDetail"</span></div><div class="line">        <span class="keyword">case</span> showAddFormula = <span class="string">"ShowAddFormula"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而在进行 segue 跳转时, 我们就可以直接使用协议中的 <code>performSegue</code> 方法了.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.performSegue(identifier: <span class="type">SegueIdentifier</span>.showFormulaDetail, sender: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<p>虽然表面上看起来似乎我们将问题复杂化了, 但在结构相对复杂的控制器中, 频繁手动输入字符串出错时, Xcode 又不能未我们提供错误提醒. 无疑增加了我们 debug 的时间成本.</p>
<p>接下来我们来实现另外一个与 segue 跳转相关的常用方法的封装 <code>func prepare(for segue: UIStoryboardSegue, sender: Any?)</code>, 我们在之前定义的协议中实现下面的方法.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">segueIdentifier</span><span class="params">(<span class="keyword">for</span> segue: UIStoryboardSegue)</span></span> -&gt; <span class="type">SegueIdentifier</span> &#123;</div><div class="line">       <span class="keyword">guard</span></div><div class="line">            <span class="keyword">let</span> identifier = segue.identifier,</div><div class="line">            <span class="keyword">let</span> segueIdentifier = <span class="type">SegueIdentifier</span>(rawValue: identifier) <span class="keyword">else</span> &#123;</div><div class="line">                  <span class="built_in">fatalError</span>(<span class="string">"无效的 Segue Identifier"</span>)</div><div class="line">        &#125;</div><div class="line">       <span class="keyword">return</span> segueIdentifier</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>上面的方法接受一个 segue 实例, 判断其 identifier 是否与我们在 viewController 中定义的 case 相对应. 如果没有, 将在控制台输出 “无效的 Segue Identifier” .</p>
<p>我们来看一下在 viewController 中实际的应用.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepare</span><span class="params">(<span class="keyword">for</span> segue: UIStoryboardSegue, sender: Any?)</span></span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> segueIdentifier(<span class="keyword">for</span>: segue) &#123;</div><div class="line">    </div><div class="line">        <span class="keyword">case</span> .showFormulaDetail:</div><div class="line">            <span class="keyword">let</span> vc = segue.destination <span class="keyword">as</span>! <span class="type">FormulaDetailViewController</span></div><div class="line">           </div><div class="line">        <span class="keyword">case</span> .showAddFormula:</div><div class="line">            <span class="keyword">let</span> vc = segue.destination <span class="keyword">as</span>! <span class="type">NewFormulaViewController</span></div><div class="line">         </div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这样我们就可以很方便的枚举不同的 segue 了, 并且当我们输入错误的时候, Xcode 也能准确的报告问题所在. </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Xcode 的代码提示是没有办法验证字符串 (如: “Tychooo”) 的输入正确的, 我们在使用 storyboard 创建 UI 时, 经常会使用到 segue 的 identifier 来进行 viewController 跳转. 对其进行封装, 可以很好的减少自己手残输入错误时 debug 的时间成本. 我们一起来看一下 WWDC 中的 Demo.&lt;/p&gt;
&lt;p&gt;我们首先定义一个协议 &lt;code&gt;SegueHandlerType&lt;/code&gt;, 之后凡是需要用的 segue 跳转的 viewController 都需要循序此协议. &lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SegueHandlerType&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    associatedtype &lt;span class=&quot;type&quot;&gt;SegueIdentifier&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;RawRepresentable&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo Support</title>
    <link href="http://yoursite.com/2016/05/30/Hexo/"/>
    <id>http://yoursite.com/2016/05/30/Hexo/</id>
    <published>2016-05-30T14:40:51.000Z</published>
    <updated>2016-11-09T13:09:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Hexo-的文档结构"><a href="#Hexo-的文档结构" class="headerlink" title="Hexo 的文档结构"></a>Hexo 的文档结构</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">├── .deploy       #需要部署的文件</div><div class="line">├── node_modules  #<span class="type">Hexo</span>插件</div><div class="line">├── <span class="keyword">public</span>        #生成的静态网页文件</div><div class="line">├── scaffolds     #模板</div><div class="line">├── source        #博客正文和其他源文件, <span class="number">404</span> favicon <span class="type">CNAME</span> 等都应该放在这里</div><div class="line">|   ├── _drafts   #草稿</div><div class="line">|   └── _posts    #文章</div><div class="line">├── themes        #主题</div><div class="line">├── _config.yml   #全局配置文件</div><div class="line">└── package.json</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"># <span class="type">Site</span> #站点信息</div><div class="line">title: blog <span class="type">Name</span> #标题</div><div class="line">subtitle: <span class="type">Subtitle</span> #副标题</div><div class="line">description: my blog desc #描述</div><div class="line">author: me #作者</div><div class="line">language: zh-<span class="type">CN</span> #语言</div><div class="line">timezone: <span class="type">Asia</span>/<span class="type">Shanghai</span> #时区</div><div class="line"></div><div class="line"># <span class="type">URL</span></div><div class="line">url: http:<span class="comment">//yoururl.com   #用于绑定域名, 其他的不需要配置</span></div><div class="line">root: /</div><div class="line">#permalink: :year/:month/:day/:title/</div><div class="line">permalink: posts/title.html</div><div class="line">permalink_defaults:</div><div class="line"></div><div class="line"># <span class="type">Directory</span> #目录</div><div class="line">source_dir: source #源文件</div><div class="line">public_dir: <span class="keyword">public</span> #生成的网页文件</div><div class="line">tag_dir: tags #标签</div><div class="line">archive_dir: archives #归档</div><div class="line">category_dir: categories #分类</div><div class="line">code_dir: downloads/code</div><div class="line">i18n_dir: :lang #国际化</div><div class="line">skip_render:</div><div class="line"></div><div class="line"># <span class="type">Writing</span> #写作</div><div class="line">new_post_name: :title.md #新文章标题</div><div class="line">default_layout: post #默认模板(post page photo draft)</div><div class="line">titlecase: <span class="literal">false</span> #标题转换成大写</div><div class="line">external_link: <span class="literal">true</span> #新标签页里打开连接</div><div class="line">filename_case: <span class="number">0</span></div><div class="line">render_drafts: <span class="literal">false</span></div><div class="line">post_asset_folder: <span class="literal">false</span></div><div class="line">relative_link: <span class="literal">false</span></div><div class="line">future: <span class="literal">true</span></div><div class="line">highlight: #语法高亮</div><div class="line">  enable: <span class="literal">true</span></div><div class="line">  line_number: <span class="literal">true</span> #显示行号</div><div class="line">  auto_detect: <span class="literal">true</span></div><div class="line">  tab_replace:</div><div class="line"></div><div class="line"># <span class="type">Category</span> &amp; <span class="type">Tag</span> #分类和标签</div><div class="line">default_category: uncategorized #默认分类</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"></div><div class="line"># <span class="type">Date</span> / <span class="type">Time</span> format #日期时间格式</div><div class="line">## http:<span class="comment">//momentjs.com/docs/#/displaying/format/</span></div><div class="line">date_format: <span class="type">YYYY</span>-<span class="type">MM</span>-<span class="type">DD</span></div><div class="line">time_format: <span class="type">HH</span>:mm:ss</div><div class="line"></div><div class="line"># <span class="type">Pagination</span> #分页</div><div class="line">per_page: <span class="number">10</span> #每页文章数, 设置成 <span class="number">0</span> 禁用分页</div><div class="line">pagination_dir: page</div><div class="line"></div><div class="line"># <span class="type">Extensions</span> #插件和主题</div><div class="line">## 插件: http:<span class="comment">//hexo.io/plugins/</span></div><div class="line">## 主题: http:<span class="comment">//hexo.io/themes/</span></div><div class="line">theme: next</div><div class="line"></div><div class="line"># <span class="type">Deployment</span> #部署, 同时发布在 <span class="type">GitHub</span> 和 <span class="type">GitCafe</span> 上面</div><div class="line">deploy:</div><div class="line">- type: git</div><div class="line">  repo: git@gitcafe.com:username/username.git,gitcafe-pages</div><div class="line">- type: git</div><div class="line">  repo: git@github.com:username/username.github.io.git,master</div><div class="line"></div><div class="line"># <span class="type">Disqus</span> #<span class="type">Disqus</span>评论系统</div><div class="line">disqus_shortname: </div><div class="line"></div><div class="line">plugins: #插件，例如生成 <span class="type">RSS</span> 和站点地图的</div><div class="line">- hexo-generator-feed</div><div class="line">- hexo-generator-sitemap</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Hexo-的文档结构&quot;&gt;&lt;a href=&quot;#Hexo-的文档结构&quot; class=&quot;headerlink&quot; title=&quot;Hexo 的文档结构&quot;&gt;&lt;/a&gt;Hexo 的文档结构&lt;/h4&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;├── .deploy       #需要部署的文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── node_modules  #&lt;span class=&quot;type&quot;&gt;Hexo&lt;/span&gt;插件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;        #生成的静态网页文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── scaffolds     #模板&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── source        #博客正文和其他源文件, &lt;span class=&quot;number&quot;&gt;404&lt;/span&gt; favicon &lt;span class=&quot;type&quot;&gt;CNAME&lt;/span&gt; 等都应该放在这里&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   ├── _drafts   #草稿&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   └── _posts    #文章&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── themes        #主题&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── _config.yml   #全局配置文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── package.json&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>为 UIImageView 添加 UIActivityIndicatorView</title>
    <link href="http://yoursite.com/2016/05/20/runtime/"/>
    <id>http://yoursite.com/2016/05/20/runtime/</id>
    <published>2016-05-20T07:21:37.000Z</published>
    <updated>2017-03-03T06:47:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>在实现类似与微博或者微信的 <code>timeline</code> 功能时, 往往需要在 <code>UITableViewCell</code> 中利用 <code>UIImageView</code> 展示单张或多张图片, 这些图片的来源通常都是网络. 而一旦网络速度不稳定, cell 中的 imageView 异步加载图片的过程就会一直显示 backgroundColor. 用户对图片正在下载的情况全然不知. 而像 <code>SDWebImage</code> 和 <code>Kingfisher</code> 这样的第三方框架很好的解决了这种问题: 一方面可以显示一张 placeholderImage, 也可以显示一个 <code>UIActivityIndicatorView</code> 让用户感受到下载的进程. </p>
<p>而实现 activityIndicatorView 的方法又有很多种, 我第一个想到的就是自定义一个 <code>UIView</code>, 在里面添加一个 <code>UIImageView</code> 和 一个 <code>UIActivityIndicatorView</code>. 之后使用这个自定义的 view 就可以很好的完成任务. 而最近我在使用 <code>Kingfisher</code> 时, 发现它利用 分类 的功能结合 runtime 的特性, 直接为 <code>UIImageView</code> 添加一个 indicatorView 的实例变量. </p>
<p>通过 分类 -&gt; extension 不能添加新的实例变量,  但我们可以利用 runtime 的 Associated Objects 来弥补这一不足.<br><a id="more"></a></p>
<p>首先, 为 <code>UIImageView</code> 定义 extension, 为其添加 activityIndicator 的 set 和 get 方法. </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> activityIndicatorKey: <span class="type">Void</span>?</div><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> showActivityIndicatorWhenLoadingKey: <span class="type">Void</span>?</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIImageView</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> activityIndicator: <span class="type">UIActivityIndicatorView</span>? &#123;</div><div class="line">        <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, &amp;activityIndicatorKey) <span class="keyword">as</span>? </div><div class="line">        <span class="type">UIActivityIndicatorView</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setActivityIndicator</span><span class="params">(activityIndicator: UIActivityIndicatorView?)</span></span> &#123;</div><div class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, &amp;activityIndicatorKey, activityIndicator,</div><div class="line">        objc_AssociationPolicy.<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里我们简单说一下  <code>Associated Objects</code> -&gt; <code>关联对象</code> 是什么? 它本来是 <code>Objective - C 2.0</code> 运行时的一个特性, 上面代码所看到的 <code>objc_getAssociatedObject()</code> 与 <code>objc_setAssociatedObject</code> 允许你将任何键值在运行时关联到对象上的函数. 另外还有一个函数 <code>objc_removeAssociatedObjects</code>. 它们的主要功能就是对已经存在的类在扩展中添加自定义属性.</p>
<p>另外在上面定义的 set 方法中, 该实例的存储方式被定义为 <code>.OBJC_ASSOCIATION_RETAIN_NONATOMIC</code>, 它等价与 <code>@property (nonatomic, strong)</code> -&gt; 强引用, 不能被原子化使用. 而 <code>objc_AssociationPolicy</code> 是一个枚举类型, 它提供了多种方法来帮助你确定你定义的键值与对象之间的关联方式.</p>
<p>接着, 我们实现一个计算属性 <code>showActivityIndicatorWhenLoading</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> showActivityIndicatorWhenLoading: <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> result = objc_getAssociatedObject(<span class="keyword">self</span>, &amp;showActivityIndicatorWhenLoadingKey) <span class="keyword">as</span>? <span class="type">NSNumber</span> <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">            &#125;</div><div class="line">      </div><div class="line">            <span class="keyword">return</span> result.boolValue</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">set</span> &#123;</div><div class="line">            <span class="keyword">if</span> showActivityIndicatorWhenLoading == newValue &#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> newValue &#123;</div><div class="line">                <span class="keyword">let</span> indicator = <span class="type">UIActivityIndicatorView</span>(activityIndicatorStyle:</div><div class="line">                 <span class="type">UIActivityIndicatorViewStyle</span>.<span class="type">Gray</span>)</div><div class="line">                indicator.center = <span class="type">CGPoint</span>(x: <span class="type">CGRectGetMidX</span>(bounds), y:</div><div class="line">                 <span class="type">CGRectGetMidY</span>(bounds))</div><div class="line">                </div><div class="line">                indicator.hidden = <span class="literal">true</span></div><div class="line">                indicator.hidesWhenStopped = <span class="literal">true</span></div><div class="line">                addSubview(indicator)</div><div class="line">                </div><div class="line">                setActivityIndicator(indicator)</div><div class="line">                </div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                activityIndicator?.removeFromSuperview()</div><div class="line">                setActivityIndicator(<span class="literal">nil</span>)</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            objc_setAssociatedObject(<span class="keyword">self</span>, &amp;showActivityIndicatorWhenLoadingKey,</div><div class="line">             <span class="type">NSNumber</span>(bool: newValue),</div><div class="line">             objc_AssociationPolicy.<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在其 set 方法中, 初始化 indicatorView , 利用之前代码段定义的 <code>setActivityIndicator</code> 方法. 将这个 indicatorView 与 imageView 对象关联.  并在最后,利用 <code>objc_setAssociatedObject</code> 将 <code>showActivityIndicatorWhenLoading</code> -&gt; 是否正在加载图片的 bool 值与 imageView 对象关联. </p>
<p>在 get 方法中, 我们利用 <code>objc_getAssociatedObject</code> 去拿到之前存储的 bool 值.</p>
<p>至此, 我们对 <code>UIImageView</code> 的 extension 就已经完成了. 接下来看看实际使用中的代码.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// ImageAttachment 是一个枚举类型, 其中包括下载 image 的 URLString</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">cube_setImageAtFeedCellWithAttachment</span><span class="params">(attachment: ImageAttachment, withSize size: CGSize?)</span></span> &#123;</div><div class="line">       </div><div class="line">       <span class="keyword">guard</span> <span class="keyword">let</span> attachmentURL = <span class="type">NSURL</span>(string: attachment.<span class="type">URLString</span>) <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">return</span></div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       <span class="comment">/// 这段代码会调用 showActivityIndicatorWhenLoading 的 set 方法</span></div><div class="line">       <span class="comment">/// 初始化 indicatorView</span></div><div class="line">        showActivityIndicatorWhenLoading = <span class="literal">true</span></div><div class="line">      </div><div class="line">       <span class="keyword">if</span> showActivityIndicatorWhenLoading &#123;</div><div class="line">       	 <span class="comment">/// 我们已经可以直接访问 ImageView 的 activityIndicator 实例了.</span></div><div class="line">          activityIndicator?.hidden = <span class="literal">false</span></div><div class="line">          activityIndicator?.startAnimating()</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       setImageAttachmentURL(attachmentURL)</div><div class="line">       </div><div class="line">       <span class="type">ImageCache</span>.shardInstance.imageOfAttachment(attachment, withSideLenght: size?.width)</div><div class="line">        &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (url, image, cacheType) <span class="keyword">in</span></div><div class="line">       </div><div class="line">           <span class="keyword">guard</span> <span class="keyword">let</span> strongSelf = <span class="keyword">self</span>, <span class="keyword">let</span> attachmentURL = strongSelf.imageAttachmentURL <span class="keyword">where</span> attachmentURL == url <span class="keyword">else</span> &#123;</div><div class="line">               <span class="keyword">return</span></div><div class="line">           &#125;</div><div class="line">           </div><div class="line">           <span class="keyword">if</span> cacheType != .<span class="type">Memory</span> &#123;</div><div class="line">               <span class="type">UIView</span>.transitionWithView(strongSelf, duration: <span class="number">0.2</span>, </div><div class="line">               options: .<span class="type">TransitionCrossDissolve</span>, animations: &#123; </div><div class="line">                   strongSelf.image = image</div><div class="line">                   &#125;, completion: <span class="literal">nil</span>)</div><div class="line">           &#125;</div><div class="line">           </div><div class="line">           strongSelf.image = image</div><div class="line">           <span class="comment">/// 图片从缓存或者下载完成后, 停止 activityIndicator 的旋转</span></div><div class="line">           strongSelf.activityIndicator?.stopAnimating()</div><div class="line">       &#125;</div><div class="line">    </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>Ok, 上面的代码也非常好理解. 我在关键的位置已经添加了注释. 其实这是一个非常简单的功能实现. 我作为一个初学者第一次了解了 runtime 的实际应用场景. 其实像介绍 runloop 以及 runtime 这些特性的文章看过不少, 但一直不太确定其应用场景到底是什么. 最近的这个小发现让我亢奋了好几天, 所以分享给正在学习 iOS 开发的朋友. 或许可以借此契机对 runtime 做深入了解.</p>
<h4 id="参考及推荐阅读"><a href="#参考及推荐阅读" class="headerlink" title="参考及推荐阅读:"></a>参考及推荐阅读:</h4><p><a href="http://nshipster.cn/associated-objects/" target="_blank" rel="external">http://nshipster.cn/associated-objects/</a>   来自 NSHipster </p>
<p><a href="http://blog.leichunfeng.com/blog/2015/06/26/objective-c-associated-objects-implementation-principle/" target="_blank" rel="external">http://blog.leichunfeng.com/blog/2015/06/26/objective-c-associated-objects-implementation-principle/</a>  来自雷纯峰的技术博客</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在实现类似与微博或者微信的 &lt;code&gt;timeline&lt;/code&gt; 功能时, 往往需要在 &lt;code&gt;UITableViewCell&lt;/code&gt; 中利用 &lt;code&gt;UIImageView&lt;/code&gt; 展示单张或多张图片, 这些图片的来源通常都是网络. 而一旦网络速度不稳定, cell 中的 imageView 异步加载图片的过程就会一直显示 backgroundColor. 用户对图片正在下载的情况全然不知. 而像 &lt;code&gt;SDWebImage&lt;/code&gt; 和 &lt;code&gt;Kingfisher&lt;/code&gt; 这样的第三方框架很好的解决了这种问题: 一方面可以显示一张 placeholderImage, 也可以显示一个 &lt;code&gt;UIActivityIndicatorView&lt;/code&gt; 让用户感受到下载的进程. &lt;/p&gt;
&lt;p&gt;而实现 activityIndicatorView 的方法又有很多种, 我第一个想到的就是自定义一个 &lt;code&gt;UIView&lt;/code&gt;, 在里面添加一个 &lt;code&gt;UIImageView&lt;/code&gt; 和 一个 &lt;code&gt;UIActivityIndicatorView&lt;/code&gt;. 之后使用这个自定义的 view 就可以很好的完成任务. 而最近我在使用 &lt;code&gt;Kingfisher&lt;/code&gt; 时, 发现它利用 分类 的功能结合 runtime 的特性, 直接为 &lt;code&gt;UIImageView&lt;/code&gt; 添加一个 indicatorView 的实例变量. &lt;/p&gt;
&lt;p&gt;通过 分类 -&amp;gt; extension 不能添加新的实例变量,  但我们可以利用 runtime 的 Associated Objects 来弥补这一不足.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Stack View 的开始</title>
    <link href="http://yoursite.com/2016/03/17/Stack-View%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>http://yoursite.com/2016/03/17/Stack-View的开始/</id>
    <published>2016-03-17T10:06:25.000Z</published>
    <updated>2016-08-05T05:28:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名刚刚入门 iOS 开发的人来说，理解并熟练使用 Auto Layhout 非常重要。开始接触自动布局是非常困难和复杂的，布局一个视图通常需要添加非常多的约束<code>constraints</code>，尤其是在创建动态视图时，我们要不断的重复添加和删除约束以达到我们想要的效果。而使用 <code>Stack View</code> 可以很大程度上简化我们频繁调试约束的过程。</p>
<p>通常,我们在创建用户界面的时候很多视图是程<code>线性</code>排列的。以下面这个界面为例，界面中包括非常多的子视图<code>UILabel</code>，它们是垂直<code>vertically</code>线性排列的。</p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 3.06.19 PM.png" alt="示例"><br><a id="more"></a><br>当用户界面像上图这样程线性排列的时候，就可以考虑使用<strong>Stack View</strong>了，它是一个<strong>UIStackView</strong>的实例，用来创建垂直或水平的布局。不仅简单实现布局，而且可以帮助你管理不同 View 的各种约束。在理想状态下，你还可以将另外一个 StackView 嵌入到 StackView 中，得益于这个特性，我们可以极大的缩减在布局用户界面时花费的时间。</p>
<p>接下来，我们将创建一个对用某个 model 元素的 Detail 视图来了解一些关于<strong>Stack View</strong>的特性。<br>首先，创建一个新的项目，从库中拖拽一个<code>Vertical Stack View</code> 到 Storyboard 中默认的 ViewController 中。<br><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 3.32.30 PM.png" alt=""></p>
<p>为其添加 leading 和 trailing margins 的约束，以及 top 和 bottom 的约束，边距可以设置为 8 point。让它充分填满屏幕。<br><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 3.37.14 PM.png" alt=""></p>
<p>拖拽四个 <strong>UILabel</strong> 到刚刚创建的 <strong>StackView</strong> 中。<br><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 3.41.27 PM.png" alt=""></p>
<p>你会发现所有的 Label 四周都被标记红色辅助线（在 Auto Layout 中的错误提示），在这里意味着这些 Label 存在不明朗的垂直布局。我们有两种方式解决这个问题，既可以使用 Auto Layuout，也可以通过修改 StackView 的一些属性。这里我们先尝试使用 Auto Layout 来解决这个问题，同时方便理解一些用好 Auto Layout 必备的知识点。</p>
<p>解决这个问题我们先要理解一个基本概念，叫做<code>intrinsic content Size</code> ， 如果你没有指定某一个子视图的 width 和 height 的约束，那么这个视图将通过自身内容的大小来决定自己的大小。比如一个 UILabel， 当它需要被绘制在屏幕上时发现自己没有 width 和 height 的约束，那它将通过自己的字体大小，text 长度等属性自行判断自己的宽和高。但这会带来一个问题。试想如下图的这种状况： </p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 3.54.39 PM.png" alt="两个水平对齐的 UILabel"></p>
<p>如果这两个 Label 的 superView 发生变化，哪个 Label 会变得更宽？第一个？第二个？ 或者两个一起？</p>
<p>这个时候我们就需要使用每一个 View 都拥有的 <strong>content hugging priorities</strong> 和 <strong>content compression resistance priorities</strong> 来决定视图被拉伸或压缩的优先级。</p>
<ul>
<li>其包括下面四种优先级属性：</li>
<li>horizontal content hugging priority</li>
<li>vertical content hugging priority</li>
<li>horizontal content compression resistance priority</li>
<li>vertical content compression resistance priority</li>
</ul>
<p>对于上面水平对齐两个 Label， 如果其中一个 Label 的 <em>horizontal content hugging priority</em> 优先级更高，更不容易被拉伸，你可以想象优先级更高的 Label 内部有一种力量，像是一个皮筋，从两端向中心发力。在 superView 变宽的时候强迫自己 hold 住现在的身段。</p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 4.22.11 PM.png" alt="Screen Shot 2016-03-17 at 4.22.11 P"></p>
<p>现在你已经对 <em>content hugging priority</em> 有了简单的了解，我们现在来思考一下 <em>content compression resistance priority</em> 的作用，它决定了一个 View 有多大的力量抵抗被压扁。</p>
<p>同样是上面两个水平对齐的 Label。这次的场景不是 superView 变宽，而是变窄了，哪个 Label 会被压缩？</p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 4.32.10 PM.png" alt="Screen Shot 2016-03-17 at 4.32.10 P"></p>
<p>如果其中一个 Label 拥有更高的 <em>content compression resistance priority</em> 优先级，那么它将更能抵抗住被压扁，对于 Label 来说，更不容易出现上图那样文字显示不全的情况。</p>
<p>好啦，针对 View 的 模糊约束介绍到这里，有了这个概念，解决最开始 四个 Lable 的问题就变的很简单了。<br>我们选择<strong>Date Created</strong> label 打开它的 <strong>size inspector</strong> 界面，也可以使用快捷键 <em>option + cmd + 5</em> 在这里就可以看到关于这个 view 的压缩和拉伸优先级设置的界面了，这里 xcode 已经设置了相同的默认数值。</p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 4.46.46 PM.png" alt="Screen Shot 2016-03-17 at 4.46.46 P"></p>
<p>我们修改 <em>Vertical Content Hugging Priority</em> 值为 249， 这样，它上面的另外三个 label 就拥有了同样且更高的优先级，意味着它们三个更有力量保持自己本身的高度，而 <strong>Data Created</strong> label 因为自己的力量不够，会被用来填充剩余的屏幕空间。</p>
<p>修改之后，视图布局自动变成下图的状态。<br><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 4.51.48 PM.png" alt="Screen Shot 2016-03-17 at 4.51.48 P"></p>
<p>Ok，问题解决了，接下来我们来看看如何利用 <strong>Stack View</strong> 的特性来解决同样的问题，其实 stack view 拥有一个属性来决定它的子视图的布局样式。</p>
<p>从 storyboard 中选择我们的 stack view（可以在 ViewController 上使用快捷键 <em>shift + cmd + 鼠标右键</em> 来选中）打开它的 <em>attributes inspector</em> 界面，找到最顶部的 <strong>Stack View</strong> 的 section 中的 <strong>Distribution</strong> 属性。</p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 5.03.01 PM.png" alt="Screen Shot 2016-03-17 at 5.03.01 P"></p>
<p>默认的布局方式为 <strong>Fill</strong>，它会让其所有的子视图按照其自身的内容大小来决定布局的样式。我们修改它的值为 <strong>*Fill Equally</strong> ，从结果就可以看到，四个 Label 拥有了一样的高度，<em>Fill Equally 会忽略其子视图的自身内容大小来屏幕划分区域</em></p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 5.06.52 PM.png" alt="Screen Shot 2016-03-17 at 5.06.52 P"></p>
<p>我们重新 <strong>Distribution</strong> 属性为 <strong>Fill</strong>， 这是接下面我们要使用的布局方式。</p>
<p>对于 <strong>Stack View</strong> 来说，最重要的特性就是嵌套，一个 stack view 可以被加入到另外一个 stack view， 在创建复杂的用户界面时，这样的特性非常实用。接下来我们继续丰富我们的界面。</p>
<p>在最顶部的三个 UILabel 的右边都有一个 TextField，我们先完成第一个 <strong>Name Label</strong>。首先选择 <strong>Name Label</strong>， 选择在 canvas 中右下角的 Auto Layout constraints 菜单中最左边的选项。它会将你选中的视图嵌入到一个新的 stack view。</p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 5.13.25 PM.png" alt="Screen Shot 2016-03-17 at 5.13.25 P"></p>
<p>选择新的 stack view， 打开它的 <em>attributes inspector</em> 界面，其默认的 Axis 布局方向是 <strong>vertical</strong>， 我们修改为 <strong>horizontal</strong>。</p>
<p>从库中拖拽一个 <strong>Text Field</strong> 到 <strong>Name Label</strong> 的右边。<br><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 5.18.39 PM.png" alt="Screen Shot 2016-03-17 at 5.18.39 P"><br>默认设置下，Name Label 拥有更高的 <em>Horizontal content hugging priority</em> 所以，你会看到 Name Label 保持住了自己的宽度，而 text field 被用来填充剩余的空间。而它们的 <em>content compression resistance priority</em> 默认情况下是相同的，这会导致在屏幕宽度变窄的时候，Name Label 仅有的小身板被压缩，我们不希这种情况发生。所以我们要降低 text field 的 <em>Horizontal content compression resistance priority</em> 值，修改为 749。 让 Name Label 有更大的力量抵抗被压扁。</p>
<p>接下来，我们希望 name label 和 text field 之间有些间隔，这样看起来会更舒服。 Stack view 可以自定义其中子视图的间隔。</p>
<p>选择 name label 和 text field 所在的 stack view， 打开 <em>attributes inspector</em>，修改其中的 <strong>Spacing</strong> 为 8 points。注意 text field 会自动缩短，这是因为它抵抗被压缩的能力更低。</p>
<p>接下来，我们将 serial 和 value label 也用同样的方法为期配对 text field。<br><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 5.47.57 PM.png" alt="Screen Shot 2016-03-17 at 5.47.57 P"></p>
<p>添加完成后我们仍然需要进行一些微调，首先我们需要让垂直布局的 stack view 也拥有一些间距，并且三个 label 对应的 text filed 并没有对齐。</p>
<p>选择垂直的 stack view， 也就是我们最开始创建的那个，修改其 <em>Spacing</em> 为 8 point。 选择 Date Created label， 修改其文本排列样式为居中。</p>
<p>接下来是 text field 没有对齐的问题了，其实，stack view 实质上的作用就是用来减少 constraints 的的设置，但某些 constraints 仍然很重要。造成没有对齐的原因就是 text field 前面的 label 的宽度并不一致，而间隔我们设置为同样的数值 8。解决这个问题，我们需要在三个 text field 上添加 leading edge 的约束。</p>
<p>按住 <em>Ctrl</em> 从 Name text field 拖拽到 Serial text field 选择 Leading， 然后对 Serial text field 和 Value text field 做同样的约束添加。 It’s Done!</p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 5.57.15 PM.png" alt="Screen Shot 2016-03-17 at 5.57.15 P"></p>
<p>Stack view 允许你创建非常复杂的用户界面同时又非常便捷高效，不要忘记很多时候 contraints 仍然需要添加，但更多的约束是有 stack view 来管理，而不是你自己。Stack view 还允许你创建动态的用户界面。你可以使用 <strong>addArrangedSubView（_:</strong> ，<strong>insertArrangedSubview(_:atIndex:)</strong>，<strong>removeArrangedSubview(_:atIndex:)</strong> 在 stack view 中添加或者删除某个 view。也可以设置 view 的 hidden 属性 让某个 view 出现和消失，stack view 会识别这个状态，并自动重新布局。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一名刚刚入门 iOS 开发的人来说，理解并熟练使用 Auto Layhout 非常重要。开始接触自动布局是非常困难和复杂的，布局一个视图通常需要添加非常多的约束&lt;code&gt;constraints&lt;/code&gt;，尤其是在创建动态视图时，我们要不断的重复添加和删除约束以达到我们想要的效果。而使用 &lt;code&gt;Stack View&lt;/code&gt; 可以很大程度上简化我们频繁调试约束的过程。&lt;/p&gt;
&lt;p&gt;通常,我们在创建用户界面的时候很多视图是程&lt;code&gt;线性&lt;/code&gt;排列的。以下面这个界面为例，界面中包括非常多的子视图&lt;code&gt;UILabel&lt;/code&gt;，它们是垂直&lt;code&gt;vertically&lt;/code&gt;线性排列的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 3.06.19 PM.png&quot; alt=&quot;示例&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CS193P 第五课笔记</title>
    <link href="http://yoursite.com/2016/03/16/CS193P-%E7%AC%AC%E4%BA%94%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/03/16/CS193P-第五课笔记/</id>
    <published>2016-03-16T07:44:00.000Z</published>
    <updated>2016-03-16T07:59:29.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="类型转换-Objective-C-和-Swift"><a href="#类型转换-Objective-C-和-Swift" class="headerlink" title="类型转换 Objective-C 和 Swift"></a>类型转换 Objective-C 和 Swift</h5><p>在 iOS 开发使用 Swift 时， 经常会遇到需要调用<code>Objective-C</code> 类方法的情况，苹果已经将几乎所有的<code>Objective－C</code>的API都已经无缝的转接到了 Swift，同时一些特别的类型也做了桥接，桥接意味着可以随意进行转换。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="type">Let</span> aString = (aString <span class="keyword">as</span> <span class="type">NSString</span>).lenght </div><div class="line">(anArray <span class="keyword">as</span> <span class="type">NSArray</span>).componentsJoinedByString(<span class="type">NSString</span>)</div><div class="line"><span class="comment">/**</span></div><div class="line">* Array 桥接到了 NSArray。对应的是AnyObject的数组。*</div><div class="line">* Dictionary 桥接到了 NSDictionary 对应的是 [NSObject：AnyObject]</div><div class="line">* Int, Float Double, Bool  都桥接到了 NSNumber （反过来不适用）</div><div class="line">* 如果需要从 NSNumber 对象中获取某个类型需要用 doubleValue，intValue 等。</div><div class="line">*/</div></pre></td></tr></table></figure></p>
<p>利用这种<code>括弧 + as</code>的方法可以直接调用<code>Objective-C</code>的方法， 同时实现了自动的类型转换，比如上面的例子，<code>lenght</code>是<code>NSString</code>的方法， 我们可直接在一行代码中将<code>String</code> 转换成<code>NSString</code>并调用其方法。<br><a id="more"></a><br><code>String Array</code> 和<code>Dictionary</code> 都是结构体，而不是类，但他们仍然可以对应 <code>AnyObject</code>，因为它们桥接到的<code>NS</code>类版本都是类。<br><code>Dictionary</code> 被桥接到了<code>NSDictionary -&gt; [NSObject：AnyObject]</code>。虽然Key值对应的并不是桥接的<code>NSString</code>,  但<code>NSString</code>继承自<code>NSObject</code> .</p>
<h5 id="typealias"><a href="#typealias" class="headerlink" title="typealias"></a>typealias</h5><p> 我们可以使用 typealias 关键字为某个类型声明别名。比如想让某个类型有特别的意思。例如<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typealias</span> <span class="type">AudioSample</span> = <span class="type">Int</span></div></pre></td></tr></table></figure></p>
<p>之后在代码中使用<code>Int</code>类型的话就可以直接使用别名<code>AudioSample</code>了。</p>
<h5 id="operation"><a href="#operation" class="headerlink" title="operation"></a>operation</h5><p> ++ 或 –放在前后的区别。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="keyword">prefix</span> = ++start </div><div class="line"><span class="comment">// prefix = 9 </span></div><div class="line"><span class="comment">// start = 9  </span></div><div class="line"><span class="keyword">let</span> <span class="keyword">postfix</span> = start++ </div><div class="line"><span class="comment">// postfix = 9 </span></div><div class="line"><span class="comment">// start = 10</span></div></pre></td></tr></table></figure></p>
<h5 id="Property-List"><a href="#Property-List" class="headerlink" title="Property List"></a>Property List</h5><p><code>Property List</code>表面上可以看作是 <code>AnyObject</code>， 它们是一组只有创建者才知道如何解释的数据，其包括的数据类型和<code>CoreData</code>中支持的数据类型类似，同时可以用于<code>泛型的数据结构</code>。<br>我们可以利用下列常用方法进行某些类型的存储：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">It can store/retrieve entire Property Lists by name (keys) …</div><div class="line">*/</div><div class="line">setObject(<span class="type">AnyObject</span>, forKey: <span class="type">String</span>)<span class="comment">// the AnyObject must be a Property List</span></div><div class="line">objectForKey(<span class="type">String</span>) -&gt; <span class="type">AnyObject</span>?</div><div class="line">arrayForKey(<span class="type">String</span>) -&gt; <span class="type">Array</span>&lt;<span class="type">AnyObject</span>&gt;? <span class="comment">// returns nil if value is not set or not an array</span></div><div class="line"><span class="comment">/**</span></div><div class="line">It can also store/retrieve little pieces of data …</div><div class="line">*/</div><div class="line">setDouble(<span class="type">Double</span>, forKey: <span class="type">String</span>)</div><div class="line">doubleForKey(<span class="type">String</span>) -&gt; <span class="type">Double</span> <span class="comment">// not an optional, returns 0 if no such key</span></div></pre></td></tr></table></figure></p>
<p><code>Property List</code>其中的一个使用场景就是<code>NSUserDefaults</code>，通常用来存储一些用户设置之类的小数据，因为性能问题，切记不要用来存储图片类的大数据。下面是使用 <code>NSUserDefault</code> 常用方法。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">使用类方法</div><div class="line"><span class="keyword">let</span> defaults = <span class="type">NSUserDefaults</span>.standardUserDefaults()</div><div class="line">读或写</div><div class="line"><span class="keyword">let</span> plist: <span class="type">AnyObject</span> = defaults.objectForKey(<span class="type">String</span>)</div><div class="line">defaults.setObject(<span class="type">AnyObject</span>, forKey: <span class="type">String</span>)</div><div class="line"><span class="comment">// AnyObject 必须是 PropertyList</span></div></pre></td></tr></table></figure></p>
<p>你在任何地方做的改变都会自动保存，而下面的方法会强制保存，比如在调试的时候直接在Xcode终止模拟器时，App是不会触发自动保存的，可以适时插入<code>synchronize</code>，进行强制保存。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> !defaults.synchronize() &#123;</div><div class="line"><span class="comment">//处理错误，能做的不多。</span></div></pre></td></tr></table></figure></p>
<h3 id="CGRect"><a href="#CGRect" class="headerlink" title="CGRect"></a>CGRect</h3><p>CGRect  在Swift 中是结构体，包括两个属性。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CGRect</span> </span>&#123;</div><div class="line">	<span class="keyword">var</span> origin: <span class="type">CGPoint</span></div><div class="line">	<span class="keyword">var</span> size: <span class="type">CGSize</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> rect = <span class="type">CGRect</span>(origin: aCGPoint, size: aCGRize) <span class="comment">// there are other inits as well</span></div></pre></td></tr></table></figure></p>
<p> CGRect 提供了很多便利的方法，帮助我们快速设置范围<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//<span class="doctag">TODO:</span></span></div></pre></td></tr></table></figure></p>
<h3 id="UIView"><a href="#UIView" class="headerlink" title="UIView"></a>UIView</h3><p>我们在开发过程经常需要自定义某个视图，比如需要绘制某些形状到屏幕上，或者希望通过与UIButton、Slider 不同的方式，让某个视图能够响应用户的某种触摸事件。这时候，就需要我们设计自己的UIView子类。</p>
<p>我们通过重写 UIView 的 drawRect（）方法，来实现在屏幕上的自定义绘制。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">drawRect</span><span class="params">(regionThatNeedsToBeDrawn: CGRect)</span></span></div></pre></td></tr></table></figure></p>
<p>在<code>drawRect()</code> 方法中， 我们既可以使用更接近底层的 C－Like API<code>Core Graphics</code>， 也可以使用面向对象的UIBezierPath类.</p>
<p>理所当然，这个方法会在视图初始化的时候即被调用，但当用户通过某个触摸事件更改了视图的某个属性，需要通知视图重新绘制时，<strong>不能直接调用子类的 <code>drawRect</code>方法</strong>，而是通过调用下面的方法来通知iOS某个视图需要重新绘制，系统会在合适的时间，调用<code>drawRect</code>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">setNeedsDisplay()</div><div class="line">setNeedsDisplayInRect(regionThatNeedsToBeRedrawn: <span class="type">CGRect</span>)</div></pre></td></tr></table></figure>
<p>在 drawRect 方法中进行绘制代码编写的时候,可参考下列顺序.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. 你需要拿到绘制的上下文`context`, 利用 `UIGraphicsGetCurrentContext()方法可以获得.</div><div class="line">2. 创建即将绘制的路径 Path, 通过线条和弧线或者类似的东西</div><div class="line">3. 设置绘制时的`attributes`, 比如:颜色,字体,textures, linwidths, linecaps. 等.</div><div class="line">4. 最后描边并且填充之前创建的路径 Path</div></pre></td></tr></table></figure></p>
<p>上面就是绘制的基本步骤, 不仅仅是绘制图片，文字也是如此，在知道字体的情况下，iOS 知道如何获得一个完美的路径来绘制漂亮的字母，并将其填充。</p>
<p>示例:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> path = <span class="type">UIBezierPath</span>()</div><div class="line"><span class="comment">//初始化之后就可以进行</span></div></pre></td></tr></table></figure></p>
<p> 如果需要绘制透明的颜色，需要将视图允许的属性设置成true，因为透明的系统资源<br> 你可以利用 UIBezierPath 来画一些比较复杂的图形<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//圆角矩形</div><div class="line">let rondRect = UIBezierPath(roundedRect: aCGRect, cornerRadius: aCGFloat)</div><div class="line">//椭圆</div><div class="line">let oval = UIBezierPath(ovalInRect: aCGRect)</div></pre></td></tr></table></figure></p>
<p> Clipping your drawing to a UIBezierPath’s path<br>你也可以剪切任意的 Path, 它意味着如果我设置好了,我有一个 Path, 我要剪切,如果我调用 addClip(), 那么在这之后的所有绘图操作只会影响到 Path 里面的部分.举个例子,比如你要在屏幕上画一张纸牌,纸牌有圆角的效果,所以你可以把纸牌画在一个大的矩形里面,然后剪切到一个圆角矩阵里,这样四个角就修圆了.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">addClip()</div></pre></td></tr></table></figure></p>
<p> Hit Detection<br>碰撞测试.判断某个坐标点是不是在 path 中.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">func containsPoint(CGPoint) -&gt; Bool </div><div class="line">// returns whether the point is inside the path</div><div class="line">The path must be closed. The winding rule can be set with userEvenOddFillRule property</div></pre></td></tr></table></figure></p>
<p>#####Drawing Text<br>我们通常使用UIKit的UILabel将字符呈现在屏幕上，但你同样可以通过<code>drawRect</code>进行字符的绘制。<br>我们需要用到 NSAttributedString 来描述字符的字体，颜色，大小，等等属性。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> text = <span class="type">NSAttributedString</span>(“hello”)</div><div class="line">text.drawAtPoint(aCGPoint)</div><div class="line"><span class="keyword">let</span> textSize: <span class="type">CGSize</span> = text.size</div><div class="line"><span class="comment">// how much space the string will take up 可以通过`text.size`拿到需要绘制字符的Size</span></div></pre></td></tr></table></figure>
<p>同时，NSAttributedString 还拥有一个可变类型，当需要动态的更改字符属性的时候使用。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> mutableText = <span class="type">NSMutableAttributedString</span>(“some string”)</div></pre></td></tr></table></figure>
<p>注意 NSAttributedString 不是 String 或者 NSString，我们需要通过它的<code>string</code> or <code>mutableString</code>来获取它的字符串。</p>
<p>创建NSAttributedString之后，我们就可以为字符串添加属性了</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setAttributes</span><span class="params">(attributes: Dictionary, range: NSRange)</span></span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">addAttributes</span><span class="params">(attributes: Dictionary, range: NSRange)</span></span></div><div class="line"><span class="comment">/**</span></div><div class="line">Warning! This is a pre-Swift API. NSRange is not a Range.And indexing into the string is using old-style indexing (not String.Index)</div><div class="line">*/</div></pre></td></tr></table></figure>
<p><em>这里可以展开讨论一下String.Index</em><br>字符的属性祖耀封装到字典中进行设置，我们常用到的属性包括：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="type">NSForegroundColorAttributeName</span> : <span class="type">UIColor</span></div><div class="line"><span class="type">NSStrokeWidthAttributeName</span> : <span class="type">CGFloat</span></div><div class="line"><span class="type">NSFontAttributeName</span> : <span class="type">UIFont</span></div><div class="line"><span class="comment">/**</span></div><div class="line">更多的信息可以查看文档，在NSAttributedString(NSStringDrawing) 下。</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>对于字符属性最重要的就是字体，自 iOS7 之后，苹果推出了动态调整全局字体大小的方案，如果需要让自己的App支持系统级的调整字体大小，我们就需要使用系统推荐的字体，我们可以通过下面的方法获取适合排版的字体样式。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">Get preferred font for a given text style (e.g. body, etc.) using this UIFont type method …</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">preferredFontForTextStyle</span>(<span class="title">UIFontTextStyle</span>) -&gt; <span class="title">UIFont</span></span></div><div class="line">/**</div><div class="line"><span class="title">Some</span> <span class="title">of</span> <span class="title">the</span> <span class="title">styles</span> (<span class="title">see</span> <span class="title">UIFontDescriptor</span> <span class="title">documentation</span> <span class="title">for</span> <span class="title">more</span>) …</div><div class="line">*/</div><div class="line"><span class="title">UIFontTextStyle</span>.<span class="title">Headline</span></div><div class="line"><span class="title">UIFontTextStyle</span>.<span class="title">Body</span></div><div class="line"><span class="title">UIFontTextStyle</span>.<span class="title">Footnote</span></div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">These appear usually on things like buttons</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">systemFontOfSize</span>(<span class="title">pointSize</span>: <span class="title">CGFloat</span>) -&gt; <span class="title">UIFont</span></span></div><div class="line"><span class="title">class</span> <span class="title">func</span> <span class="title">boldSystemFontOfSize</span>(<span class="title">pointSize</span>: <span class="title">CGFloat</span>) -&gt; <span class="title">UIFont</span></div><div class="line">/**</div><div class="line"><span class="title">Don</span>’<span class="title">t</span> <span class="title">use</span> <span class="title">these</span> <span class="title">for</span> <span class="title">your</span> <span class="title">user</span>’<span class="title">s</span> <span class="title">content</span>. <span class="title">Use</span> <span class="title">preferred</span> <span class="title">fonts</span> <span class="title">for</span> <span class="title">that</span>.</div><div class="line">你可以通过查看文档的<span class="title">UIFont</span>和<span class="title">UIFontDescriptor</span> 了解更多信息，但用到的不会太多。</div><div class="line">*/</div></pre></td></tr></table></figure>
<h5 id="Drawing-Image"><a href="#Drawing-Image" class="headerlink" title="Drawing Image"></a>Drawing Image</h5><p>和字符一样，通常我们需要在屏幕上呈现图片的时候会使用UIImageView，但是，你可能希望绘制某张图片到一个固定的范围，下面我们来看看如何在<code>drawRect</code>中创建UIImage对象。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> image: <span class="type">UIImage</span>? = <span class="type">UIImage</span>(named: “foo”) <span class="comment">// 这里的UIImage 是 optional</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">添加 foo.jpg 到你项目中的 Images.xcassets</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>你也可以将某个系统路径或者二进制数据作为UIImage的来源，图片的格式可以是：<code>jpg</code>,<code>png</code>,<code>tiff</code>等。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">But we haven’t talked about getting at ﬁles in the ﬁle system … anyway …)</div><div class="line">*/</div><div class="line"><span class="keyword">let</span> image: <span class="type">UIImage</span>? = <span class="type">UIImage</span>(contentsOfFile: aString)</div><div class="line"><span class="keyword">let</span> image: <span class="type">UIImage</span>? = <span class="type">UIImage</span>(data: anNSData）</div></pre></td></tr></table></figure>
<p>你还可以使用更底层的<code>Core Graphics</code> 创建图片，可从文档UIGraphicsBeginImageContext(CGSize) 中了解更详细的信息。</p>
<p>在创建UIImage之后，我们需要利用下面的方法进行屏幕中的定位和绘制。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> image: <span class="type">UIImage</span> =</div><div class="line">…</div><div class="line">image.drawAtPoint(aCGPoint）<span class="comment">//设置图片的位置（左上角）</span></div><div class="line">image.drawInRect(aCGRect)<span class="comment">//设置绘制的范围</span></div><div class="line">image.drawAsPatternInRect(aCGRect)</div><div class="line"><span class="comment">// tiles the image into aCGRect</span></div></pre></td></tr></table></figure>
<p>在绘制图片的时候，我们要考虑屏幕翻转带来的<code>bounds</code>变化，默认情况下，<code>bounds</code>改变后，View并不会重新绘制，其实UIView的<code>contentMode</code>属性可以帮助我们控制这种情况。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> contentMode: <span class="type">UIViewContentMode</span></div><div class="line"><span class="comment">/**</span></div><div class="line">contentMode 属性的关联值很多，我们可以将他们分成三个类别</div><div class="line">*/</div><div class="line"><span class="comment">//1. 不调整比例，只设置位置</span></div><div class="line">.<span class="type">Left</span></div><div class="line">.<span class="type">Right</span></div><div class="line">.<span class="type">Top</span></div><div class="line">.<span class="type">Botto</span></div><div class="line">.<span class="type">TopRight</span></div><div class="line">.<span class="type">BottomRight</span></div><div class="line">.<span class="type">BottomLeft</span></div><div class="line">.<span class="type">Center</span> </div><div class="line"><span class="comment">//2. 设置显示比例。 ScaleToFill是默认设置。</span></div><div class="line">.<span class="type">ScaleToFill</span></div><div class="line">.<span class="type">ScaleAspectFill</span></div><div class="line">.<span class="type">ScaleAspectFit</span></div><div class="line"><span class="comment">//3. 重新调用 drawRect 方法</span></div><div class="line">.<span class="type">Redraw</span></div></pre></td></tr></table></figure>
<p> 这些值我们不仅仅可以通过代码实现，在 Xcode 中的``也可以进行直接设置。</p>
<p>下面是重写<code>drawRect</code>绘制的Demo：<code>FaceView</code><br>Creat  a custom UIView subclass to draw a face with a specified amount of “smallness” </p>
<p>未完待续。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;类型转换-Objective-C-和-Swift&quot;&gt;&lt;a href=&quot;#类型转换-Objective-C-和-Swift&quot; class=&quot;headerlink&quot; title=&quot;类型转换 Objective-C 和 Swift&quot;&gt;&lt;/a&gt;类型转换 Objective-C 和 Swift&lt;/h5&gt;&lt;p&gt;在 iOS 开发使用 Swift 时， 经常会遇到需要调用&lt;code&gt;Objective-C&lt;/code&gt; 类方法的情况，苹果已经将几乎所有的&lt;code&gt;Objective－C&lt;/code&gt;的API都已经无缝的转接到了 Swift，同时一些特别的类型也做了桥接，桥接意味着可以随意进行转换。&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Let&lt;/span&gt; aString = (aString &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;NSString&lt;/span&gt;).lenght &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(anArray &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;NSArray&lt;/span&gt;).componentsJoinedByString(&lt;span class=&quot;type&quot;&gt;NSString&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* Array 桥接到了 NSArray。对应的是AnyObject的数组。*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* Dictionary 桥接到了 NSDictionary 对应的是 [NSObject：AnyObject]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* Int, Float Double, Bool  都桥接到了 NSNumber （反过来不适用）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* 如果需要从 NSNumber 对象中获取某个类型需要用 doubleValue，intValue 等。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;利用这种&lt;code&gt;括弧 + as&lt;/code&gt;的方法可以直接调用&lt;code&gt;Objective-C&lt;/code&gt;的方法， 同时实现了自动的类型转换，比如上面的例子，&lt;code&gt;lenght&lt;/code&gt;是&lt;code&gt;NSString&lt;/code&gt;的方法， 我们可直接在一行代码中将&lt;code&gt;String&lt;/code&gt; 转换成&lt;code&gt;NSString&lt;/code&gt;并调用其方法。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CS193P 第四课笔记</title>
    <link href="http://yoursite.com/2016/03/16/CS193P-%E7%AC%AC%E5%9B%9B%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/03/16/CS193P-第四课笔记/</id>
    <published>2016-03-16T07:42:15.000Z</published>
    <updated>2016-03-16T07:59:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>笔记信息的来源大部分来自课程随堂的Keynote，以及一些我个人的看法，因为没有软件开发的基础，难免容易混淆一些基础概念，还请各位看官斧正。<br>这节课主要介绍了在 iOS 开发中经常使用的结构类型，呈现了一些 Swift 语言的一些基础特性，更详细的语法和特性，还是需要仔细阅读苹果官方的<code>The Swift Programming Language</code>来了解的。<br><a id="more"></a></p>
<h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><h2 id="enum"><a href="#enum" class="headerlink" title="enum"></a><strong>enum</strong></h2><p>在 Swift中:类、结构体、 和枚举都可以定义属性 及方法。类相比结构体仅仅多了可被继承的特性，而 enum 不能够拥有<code>存储属性</code>，只可以使用<code>计算属性</code>。<br>enum 比较特别，在 Swift 中会经常被使用，当你需要声明一些东西，例如某个对象的多个不同状态，这些状态在不同的时候有不同的值，但一般不会同时拥有两个状态时候，比较适合使用 enum 来描述数据结构。<br>比如用来描述网络请求状态的时候，可以定义一个enum：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">//TODO:</div></pre></td></tr></table></figure></p>
<h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a><strong>Optional</strong></h2><p>在 Swift 中 <code>optional</code>是由 <code>enum</code> 实现的，我们可以试想一下其内部结构。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Optional</span> &lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">None</span></div><div class="line">    <span class="keyword">case</span> some（<span class="type">T</span>）</div><div class="line">&#125;</div><div class="line"><span class="comment">//它是一个泛型，T 表示 optional所关联值的类型，如果 Optional不是Nil，那T就是它的类型。</span></div><div class="line"><span class="keyword">let</span> x: <span class="type">String</span>? = <span class="literal">nil</span></div><div class="line">...<span class="keyword">is</span>...</div><div class="line"><span class="keyword">let</span> x = <span class="type">Optional</span></div><div class="line"><span class="keyword">let</span> x: <span class="type">String</span>? = <span class="string">"Hello"</span></div><div class="line">...<span class="keyword">is</span>...</div><div class="line"><span class="keyword">let</span> x = <span class="type">Optional</span> &lt;<span class="type">String</span>&gt;.some(<span class="string">"Hello"</span>)</div><div class="line"><span class="keyword">var</span> y = x!</div><div class="line"><span class="keyword">switch</span> x &#123;</div><div class="line">    <span class="keyword">case</span> some(<span class="keyword">let</span> value): y = value</div><div class="line">    <span class="keyword">case</span> <span class="type">None</span>: <span class="comment">// raise an exception</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a><strong>Array</strong></h2><p>数组是结构体，常用的方法如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="type">Array</span>&lt;<span class="type">String</span>&gt;()</div><div class="line">… <span class="keyword">is</span> the same <span class="keyword">as</span> …</div><div class="line"><span class="keyword">var</span> a = [<span class="type">String</span>]()</div><div class="line"><span class="keyword">let</span> animals = [“<span class="type">Giraffe</span>”, “<span class="type">Cow</span>”, “<span class="type">Doggie</span>”, “<span class="type">Bird</span>”]</div><div class="line">animals.append(“<span class="type">Ostrich</span>”) <span class="comment">// won’t compile, animals is immutable (because of let)</span></div><div class="line"><span class="keyword">let</span> animal = animals[<span class="number">5</span>] <span class="comment">// crash (array index out of bounds)</span></div><div class="line"><span class="comment">// enumerating an Array</span></div><div class="line"><span class="keyword">for</span> animal <span class="keyword">in</span> animals &#123;</div><div class="line"><span class="built_in">println</span>(“\(animal)”)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a><strong>Dictionary</strong></h2><p>字典在Swift中和数组一样，属于结构体。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var pac10teamRankings = Dictionary&lt;String, Int&gt;()</div><div class="line">… is the same as …</div><div class="line">var pac10teamRankings = [String:Int]()</div><div class="line">pac10teamRankings = [”Stanford”:1, ”Cal”:10]</div><div class="line">let ranking = pac10teamRankings[“Ohio State”] // ranking is an Int? (would be nil)</div><div class="line">// use a tuple with for-in to enumerate a Dictionary</div><div class="line">for (key, value) in pac10teamRankings &#123;</div><div class="line">println(“\(key) = \(value)”)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="属性—Properties"><a href="#属性—Properties" class="headerlink" title="属性—Properties"></a>属性—Properties</h1><ul>
<li><strong>计算型属性-Computed Properties</strong><br>在结构体，类，和枚举中都可以使用计算型属性，而存储型属性不能应用在枚举中。<br>某个属性在 set 和 get 的时候分别返回不同类型的参数的时候可以应用，或者在 set 或 get 的时候需要对参数进行加工时可以使用。<br>set 方法中包含一个隐藏参数<code>newValue</code>， 例如，displayValue = 5， 5就是 newValue<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var displayValue: Double &#123;</div><div class="line">get &#123;</div><div class="line">return NSNumberFormatter().numberFromString(display.text!)!.doubleValue</div><div class="line">&#125;</div><div class="line">set &#123;</div><div class="line">display.text = &quot;\(newValue)&quot;</div><div class="line">userIsInTheMiddleOfTypingANumber = false</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>从上面代码看set方法并没有为displayValue本身赋值，只是使用了其中的newValue为其他属性进行计算并赋值。</p>
<ul>
<li><strong>属性观察 Property Observers</strong><br>属性观察会在iOS开发中大量应用，你可以通过willset 和 didset 观察 Property 的变化。<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 这是一个直接的存储属性 </div><div class="line">*/</div><div class="line"><span class="keyword">var</span> someStoredProperty: <span class="type">Int</span> = <span class="number">42</span> &#123;     </div><div class="line">      <span class="keyword">willSet</span> &#123; newValue <span class="keyword">is</span> the new value &#125;</div><div class="line">      <span class="keyword">didSet</span> &#123; oldValue <span class="keyword">is</span> the old value &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">override</span> <span class="keyword">var</span> inheritedProperty &#123;     </div><div class="line">      <span class="keyword">willSet</span> &#123; newValue <span class="keyword">is</span> the new value &#125;</div><div class="line">      <span class="keyword">didSet</span> &#123; oldValue <span class="keyword">is</span> the old value &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>willSet</code>和<code>didSet</code>会在属性被设置值期间自动调用，你可以在两种情况下应用属性观察，一种情况是你在自己的类中拥有一个存储属性，当其他方法设置它的值时，你想获得一个notice，然后根据这歌notice做一些事情。另一种情况是你继承了某些类，你并不需要对类中的 property 做什么修改，但它们被改变的时候你想知道，所以你可以在某些继承的类上重写父类的 willSet 和 didSet 。<br>在 iOS 开发中，我们用属性观察最多的地方就是更新界面UI， 比如你有一个viewcontroller，其中有一个view的property，可以在didset中进行view的重新绘制。</p>
<ul>
<li><strong>惰性初始化 lazy initialization</strong><br>被标记 lazy 的 property 只有在被时候的时候才会初始化，你也可以在初始化的时候使用闭包（也就是在后面放一对括号）它会通过这个闭包来初始化自己。你甚至可以调用一个方法来初始化惰性属性，如果是普通的 property，在类初始化之前，类的方法都是不可用的。但在惰性属性中，直到有人试图去 get 这个惰性属性，它就被初始化了。我们对于惰性属性声明只能使用<code>var</code>，不能使用<code>let</code>.<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 如果CalculatorBrain需要消耗大量系统资源，可以使用lazy声明。</div><div class="line">*/</div><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> brain=<span class="type">CalculatorBrain</span>() </div><div class="line"><span class="comment">/**</span></div><div class="line"> 使用闭包声明惰性属性。</div><div class="line">*/</div><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> someProperty: <span class="type">Type</span> = &#123; <span class="comment">//constructthevalueofsomePropertyhere</span></div><div class="line">              <span class="keyword">return</span>&lt;theconstructedvalue&gt;</div><div class="line">    &#125;()</div><div class="line">lazyvarmyProperty=<span class="keyword">self</span>.initializeMyProperty</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>##<strong>Initialization</strong><br>讨论初始话我们先弄明白第一个问题：我们在什么情况下需要实现 <code>init</code>方法呢？事实上大多数时候并不需要init方法，因为类或者结构体里边大部分的常量和变量都会通过赋值被初始化，或者有些属性是 Optional 的，这样即使它们是nil也没有关系，就像 StoryBoard 里的 OutLet 一样，又或者可以用闭包来初始化，你也可以使用 lazy 机制，从而避免使用 init 方法。</p>
<p>但如果你确实需要一个 init 方法，我们来了解一下在默认的初始化方法是如何产生的。</p>
<ul>
<li><p>第一种情况就是如果一个基类<code>class</code>，<strong>基类指的是没有父类的类</strong>，它所有的属性都有默认值，那么它就会自动得到一个 <strong>没有参数</strong> 的 init 方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">ClalculatorBarin()  后面的括弧就是默认没有参数的init方法</div><div class="line">*/</div><div class="line"><span class="keyword">let</span> brain = <span class="type">ClalculatorBarin</span>()</div></pre></td></tr></table></figure>
</li>
<li><p>如果是一个结构体<code>struct</code>没有自定义初始化方法，它会默认得到一个包括 <strong>所有属性和参数</strong> 的<code>init</code>方法,  并且所有的属性和参数都比配</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> x: <span class="type">Int</span> = <span class="number">42</span></div><div class="line">    <span class="keyword">var</span> y: <span class="type">String</span> = <span class="string">"moltuae"</span></div><div class="line"></div><div class="line">    <span class="keyword">init</span>(x: <span class="type">Int</span>, y: <span class="type">String</span>) <span class="comment">// comes for free</span></div></pre></td></tr></table></figure>
<p>你可以在 init 方法中做什么？<br>你可以在里面设置任何 property 的值，你甚至可以给property 设置默认值，即使你把它设置为等于12，在你的init里，你可以把一些东西重置为别的什么。<br>你可以给常量 property 赋值<code>let</code><br>在你的类或者结构体里尼可以调用其他的init方法，使用self .init<br>你可以调用有不同参数的其它init方法<br>当然，在类中你也可以调用super.init，调用父类的初始化方法。</p>
</li>
</ul>
<p>当时调用其它的init方法有很多规则，尤其是在 <strong>类</strong> 里，在结构体中，这不是一个大问题。我们先来看看哪些事你必须要做的：<br>1.在你的类里，所有的property都必须初始化，它们都必须有值， <code>optionals 的nil也是值</code>。<br>2 在类中，提供了两种类型的构造器来初始化，一种是 <code>Convenience Init</code> 另一种是 <code>Designated Initializers</code></p>
<p>RxSwift</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔记信息的来源大部分来自课程随堂的Keynote，以及一些我个人的看法，因为没有软件开发的基础，难免容易混淆一些基础概念，还请各位看官斧正。&lt;br&gt;这节课主要介绍了在 iOS 开发中经常使用的结构类型，呈现了一些 Swift 语言的一些基础特性，更详细的语法和特性，还是需要仔细阅读苹果官方的&lt;code&gt;The Swift Programming Language&lt;/code&gt;来了解的。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title> Octopress 常用命令</title>
    <link href="http://yoursite.com/2016/03/16/Octopress%E7%9A%84%E5%88%9D%E7%BA%A7%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/03/16/Octopress的初级使用/</id>
    <published>2016-03-16T07:23:30.000Z</published>
    <updated>2017-03-03T06:46:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>前两天无意间看到一个部署 Octopress 的教程, 今天终于抽出时间折腾了一下.<br>因为对 Git、Rudy 和 HTML 没啥了解，遇到很多问题，所以先把今后可能用到的语法总结一下。<br><a href="http://octopress.org/docs/" target="_blank" rel="external">Octopress文档链接</a></p>
<h2 id="代码高亮的-Syntax"><a href="#代码高亮的-Syntax" class="headerlink" title="代码高亮的 Syntax"></a>代码高亮的 Syntax</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[language] [title] [url] [link text]</div><div class="line">code snippet</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Range</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">var</span> startIndex:<span class="type">T</span></div><div class="line">    <span class="keyword">var</span> endIndex:<span class="type">T</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p> 有些占位符在实际使用过程中可以被省略，比如目前不太常用的 url，可以帮助指向示例代码的详细内容链接，并且可以定位超链接的名字。</p>
<p>如果希望在文章中插入某个 swift 文件,用以呈现代码块,可使用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% include_code [title] [lang:language] path/to/file %&#125;</div></pre></td></tr></table></figure></p>
<p>这里的系统默认会读取<code>source/downloads/code</code>路径下的代码文件<em>(此路径可通过配置<code>_config.yml</code>文件进行修改)</em>,同时,这里的 title 不是用来自定义的,而是需要输入文件的名字,并包含其扩展名.</p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% include_code FilterHelper.swift %&#125;</div></pre></td></tr></table></figure>
<p>实现方法.</p>
<p>##新建文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo rake new_post[&quot;title&quot;]</div></pre></td></tr></table></figure></p>
<p>new_post 会自动创建一个自定义 title 的 markdown 文件, 并且将中文字符转成拼音用已生成文章的 HTML链接.</p>
<p>文章自动生成一些关键内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">layout: post</div><div class="line">title: &quot;Zombie Ninjas Attack: A survivor&apos;s retrospective&quot;</div><div class="line">date: 2011-07-03 5:59</div><div class="line">comments: true</div><div class="line">external-url:</div><div class="line">categories:</div></pre></td></tr></table></figure></p>
<p>如果希望这篇文章暂时以草稿的形式存在,可添加 published: false 阻止其公开.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// One category</div><div class="line">categories: Sass</div><div class="line"> </div><div class="line">// Multiple categories example 1</div><div class="line">categories: [CSS3, Sass, Media Queries]</div><div class="line"> </div><div class="line">// Multiple categories example 2</div><div class="line">categories:</div><div class="line">- CSS3</div><div class="line">- Sass</div><div class="line">- Media Queries</div></pre></td></tr></table></figure>
<p>categories 的配置我理解类似文章的 tag, 可以利用一些关键字方便归类.</p>
<p>##为文章增加新页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rake new_page[super-awesome]</div><div class="line">//creates /source/super-awesome/index.markdown</div><div class="line">rake new_page[super-awesome/page.html]</div><div class="line">creates /source/super-awesome/page.html</div></pre></td></tr></table></figure></p>
<p>感觉自己最近用不到,链接指向官方文档,需要的时候再实验具体内容.</p>
<p>##文章内容</p>
<p>在文章内插入<code>&lt;!-- more --&gt;</code>可以实现”点击此处”展开文章内容.</p>
<p>##生成文章</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rake generate   // Generates posts and pages into the public directory</div><div class="line">rake watch      // Watches source/ and sass/ for changes and regenerates</div><div class="line">rake preview    // Watches, and mounts a webserver at http://localhost:4000</div></pre></td></tr></table></figure>
<p>如果希望文章不被公开,在文章头信息中添加<code>published: false</code>,并利用<code>rake preview</code>进行本地浏览.<br>文章编辑结束,利用<code>rake generate</code>将文章从 source 移到 public,并使用 git 指令 commit 到远程 Hub.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo git push heroku master</div></pre></td></tr></table></figure></p>
<p>##终端使用 Tips</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ls 展示目录详情</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天无意间看到一个部署 Octopress 的教程, 今天终于抽出时间折腾了一下.&lt;br&gt;因为对 Git、Rudy 和 HTML 没啥了解，遇到很多问题，所以先把今后可能用到的语法总结一下。&lt;br&gt;&lt;a href=&quot;http://octopress.org/docs/&quot;&gt;Octopress文档链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码高亮的-Syntax&quot;&gt;&lt;a href=&quot;#代码高亮的-Syntax&quot; class=&quot;headerlink&quot; title=&quot;代码高亮的 Syntax&quot;&gt;&lt;/a&gt;代码高亮的 Syntax&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[language] [title] [url] [link text]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;code snippet&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Range&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; startIndex:&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; endIndex:&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
