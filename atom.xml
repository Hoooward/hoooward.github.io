<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-08T11:54:34.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/11/08/%E4%BD%BF%E7%94%A8%20Swift%20%E4%BC%98%E9%9B%85%E7%9A%84%E7%BC%93%E5%AD%98%20Cell%20%E7%9A%84%E8%A1%8C%E9%AB%98%E4%B8%8E%20subviews%20%E7%9A%84%20frame/"/>
    <id>http://yoursite.com/2016/11/08/使用 Swift 优雅的缓存 Cell 的行高与 subviews 的 frame/</id>
    <published>2016-11-08T10:16:01.000Z</published>
    <updated>2016-11-08T11:54:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-Swift-优雅的缓存-Cell-的行高与-subviews-的-frame"><a href="#使用-Swift-优雅的缓存-Cell-的行高与-subviews-的-frame" class="headerlink" title="使用 Swift 优雅的缓存 Cell 的行高与 subviews 的 frame"></a>使用 Swift 优雅的缓存 Cell 的行高与 subviews 的 frame</h1><p>TableView 与 CollectionView 无疑是 iOS 开发中使用最多的视图，他们往往负责顺序展示大量的数据当用户的手指不断的滑动，系统会反复加载数据，计算 frame。而一旦数据体积增大，计算 frame 的逻辑复杂，就会造成过多的性能浪费。解决这类问题的方法有很多. 最近在 Yep 代码中看到的方法，在应用到自己项目的时候感觉非常不错, 所以有了以下的记录总结.</p>
<p>我们来看 Demo 要实现的效果。</p>
<p><img src="media/14786001617397/IMG_0230.jpg" alt="IMG_0230"></p>
<p>既然要利用代码的方式实现这样的效果，我们现在分析一下实现的具体过程。</p>
<ul>
<li>图中是一个 TableViewController</li>
<li>有三种不同的 cell 样式</li>
<li>三种不同的 cell 包含一些共同的元素，比如 nickName，avactorImage，还有 comment count，以及 category</li>
</ul>
<p>我们可以先创建一个基类 <code>FeedBaseCell</code>, 用来定义三种样式的公共元素.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeedBaseCell</span>: <span class="title">UITableViewCell</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 控制文本内容使用的 textView 最大的宽度.</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> messageTextViewMaxWidth: <span class="type">CGFloat</span> = &#123;</div><div class="line">        <span class="keyword">let</span> maxWidth = <span class="type">UIScreen</span>.main.bounds.width - (<span class="number">15</span> + <span class="number">40</span> + <span class="number">10</span> + <span class="number">15</span>)</div><div class="line">        <span class="keyword">return</span> maxWidth</div><div class="line">    &#125;()</div><div class="line">    </div><div class="line">    <span class="comment">// 用来配置 cell 时使用的 feed 实例</span></div><div class="line">    <span class="keyword">var</span> feed: <span class="type">Feed</span>?</div><div class="line">    </div><div class="line">    <span class="comment">// 控制 subViews 点击事件</span></div><div class="line">    <span class="keyword">var</span> tapAvataraction: ((<span class="type">FeedBaseCell</span>) -&gt; <span class="type">Void</span>)?</div><div class="line">    <span class="keyword">var</span> touchesBeganAction: ((<span class="type">UITableViewCell</span>) -&gt; <span class="type">Void</span>)?</div><div class="line">    <span class="keyword">var</span> touchesEndedAction: ((<span class="type">UITableViewCell</span>) -&gt; <span class="type">Void</span>)?</div><div class="line">    <span class="keyword">var</span> touchesCancelledAction: ((<span class="type">UITableViewCell</span>) -&gt; <span class="type">Void</span>)?</div><div class="line">    </div><div class="line">     <span class="built_in">lazy</span> <span class="keyword">var</span> avatarImageView: <span class="type">UIImageView</span> = &#123;</div><div class="line">        <span class="keyword">let</span> imageView = <span class="type">UIImageView</span>()</div><div class="line">        <span class="comment">// 自定义样式省略...</span></div><div class="line">        <span class="keyword">return</span> imageView</div><div class="line">    &#125;()</div><div class="line">    </div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> nickNameLabel: <span class="type">UILabel</span> = &#123;</div><div class="line">        <span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line">        <span class="comment">// 自定义样式省略...</span></div><div class="line">        <span class="keyword">return</span> label</div><div class="line">    &#125;()</div><div class="line">    </div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> categoryButton: <span class="type">UIButton</span> = &#123;</div><div class="line">        <span class="keyword">let</span> button = <span class="type">UIButton</span>()</div><div class="line">       <span class="comment">// 自定义样式省略...</span></div><div class="line">        <span class="keyword">return</span> button</div><div class="line">    &#125;()</div><div class="line">    </div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> messageTextView: <span class="type">FeedTextView</span> = &#123;</div><div class="line">        <span class="keyword">let</span> textView = <span class="type">FeedTextView</span>()</div><div class="line">        <span class="comment">// 自定义样式省略...</span></div><div class="line">        <span class="keyword">return</span> textView</div><div class="line">    &#125;()</div><div class="line">    </div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> leftBottomLabel: <span class="type">UILabel</span> = &#123;</div><div class="line">        <span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line">        <span class="comment">// 自定义样式省略...</span></div><div class="line">        <span class="keyword">return</span> label</div><div class="line">    &#125;()</div><div class="line">    </div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> messageCountLabel: <span class="type">UILabel</span> = &#123;</div><div class="line">        <span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line">        <span class="comment">// 自定义样式省略...</span></div><div class="line">        <span class="keyword">return</span> label</div><div class="line">    &#125;()</div></pre></td></tr></table></figure>
<p><code>FeedBaseCell</code> 中不仅包换其中的 subviews 实例，还需实现一个 <code>heightForFeed</code> 的方法用来计算 cell 的高度.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 通过Feed内容计算高度</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">heightOfFeed</span>(<span class="title">feed</span>: <span class="title">Feed</span>) -&gt; <span class="title">CGFloat</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> rect = (feed.contentBody! <span class="keyword">as</span> <span class="type">NSString</span>).boundingRect(with:</div><div class="line">         <span class="type">CGSize</span>(width: <span class="type">FeedBaseCell</span>.messageTextViewMaxWidth, height: </div><div class="line">         <span class="type">CGFloat</span>(<span class="type">FLT_MAX</span>)), options: </div><div class="line">         [.usesLineFragmentOrigin, .usesFontLeading], attributes: </div><div class="line">         [<span class="type">NSFontAttributeName</span>: <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">17</span>)], context: <span class="literal">nil</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> height: <span class="type">CGFloat</span> = <span class="number">10</span> + <span class="number">40</span> + ceil(rect.height) + <span class="number">4</span> + <span class="number">15</span> + <span class="number">17</span> + <span class="number">15</span></div><div class="line">    <span class="keyword">return</span> ceil(height)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着我们在 <code>FeedBaseCell</code> 的初始化方法中将 subviews 实例添加到 contentView.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="keyword">init</span>(style: <span class="type">UITableViewCellStyle</span>, reuseIdentifier: <span class="type">String</span>?) &#123;</div><div class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(style: style, reuseIdentifier: reuseIdentifier)</div><div class="line">    contentView.addSubview(avatarImageView)</div><div class="line">    contentView.addSubview(nickNameLabel)</div><div class="line">    contentView.addSubview(categoryButton)</div><div class="line">    contentView.addSubview(messageTextView)</div><div class="line">    contentView.addSubview(leftBottomLabel)</div><div class="line">    contentView.addSubview(messageCountLabel)</div><div class="line">    contentView.addSubview(discussionImageView)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而 <code>FeedAnyImagesCell</code> 和 <code>FeedBigImageCell</code> 都继承自 <code>FeedBaseCell</code>. 我们重写其父类的 heightOfFeed 方法.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeedAnyImagesCell</span>: <span class="title">FeedBaseCell</span>  </span>&#123;</div><div class="line">    <span class="comment">// 显示 images 的视图创建省略.</span></div><div class="line">    <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">heightOfFeed</span>(<span class="title">feed</span>: <span class="title">Feed</span>) -&gt; <span class="title">CGFloat</span> </span>&#123;</div><div class="line">        <span class="keyword">let</span> height = <span class="keyword">super</span>.heightOfFeed(feed: feed) + </div><div class="line">        <span class="type">Config</span>.<span class="type">FeedAnyImagesCell</span>.imageSize.height + <span class="number">15</span></div><div class="line">         <span class="keyword">return</span> ceil(height)</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeedBiggerImageCell</span>: <span class="title">FeedBaseCell</span> </span>&#123;</div><div class="line">    <span class="comment">// 显示 image 的视图创建省略.</span></div><div class="line">    <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">heightOfFeed</span>(<span class="title">feed</span>: <span class="title">Feed</span>) -&gt; <span class="title">CGFloat</span> </span>&#123;</div><div class="line">        <span class="keyword">let</span> height = <span class="keyword">super</span>.heightOfFeed(feed: feed) + </div><div class="line">         <span class="type">Config</span>.<span class="type">FeedBiggerImageCell</span>.imageSize.height + <span class="number">15</span></div><div class="line">        <span class="keyword">return</span> ceil(height)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>三种样式的 cell 创建完成后, 我们需要定义一个 <code>FeedCellLayout</code> 的结构体, 用来封装不同 cell 类型所对应的 layout 布局.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FeedCellLayout</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> screenWidth = <span class="type">UIScreen</span>.main.bounds.width</div><div class="line">    <span class="comment">// 三种类型 cell 的公共元素.</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DefaultLayout</span> </span>&#123;</div><div class="line">        <span class="keyword">let</span> avatarImageViewFrame: <span class="type">CGRect</span></div><div class="line">        <span class="keyword">let</span> nicknameLabelFrame: <span class="type">CGRect</span></div><div class="line">        <span class="keyword">let</span> categoryButtonFrame: <span class="type">CGRect</span></div><div class="line">        <span class="keyword">let</span> messageTextViewFrame: <span class="type">CGRect</span></div><div class="line">        <span class="keyword">let</span> leftBottomLabelFrame: <span class="type">CGRect</span></div><div class="line">        <span class="keyword">let</span> messageCountLabelFrame: <span class="type">CGRect</span></div><div class="line">        <span class="keyword">let</span> discussionImageViewFrame: <span class="type">CGRect</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> defaultLayout: <span class="type">DefaultLayout</span></div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiggerImageLayout</span> </span>&#123;</div><div class="line">        <span class="keyword">let</span> biggerImageViewFrame: <span class="type">CGRect</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> biggerImageLayout: <span class="type">BiggerImageLayout</span>?</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">AnyImagesLayout</span> </span>&#123;</div><div class="line">        <span class="keyword">let</span> mediaCollectionViewFrame: <span class="type">CGRect</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> anyImagesLayout: <span class="type">AnyImagesLayout</span>?</div><div class="line">    </div><div class="line">    <span class="comment">// cell的高度</span></div><div class="line">    <span class="keyword">var</span> height: <span class="type">CGFloat</span> = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="comment">// init</span></div><div class="line">    <span class="keyword">init</span>(feed: <span class="type">Feed</span>) &#123;</div><div class="line">         <span class="comment">/* init 方法中接受一个 feed 实例,</span></div><div class="line">           我们通过此实例中的附件类型来调用响应的计算cell高度.</div><div class="line">         */</div><div class="line">        <span class="keyword">switch</span> feed.attachment &#123;</div><div class="line">        <span class="keyword">case</span> .<span class="type">Text</span>:</div><div class="line">            height = <span class="type">FeedBaseCell</span>.heightOfFeed(feed: feed)</div><div class="line">        <span class="keyword">case</span> .<span class="type">Image</span>(<span class="keyword">let</span> imagesAttachments):</div><div class="line">            printLog(imagesAttachments)</div><div class="line">            <span class="keyword">if</span> imagesAttachments.<span class="built_in">count</span> &gt; <span class="number">1</span> &#123;</div><div class="line">                height = <span class="type">FeedAnyImagesCell</span>.heightOfFeed(feed: feed)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                height = <span class="type">FeedBiggerImageCell</span>.heightOfFeed(feed: feed)</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 接下来就是根据 Feed 实例所携带的各种信息, 来计算 defaultLayout, </span></div><div class="line">        <span class="comment">// biggerImageLayout, anyImagesLayout </span></div><div class="line">        <span class="keyword">let</span> avatarImageViewFrame = <span class="type">CGRect</span>(x: <span class="number">15</span>, y: <span class="number">10</span>, width: <span class="number">40</span>, height: <span class="number">40</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> nicknameLabelFrame: <span class="type">CGRect</span></div><div class="line">        <span class="keyword">let</span> categoryButtonFrame: <span class="type">CGRect</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> category = <span class="type">FeedCategory</span>(rawValue: feed.category) &#123;</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> rect = (category.rawValue <span class="keyword">as</span> <span class="type">NSString</span>).boundingRect(with: </div><div class="line">            <span class="type">CGSize</span>(width: <span class="number">320</span>, height: <span class="type">CGFloat</span>(<span class="type">FLT_MAX</span>)), options: </div><div class="line">            [.usesLineFragmentOrigin, .usesFontLeading], attributes: </div><div class="line">            <span class="type">Config</span>.<span class="type">FeedDetailCell</span>.categryButtonAttributies, context: <span class="literal">nil</span>)</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> categoryButtonWidth = ceil(rect.width) + <span class="number">20</span></div><div class="line">            </div><div class="line">            categoryButtonFrame = <span class="type">CGRect</span>(x: screenWidth - categoryButtonWidth - </div><div class="line">            <span class="number">15</span>, y: <span class="number">19</span>, width: categoryButtonWidth, height: <span class="number">22</span>)</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> nickNameLabelwidth = screenWidth - <span class="number">65</span> - <span class="number">15</span></div><div class="line">            nicknameLabelFrame = <span class="type">CGRect</span>(x: <span class="number">65</span>, y: <span class="number">21</span>, width: nickNameLabelwidth,</div><div class="line">             height: <span class="number">18</span>)</div><div class="line">            </div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">let</span> nickNameLabelwidth = screenWidth - <span class="number">65</span> - <span class="number">15</span></div><div class="line">            nicknameLabelFrame = <span class="type">CGRect</span>(x: <span class="number">65</span>, y: <span class="number">21</span>, width: nickNameLabelwidth, </div><div class="line">            height: <span class="number">18</span>)</div><div class="line">            categoryButtonFrame = <span class="type">CGRect</span>.zero</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> rect1 = (feed.contentBody! <span class="keyword">as</span> <span class="type">NSString</span>).boundingRect(with: </div><div class="line">        <span class="type">CGSize</span>(width: <span class="type">FeedBaseCell</span>.messageTextViewMaxWidth, height: </div><div class="line">        <span class="type">CGFloat</span>(<span class="type">FLT_MAX</span>)), options: [.usesFontLeading, .usesLineFragmentOrigin], </div><div class="line">        attributes: <span class="type">Config</span>.<span class="type">FeedDetailCell</span>.messageTextViewAttributies, context: </div><div class="line">        <span class="literal">nil</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> messageTextViewHeight = ceil(rect1.height)</div><div class="line">        <span class="keyword">let</span> messageTextViewFrame = <span class="type">CGRect</span>(x: <span class="number">65</span>, y: <span class="number">54</span>, width: screenWidth - <span class="number">65</span> - </div><div class="line">        <span class="number">15</span>, height: messageTextViewHeight)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> leftBottomLabelOriginY = height - <span class="number">17</span> - <span class="number">15</span></div><div class="line">        <span class="keyword">let</span> leftBottomLabelFrame = <span class="type">CGRect</span>(x: <span class="number">65</span>, y: leftBottomLabelOriginY, width: </div><div class="line">        screenWidth - <span class="number">65</span> - <span class="number">85</span>, height: <span class="number">17</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> messageCountLabelWidth: <span class="type">CGFloat</span> = <span class="number">30</span></div><div class="line">        <span class="keyword">let</span> messageConuntLabelFrame = <span class="type">CGRect</span>(x: screenWidth - </div><div class="line">        messageCountLabelWidth - <span class="number">39</span> - <span class="number">8</span>, y: leftBottomLabelOriginY, width: </div><div class="line">        messageCountLabelWidth, height: <span class="number">19</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> discussionImageViewFrame = <span class="type">CGRect</span>(x: screenWidth - <span class="number">24</span> - <span class="number">15</span>, y: </div><div class="line">        leftBottomLabelOriginY - <span class="number">1</span>, width: <span class="number">24</span>, height: <span class="number">20</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> defaultLayout = <span class="type">FeedCellLayout</span>.<span class="type">DefaultLayout</span>(</div><div class="line">            avatarImageViewFrame: avatarImageViewFrame,</div><div class="line">            nicknameLabelFrame: nicknameLabelFrame,</div><div class="line">            categoryButtonFrame: categoryButtonFrame,</div><div class="line">            messageTextViewFrame: messageTextViewFrame,</div><div class="line">            leftBottomLabelFrame: leftBottomLabelFrame,</div><div class="line">            messageCountLabelFrame: messageConuntLabelFrame,</div><div class="line">            discussionImageViewFrame: discussionImageViewFrame</div><div class="line">        )</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.defaultLayout = defaultLayout</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> beginY = messageTextViewFrame.maxY + <span class="number">15</span></div><div class="line">        </div><div class="line">        <span class="keyword">switch</span> feed.attachment &#123;</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> .<span class="type">Image</span>(<span class="keyword">let</span> imagesAttachments):</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> imagesAttachments.<span class="built_in">count</span> &gt; <span class="number">1</span> &#123;</div><div class="line">                </div><div class="line">                <span class="keyword">let</span> mediaCollectionViewFrame = <span class="type">CGRect</span>(origin: <span class="type">CGPoint</span>(x:<span class="number">65</span>, y:</div><div class="line">                 beginY), size: <span class="type">Config</span>.<span class="type">FeedAnyImagesCell</span>.mediaCollectionViewSize)</div><div class="line">                </div><div class="line">                <span class="keyword">self</span>.anyImagesLayout = <span class="type">AnyImagesLayout</span>(mediaCollectionViewFrame: </div><div class="line">                mediaCollectionViewFrame)</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> imagesAttachments.<span class="built_in">count</span> == <span class="number">1</span> &#123;</div><div class="line">                </div><div class="line">                <span class="keyword">let</span> biggerImageViewFrame = <span class="type">CGRect</span>(origin: <span class="type">CGPoint</span>(x: <span class="number">65</span>, y: </div><div class="line">                beginY), size: <span class="type">Config</span>.<span class="type">FeedBiggerImageCell</span>.imageSize)</div><div class="line">                <span class="keyword">let</span> biggerImageLayout = <span class="type">BiggerImageLayout</span>(biggerImageViewFrame: </div><div class="line">                biggerImageViewFrame)</div><div class="line">                <span class="keyword">self</span>.biggerImageLayout = biggerImageLayout</div><div class="line">            </div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>接下来我们来设计缓存逻辑, 我们定义个结构体, 外部只需要传入 Feed 实例, 就能正确得到其对应的 Layout 布局.  </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LayoutCatch</span> </span>&#123;</div><div class="line">    <span class="comment">// 定义一个字典, 存储 feed 对应的 FeedCellLayout,   用 feed 的 bjectID 做 key</span></div><div class="line">    <span class="keyword">var</span> feedCellLayoutHash = [<span class="type">String</span>: <span class="type">FeedCellLayout</span>]()</div><div class="line">    </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">feedCellLayoutOfFeed</span><span class="params">(feed: Feed)</span></span> -&gt; <span class="type">FeedCellLayout</span> &#123;</div><div class="line">        <span class="keyword">let</span> key = feed.objectId ?? <span class="string">""</span></div><div class="line">    </div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> layout = feedCellLayoutHash[key] &#123;</div><div class="line">            <span class="keyword">return</span> layout</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">let</span> layout = <span class="type">FeedCellLayout</span>(feed: feed)</div><div class="line">            updateFeedCellLayout(layout: layout, forFeed: feed)</div><div class="line">            <span class="keyword">return</span> layout</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">updateFeedCellLayout</span><span class="params">(layout: FeedCellLayout, forFeed feed: Feed)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> key = feed.objectId ?? <span class="string">""</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> !key.isEmpty &#123;</div><div class="line">            <span class="type">FeedCellLayoutHash</span>[key] = layout</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">heightOfFeed</span><span class="params">(feed: Feed)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</div><div class="line">        <span class="keyword">let</span> layout = <span class="type">FeedCellLayoutOfFeed</span>(feed: feed)</div><div class="line">        <span class="keyword">return</span> layout.height</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>缓存逻辑完成之后, 我们为三种不同的 cell 样式分别添加 <code>configureWithFeed(feed: Feed, layout: FeedCellLayout, needshowCategory: Bool)</code> 的方法, 将计算好的 layout 应用到 cell.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//FeedBaseCell</span></div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">configureWithFeed</span><span class="params">(feed: Feed, layout: FeedCellLayout, needshowCategory: </span></span></div><div class="line"> Bool) &#123;</div><div class="line">        <span class="keyword">self</span>.feed = feed</div><div class="line">        <span class="keyword">let</span> defaultLayout = layout.defaultLayout</div><div class="line">        </div><div class="line">        messageTextView.text = <span class="string">"<span class="subst">\(feed.contentBody!)</span>"</span>           </div><div class="line">        messageTextView.frame = defaultLayout.messageTextViewFrame</div><div class="line">        </div><div class="line">        nickNameLabel.text = feed.creator?.username ?? <span class="string">"iTychooo"</span></div><div class="line">        nickNameLabel.frame = defaultLayout.nicknameLabelFrame</div><div class="line">        </div><div class="line">        avatarImageView.image = <span class="type">UIImage</span>(named: <span class="string">"Howard"</span>)</div><div class="line">        avatarImageView.frame = defaultLayout.avatarImageViewFrame</div><div class="line">        </div><div class="line">        categoryButton.setTitle(feed.category, <span class="keyword">for</span>: .normal)</div><div class="line">        categoryButton.frame = defaultLayout.categoryButtonFrame</div><div class="line">        </div><div class="line">        </div><div class="line">        leftBottomLabel.text = <span class="string">"1小时前"</span></div><div class="line">        leftBottomLabel.frame = defaultLayout.leftBottomLabelFrame</div><div class="line">        discussionImageView.frame = defaultLayout.discussionImageViewFrame</div><div class="line">        </div><div class="line">        messageCountLabel.text = <span class="string">"10"</span></div><div class="line">        messageCountLabel.frame = defaultLayout.messageCountLabelFrame</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="comment">//biggerImageCell</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">configureWithFeed</span><span class="params">(feed: Feed, layout: FeedCellLayout, </span></span></div><div class="line">needshowCategory: Bool) &#123;</div><div class="line">        <span class="keyword">super</span>.configureWithFeed(feed: feed, layout: layout, needshowCategory: </div><div class="line">        needshowCategory)</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> biggerImageLayout = layout.biggerImageLayout &#123;</div><div class="line">            biggerImageView.frame = biggerImageLayout.biggerImageViewFrame</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">switch</span> feed.attachment &#123;</div><div class="line">        <span class="keyword">case</span> .<span class="type">Image</span>(<span class="keyword">let</span> imageAttachments):</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> attachment = imageAttachments.first &#123;</div><div class="line">                <span class="comment">//大图还是使用原始大小的图片.</span></div><div class="line">                imageAttachment = attachment</div><div class="line">                biggerImageView.showActivityIndicatorWhenLoading = <span class="literal">true</span></div><div class="line">                biggerImageView.cube_setImageAtFeedCellWithAttachment(attachment: </div><div class="line">                attachment, withSize: <span class="literal">nil</span>)</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line"><span class="comment">// FeedAnyImagesCell</span></div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">configureWithFeed</span><span class="params">(feed: Feed, layout: FeedCellLayout, </span></span></div><div class="line">    needshowCategory: Bool) &#123;</div><div class="line">        <span class="keyword">super</span>.configureWithFeed(feed: feed, layout: layout, needshowCategory: </div><div class="line">        needshowCategory)</div><div class="line">        </div><div class="line">        <span class="keyword">switch</span> feed.attachment &#123;</div><div class="line">        <span class="keyword">case</span> .<span class="type">Image</span>(<span class="keyword">let</span> imageAttachments):</div><div class="line">            <span class="keyword">self</span>.imageAttachments = imageAttachments</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> anyImagesLayout = layout.anyImagesLayout &#123;</div><div class="line">            mediaCollectionView.frame = anyImagesLayout.mediaCollectionViewFrame</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>最后, 我们在 TableViewController 的 <code>tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell</code> 方法中, 配置 cell 就可以了.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Section</span>: <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> uploadingFeed = <span class="number">0</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Feed</span></div><div class="line">    <span class="keyword">case</span> loadMore</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -</div><div class="line"> &gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> section = <span class="type">Section</span>(rawValue: indexPath.section) <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">fatalError</span>()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">cellForFeed</span><span class="params">(feed: Feed)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">switch</span> feed.attachment &#123;</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> .<span class="type">Text</span>:</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: </div><div class="line">            <span class="type">FeedBaseCellIdentifier</span>, <span class="keyword">for</span>: indexPath) <span class="keyword">as</span>! <span class="type">FeedBaseCell</span></div><div class="line">            cell.configureWithFeed(feed: feed, layout: </div><div class="line">            <span class="type">FeedsViewController</span>.layoutCatch.<span class="type">FeedCellLayoutOfFeed</span>(feed: feed), </div><div class="line">            needshowCategory: <span class="literal">false</span>)</div><div class="line">            <span class="keyword">return</span> cell</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> .<span class="type">Image</span>(<span class="keyword">let</span> imagesAttachments):</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> imagesAttachments.<span class="built_in">count</span>  &gt; <span class="number">1</span> &#123;</div><div class="line">                </div><div class="line">                <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: </div><div class="line">                <span class="type">FeedAnyImagesCellIdentifier</span>, <span class="keyword">for</span>: indexPath) <span class="keyword">as</span>! </div><div class="line">                <span class="type">FeedAnyImagesCell</span></div><div class="line">                </div><div class="line">                cell.configureWithFeed(feed: feed, layout: </div><div class="line">                <span class="type">FeedsViewController</span>.layoutCatch.<span class="type">FeedCellLayoutOfFeed</span>(feed: </div><div class="line">                feed), needshowCategory: <span class="literal">false</span>)</div><div class="line">                </div><div class="line">                <span class="keyword">return</span> cell</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: </div><div class="line">            <span class="type">FeedBiggerImageCellIdentifier</span>, <span class="keyword">for</span>: indexPath) <span class="keyword">as</span>! </div><div class="line">            <span class="type">FeedBiggerImageCell</span></div><div class="line">            </div><div class="line">            cell.configureWithFeed(feed: feed, layout: </div><div class="line">            <span class="type">FeedsViewController</span>.layoutCatch.<span class="type">FeedCellLayoutOfFeed</span>(feed: feed),</div><div class="line">             needshowCategory: <span class="literal">false</span>)</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> cell</div><div class="line">            </div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> <span class="type">UITableViewCell</span>()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">switch</span> section &#123;</div><div class="line">        </div><div class="line">    <span class="keyword">case</span> .uploadingFeed:</div><div class="line">        <span class="keyword">let</span> feed = uploadingFeeds[indexPath.row]</div><div class="line">        <span class="keyword">return</span> cellForFeed(feed: feed)</div><div class="line">        </div><div class="line">    <span class="keyword">case</span> .<span class="type">Feed</span>:</div><div class="line">        <span class="keyword">let</span> feed = feeds[indexPath.row]</div><div class="line">        <span class="keyword">return</span> cellForFeed(feed: feed)</div><div class="line">        </div><div class="line">    <span class="keyword">case</span> .loadMore:</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> tableView.dequeueReusableCell(withIdentifier: </div><div class="line">        <span class="type">LoadMoreTableViewCellIdentifier</span>, <span class="keyword">for</span>: indexPath)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OK, Done! </p>
<p>感谢 Yep 的团队开源如此优秀的代码, 我从中学到了很多. 在浏览了大量 commit 后, 也了解了一个项目从无到有的大概过程, 对于我这种半路出家的自学者, 受益颇多.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用-Swift-优雅的缓存-Cell-的行高与-subviews-的-frame&quot;&gt;&lt;a href=&quot;#使用-Swift-优雅的缓存-Cell-的行高与-subviews-的-frame&quot; class=&quot;headerlink&quot; title=&quot;使用 Swift 优
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>利用 Associated Objects 为 UIImageView 添加 activityIndicator</title>
    <link href="http://yoursite.com/2016/05/20/runtime/"/>
    <id>http://yoursite.com/2016/05/20/runtime/</id>
    <published>2016-05-20T07:21:37.000Z</published>
    <updated>2016-11-06T06:27:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>在实现类似与微博或者微信的 <code>timeline</code> 功能时, 往往需要在 <code>UITableViewCell</code> 中利用 <code>UIImageView</code> 展示单张或多张图片, 这些图片的来源通常都是网络. 而一旦网络速度不稳定, cell 中的 imageView 异步加载图片的过程就会一直显示 backgroundColor. 用户对图片正在下载的情况全然不知. 而像 <code>SDWebImage</code> 和 <code>Kingfisher</code> 这样的第三方框架很好的解决了这种问题: 一方面可以显示一张 placeholderImage, 也可以显示一个 <code>UIActivityIndicatorView</code> 让用户感受到下载的进程. </p>
<p>而实现 activityIndicatorView 的方法又有很多种, 我第一个想到的就是自定义一个 <code>UIView</code>, 在里面添加一个 <code>UIImageView</code> 和 一个 <code>UIActivityIndicatorView</code>. 之后使用这个自定义的 view 就可以很好的完成任务. 而最近我在使用 <code>Kingfisher</code> 时, 发现它利用 分类 的功能结合 runtime 的特性, 直接为 <code>UIImageView</code> 添加一个 indicatorView 的实例变量. </p>
<p>通过 分类 -&gt; extension 不能添加新的实例变量,  但我们可以利用 runtime 的 Associated Objects 来弥补这一不足.<br><a id="more"></a></p>
<p>首先, 为 <code>UIImageView</code> 定义 extension, 为其添加 activityIndicator 的 set 和 get 方法. </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> activityIndicatorKey: <span class="type">Void</span>?</div><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> showActivityIndicatorWhenLoadingKey: <span class="type">Void</span>?</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIImageView</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> activityIndicator: <span class="type">UIActivityIndicatorView</span>? &#123;</div><div class="line">        <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, &amp;activityIndicatorKey) <span class="keyword">as</span>? </div><div class="line">        <span class="type">UIActivityIndicatorView</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setActivityIndicator</span><span class="params">(activityIndicator: UIActivityIndicatorView?)</span></span> &#123;</div><div class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, &amp;activityIndicatorKey, activityIndicator,</div><div class="line">        objc_AssociationPolicy.<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里我们简单说一下  <code>Associated Objects</code> -&gt; <code>关联对象</code> 是什么? 它本来是 <code>Objective - C 2.0</code> 运行时的一个特性, 上面代码所看到的 <code>objc_getAssociatedObject()</code> 与 <code>objc_setAssociatedObject</code> 允许你将任何键值在运行时关联到对象上的函数. 另外还有一个函数 <code>objc_removeAssociatedObjects</code>. 它们的主要功能就是对已经存在的类在扩展中添加自定义属性.</p>
<p>另外在上面定义的 set 方法中, 该实例的存储方式被定义为 <code>.OBJC_ASSOCIATION_RETAIN_NONATOMIC</code>, 它等价与 <code>@property (nonatomic, strong)</code> -&gt; 强引用, 不能被原子化使用. 而 <code>objc_AssociationPolicy</code> 是一个枚举类型, 它提供了多种方法来帮助你确定你定义的键值与对象之间的关联方式.</p>
<p>接着, 我们实现一个计算属性 <code>showActivityIndicatorWhenLoading</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> showActivityIndicatorWhenLoading: <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> result = objc_getAssociatedObject(<span class="keyword">self</span>, &amp;showActivityIndicatorWhenLoadingKey) <span class="keyword">as</span>? <span class="type">NSNumber</span> <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">            &#125;</div><div class="line">      </div><div class="line">            <span class="keyword">return</span> result.boolValue</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">set</span> &#123;</div><div class="line">            <span class="keyword">if</span> showActivityIndicatorWhenLoading == newValue &#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> newValue &#123;</div><div class="line">                <span class="keyword">let</span> indicator = <span class="type">UIActivityIndicatorView</span>(activityIndicatorStyle:</div><div class="line">                 <span class="type">UIActivityIndicatorViewStyle</span>.<span class="type">Gray</span>)</div><div class="line">                indicator.center = <span class="type">CGPoint</span>(x: <span class="type">CGRectGetMidX</span>(bounds), y:</div><div class="line">                 <span class="type">CGRectGetMidY</span>(bounds))</div><div class="line">                </div><div class="line">                indicator.hidden = <span class="literal">true</span></div><div class="line">                indicator.hidesWhenStopped = <span class="literal">true</span></div><div class="line">                addSubview(indicator)</div><div class="line">                </div><div class="line">                setActivityIndicator(indicator)</div><div class="line">                </div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                activityIndicator?.removeFromSuperview()</div><div class="line">                setActivityIndicator(<span class="literal">nil</span>)</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            objc_setAssociatedObject(<span class="keyword">self</span>, &amp;showActivityIndicatorWhenLoadingKey,</div><div class="line">             <span class="type">NSNumber</span>(bool: newValue),</div><div class="line">             objc_AssociationPolicy.<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在其 set 方法中, 初始化 indicatorView , 利用之前代码段定义的 <code>setActivityIndicator</code> 方法. 将这个 indicatorView 与 imageView 对象关联.  并在最后,利用 <code>objc_setAssociatedObject</code> 将 <code>showActivityIndicatorWhenLoading</code> -&gt; 是否正在加载图片的 bool 值与 imageView 对象关联. </p>
<p>在 get 方法中, 我们利用 <code>objc_getAssociatedObject</code> 去拿到之前存储的 bool 值.</p>
<p>至此, 我们对 <code>UIImageView</code> 的 extension 就已经完成了. 接下来看看实际使用中的代码.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// ImageAttachment 是一个枚举类型, 其中包括下载 image 的 URLString</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">cube_setImageAtFeedCellWithAttachment</span><span class="params">(attachment: ImageAttachment, withSize size: CGSize?)</span></span> &#123;</div><div class="line">       </div><div class="line">       <span class="keyword">guard</span> <span class="keyword">let</span> attachmentURL = <span class="type">NSURL</span>(string: attachment.<span class="type">URLString</span>) <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">return</span></div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       <span class="comment">/// 这段代码会调用 showActivityIndicatorWhenLoading 的 set 方法</span></div><div class="line">       <span class="comment">/// 初始化 indicatorView</span></div><div class="line">        showActivityIndicatorWhenLoading = <span class="literal">true</span></div><div class="line">      </div><div class="line">       <span class="keyword">if</span> showActivityIndicatorWhenLoading &#123;</div><div class="line">       	 <span class="comment">/// 我们已经可以直接访问 ImageView 的 activityIndicator 实例了.</span></div><div class="line">          activityIndicator?.hidden = <span class="literal">false</span></div><div class="line">          activityIndicator?.startAnimating()</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       setImageAttachmentURL(attachmentURL)</div><div class="line">       </div><div class="line">       <span class="type">ImageCache</span>.shardInstance.imageOfAttachment(attachment, withSideLenght: size?.width)</div><div class="line">        &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (url, image, cacheType) <span class="keyword">in</span></div><div class="line">       </div><div class="line">           <span class="keyword">guard</span> <span class="keyword">let</span> strongSelf = <span class="keyword">self</span>, <span class="keyword">let</span> attachmentURL = strongSelf.imageAttachmentURL <span class="keyword">where</span> attachmentURL == url <span class="keyword">else</span> &#123;</div><div class="line">               <span class="keyword">return</span></div><div class="line">           &#125;</div><div class="line">           </div><div class="line">           <span class="keyword">if</span> cacheType != .<span class="type">Memory</span> &#123;</div><div class="line">               <span class="type">UIView</span>.transitionWithView(strongSelf, duration: <span class="number">0.2</span>, </div><div class="line">               options: .<span class="type">TransitionCrossDissolve</span>, animations: &#123; </div><div class="line">                   strongSelf.image = image</div><div class="line">                   &#125;, completion: <span class="literal">nil</span>)</div><div class="line">           &#125;</div><div class="line">           </div><div class="line">           strongSelf.image = image</div><div class="line">           <span class="comment">/// 图片从缓存或者下载完成后, 停止 activityIndicator 的旋转</span></div><div class="line">           strongSelf.activityIndicator?.stopAnimating()</div><div class="line">       &#125;</div><div class="line">    </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>Ok, 上面的代码也非常好理解. 我在关键的位置已经添加了注释. 其实这是一个非常简单的功能实现. 我作为一个初学者第一次了解了 runtime 的实际应用场景. 其实像介绍 runloop 以及 runtime 这些特性的文章看过不少, 但一直不太确定其应用场景到底是什么. 最近的这个小发现让我亢奋了好几天, 所以分享给正在学习 iOS 开发的朋友. 或许可以借此契机对 runtime 做深入了解.</p>
<h4 id="参考及推荐阅读"><a href="#参考及推荐阅读" class="headerlink" title="参考及推荐阅读:"></a>参考及推荐阅读:</h4><p><a href="http://nshipster.cn/associated-objects/" target="_blank" rel="external">http://nshipster.cn/associated-objects/</a>   来自 NSHipster </p>
<p><a href="http://blog.leichunfeng.com/blog/2015/06/26/objective-c-associated-objects-implementation-principle/" target="_blank" rel="external">http://blog.leichunfeng.com/blog/2015/06/26/objective-c-associated-objects-implementation-principle/</a>  来自雷纯峰的技术博客</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在实现类似与微博或者微信的 &lt;code&gt;timeline&lt;/code&gt; 功能时, 往往需要在 &lt;code&gt;UITableViewCell&lt;/code&gt; 中利用 &lt;code&gt;UIImageView&lt;/code&gt; 展示单张或多张图片, 这些图片的来源通常都是网络. 而一旦网络速度不稳定, cell 中的 imageView 异步加载图片的过程就会一直显示 backgroundColor. 用户对图片正在下载的情况全然不知. 而像 &lt;code&gt;SDWebImage&lt;/code&gt; 和 &lt;code&gt;Kingfisher&lt;/code&gt; 这样的第三方框架很好的解决了这种问题: 一方面可以显示一张 placeholderImage, 也可以显示一个 &lt;code&gt;UIActivityIndicatorView&lt;/code&gt; 让用户感受到下载的进程. &lt;/p&gt;
&lt;p&gt;而实现 activityIndicatorView 的方法又有很多种, 我第一个想到的就是自定义一个 &lt;code&gt;UIView&lt;/code&gt;, 在里面添加一个 &lt;code&gt;UIImageView&lt;/code&gt; 和 一个 &lt;code&gt;UIActivityIndicatorView&lt;/code&gt;. 之后使用这个自定义的 view 就可以很好的完成任务. 而最近我在使用 &lt;code&gt;Kingfisher&lt;/code&gt; 时, 发现它利用 分类 的功能结合 runtime 的特性, 直接为 &lt;code&gt;UIImageView&lt;/code&gt; 添加一个 indicatorView 的实例变量. &lt;/p&gt;
&lt;p&gt;通过 分类 -&amp;gt; extension 不能添加新的实例变量,  但我们可以利用 runtime 的 Associated Objects 来弥补这一不足.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Stack View 的开始</title>
    <link href="http://yoursite.com/2016/03/17/Stack-View%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>http://yoursite.com/2016/03/17/Stack-View的开始/</id>
    <published>2016-03-17T10:06:25.000Z</published>
    <updated>2016-08-05T05:28:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名刚刚入门 iOS 开发的人来说，理解并熟练使用 Auto Layhout 非常重要。开始接触自动布局是非常困难和复杂的，布局一个视图通常需要添加非常多的约束<code>constraints</code>，尤其是在创建动态视图时，我们要不断的重复添加和删除约束以达到我们想要的效果。而使用 <code>Stack View</code> 可以很大程度上简化我们频繁调试约束的过程。</p>
<p>通常,我们在创建用户界面的时候很多视图是程<code>线性</code>排列的。以下面这个界面为例，界面中包括非常多的子视图<code>UILabel</code>，它们是垂直<code>vertically</code>线性排列的。</p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 3.06.19 PM.png" alt="示例"><br><a id="more"></a><br>当用户界面像上图这样程线性排列的时候，就可以考虑使用<strong>Stack View</strong>了，它是一个<strong>UIStackView</strong>的实例，用来创建垂直或水平的布局。不仅简单实现布局，而且可以帮助你管理不同 View 的各种约束。在理想状态下，你还可以将另外一个 StackView 嵌入到 StackView 中，得益于这个特性，我们可以极大的缩减在布局用户界面时花费的时间。</p>
<p>接下来，我们将创建一个对用某个 model 元素的 Detail 视图来了解一些关于<strong>Stack View</strong>的特性。<br>首先，创建一个新的项目，从库中拖拽一个<code>Vertical Stack View</code> 到 Storyboard 中默认的 ViewController 中。<br><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 3.32.30 PM.png" alt=""></p>
<p>为其添加 leading 和 trailing margins 的约束，以及 top 和 bottom 的约束，边距可以设置为 8 point。让它充分填满屏幕。<br><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 3.37.14 PM.png" alt=""></p>
<p>拖拽四个 <strong>UILabel</strong> 到刚刚创建的 <strong>StackView</strong> 中。<br><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 3.41.27 PM.png" alt=""></p>
<p>你会发现所有的 Label 四周都被标记红色辅助线（在 Auto Layout 中的错误提示），在这里意味着这些 Label 存在不明朗的垂直布局。我们有两种方式解决这个问题，既可以使用 Auto Layuout，也可以通过修改 StackView 的一些属性。这里我们先尝试使用 Auto Layout 来解决这个问题，同时方便理解一些用好 Auto Layout 必备的知识点。</p>
<p>解决这个问题我们先要理解一个基本概念，叫做<code>intrinsic content Size</code> ， 如果你没有指定某一个子视图的 width 和 height 的约束，那么这个视图将通过自身内容的大小来决定自己的大小。比如一个 UILabel， 当它需要被绘制在屏幕上时发现自己没有 width 和 height 的约束，那它将通过自己的字体大小，text 长度等属性自行判断自己的宽和高。但这会带来一个问题。试想如下图的这种状况： </p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 3.54.39 PM.png" alt="两个水平对齐的 UILabel"></p>
<p>如果这两个 Label 的 superView 发生变化，哪个 Label 会变得更宽？第一个？第二个？ 或者两个一起？</p>
<p>这个时候我们就需要使用每一个 View 都拥有的 <strong>content hugging priorities</strong> 和 <strong>content compression resistance priorities</strong> 来决定视图被拉伸或压缩的优先级。</p>
<ul>
<li>其包括下面四种优先级属性：</li>
<li>horizontal content hugging priority</li>
<li>vertical content hugging priority</li>
<li>horizontal content compression resistance priority</li>
<li>vertical content compression resistance priority</li>
</ul>
<p>对于上面水平对齐两个 Label， 如果其中一个 Label 的 <em>horizontal content hugging priority</em> 优先级更高，更不容易被拉伸，你可以想象优先级更高的 Label 内部有一种力量，像是一个皮筋，从两端向中心发力。在 superView 变宽的时候强迫自己 hold 住现在的身段。</p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 4.22.11 PM.png" alt="Screen Shot 2016-03-17 at 4.22.11 P"></p>
<p>现在你已经对 <em>content hugging priority</em> 有了简单的了解，我们现在来思考一下 <em>content compression resistance priority</em> 的作用，它决定了一个 View 有多大的力量抵抗被压扁。</p>
<p>同样是上面两个水平对齐的 Label。这次的场景不是 superView 变宽，而是变窄了，哪个 Label 会被压缩？</p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 4.32.10 PM.png" alt="Screen Shot 2016-03-17 at 4.32.10 P"></p>
<p>如果其中一个 Label 拥有更高的 <em>content compression resistance priority</em> 优先级，那么它将更能抵抗住被压扁，对于 Label 来说，更不容易出现上图那样文字显示不全的情况。</p>
<p>好啦，针对 View 的 模糊约束介绍到这里，有了这个概念，解决最开始 四个 Lable 的问题就变的很简单了。<br>我们选择<strong>Date Created</strong> label 打开它的 <strong>size inspector</strong> 界面，也可以使用快捷键 <em>option + cmd + 5</em> 在这里就可以看到关于这个 view 的压缩和拉伸优先级设置的界面了，这里 xcode 已经设置了相同的默认数值。</p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 4.46.46 PM.png" alt="Screen Shot 2016-03-17 at 4.46.46 P"></p>
<p>我们修改 <em>Vertical Content Hugging Priority</em> 值为 249， 这样，它上面的另外三个 label 就拥有了同样且更高的优先级，意味着它们三个更有力量保持自己本身的高度，而 <strong>Data Created</strong> label 因为自己的力量不够，会被用来填充剩余的屏幕空间。</p>
<p>修改之后，视图布局自动变成下图的状态。<br><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 4.51.48 PM.png" alt="Screen Shot 2016-03-17 at 4.51.48 P"></p>
<p>Ok，问题解决了，接下来我们来看看如何利用 <strong>Stack View</strong> 的特性来解决同样的问题，其实 stack view 拥有一个属性来决定它的子视图的布局样式。</p>
<p>从 storyboard 中选择我们的 stack view（可以在 ViewController 上使用快捷键 <em>shift + cmd + 鼠标右键</em> 来选中）打开它的 <em>attributes inspector</em> 界面，找到最顶部的 <strong>Stack View</strong> 的 section 中的 <strong>Distribution</strong> 属性。</p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 5.03.01 PM.png" alt="Screen Shot 2016-03-17 at 5.03.01 P"></p>
<p>默认的布局方式为 <strong>Fill</strong>，它会让其所有的子视图按照其自身的内容大小来决定布局的样式。我们修改它的值为 <strong>*Fill Equally</strong> ，从结果就可以看到，四个 Label 拥有了一样的高度，<em>Fill Equally 会忽略其子视图的自身内容大小来屏幕划分区域</em></p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 5.06.52 PM.png" alt="Screen Shot 2016-03-17 at 5.06.52 P"></p>
<p>我们重新 <strong>Distribution</strong> 属性为 <strong>Fill</strong>， 这是接下面我们要使用的布局方式。</p>
<p>对于 <strong>Stack View</strong> 来说，最重要的特性就是嵌套，一个 stack view 可以被加入到另外一个 stack view， 在创建复杂的用户界面时，这样的特性非常实用。接下来我们继续丰富我们的界面。</p>
<p>在最顶部的三个 UILabel 的右边都有一个 TextField，我们先完成第一个 <strong>Name Label</strong>。首先选择 <strong>Name Label</strong>， 选择在 canvas 中右下角的 Auto Layout constraints 菜单中最左边的选项。它会将你选中的视图嵌入到一个新的 stack view。</p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 5.13.25 PM.png" alt="Screen Shot 2016-03-17 at 5.13.25 P"></p>
<p>选择新的 stack view， 打开它的 <em>attributes inspector</em> 界面，其默认的 Axis 布局方向是 <strong>vertical</strong>， 我们修改为 <strong>horizontal</strong>。</p>
<p>从库中拖拽一个 <strong>Text Field</strong> 到 <strong>Name Label</strong> 的右边。<br><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 5.18.39 PM.png" alt="Screen Shot 2016-03-17 at 5.18.39 P"><br>默认设置下，Name Label 拥有更高的 <em>Horizontal content hugging priority</em> 所以，你会看到 Name Label 保持住了自己的宽度，而 text field 被用来填充剩余的空间。而它们的 <em>content compression resistance priority</em> 默认情况下是相同的，这会导致在屏幕宽度变窄的时候，Name Label 仅有的小身板被压缩，我们不希这种情况发生。所以我们要降低 text field 的 <em>Horizontal content compression resistance priority</em> 值，修改为 749。 让 Name Label 有更大的力量抵抗被压扁。</p>
<p>接下来，我们希望 name label 和 text field 之间有些间隔，这样看起来会更舒服。 Stack view 可以自定义其中子视图的间隔。</p>
<p>选择 name label 和 text field 所在的 stack view， 打开 <em>attributes inspector</em>，修改其中的 <strong>Spacing</strong> 为 8 points。注意 text field 会自动缩短，这是因为它抵抗被压缩的能力更低。</p>
<p>接下来，我们将 serial 和 value label 也用同样的方法为期配对 text field。<br><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 5.47.57 PM.png" alt="Screen Shot 2016-03-17 at 5.47.57 P"></p>
<p>添加完成后我们仍然需要进行一些微调，首先我们需要让垂直布局的 stack view 也拥有一些间距，并且三个 label 对应的 text filed 并没有对齐。</p>
<p>选择垂直的 stack view， 也就是我们最开始创建的那个，修改其 <em>Spacing</em> 为 8 point。 选择 Date Created label， 修改其文本排列样式为居中。</p>
<p>接下来是 text field 没有对齐的问题了，其实，stack view 实质上的作用就是用来减少 constraints 的的设置，但某些 constraints 仍然很重要。造成没有对齐的原因就是 text field 前面的 label 的宽度并不一致，而间隔我们设置为同样的数值 8。解决这个问题，我们需要在三个 text field 上添加 leading edge 的约束。</p>
<p>按住 <em>Ctrl</em> 从 Name text field 拖拽到 Serial text field 选择 Leading， 然后对 Serial text field 和 Value text field 做同样的约束添加。 It’s Done!</p>
<p><img src="http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 5.57.15 PM.png" alt="Screen Shot 2016-03-17 at 5.57.15 P"></p>
<p>Stack view 允许你创建非常复杂的用户界面同时又非常便捷高效，不要忘记很多时候 contraints 仍然需要添加，但更多的约束是有 stack view 来管理，而不是你自己。Stack view 还允许你创建动态的用户界面。你可以使用 <strong>addArrangedSubView（_:</strong> ，<strong>insertArrangedSubview(_:atIndex:)</strong>，<strong>removeArrangedSubview(_:atIndex:)</strong> 在 stack view 中添加或者删除某个 view。也可以设置 view 的 hidden 属性 让某个 view 出现和消失，stack view 会识别这个状态，并自动重新布局。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一名刚刚入门 iOS 开发的人来说，理解并熟练使用 Auto Layhout 非常重要。开始接触自动布局是非常困难和复杂的，布局一个视图通常需要添加非常多的约束&lt;code&gt;constraints&lt;/code&gt;，尤其是在创建动态视图时，我们要不断的重复添加和删除约束以达到我们想要的效果。而使用 &lt;code&gt;Stack View&lt;/code&gt; 可以很大程度上简化我们频繁调试约束的过程。&lt;/p&gt;
&lt;p&gt;通常,我们在创建用户界面的时候很多视图是程&lt;code&gt;线性&lt;/code&gt;排列的。以下面这个界面为例，界面中包括非常多的子视图&lt;code&gt;UILabel&lt;/code&gt;，它们是垂直&lt;code&gt;vertically&lt;/code&gt;线性排列的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrfzx.com1.z0.glb.clouddn.com/2016-03-17-Screen Shot 2016-03-17 at 3.06.19 PM.png&quot; alt=&quot;示例&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CS193P 第五课笔记</title>
    <link href="http://yoursite.com/2016/03/16/CS193P-%E7%AC%AC%E4%BA%94%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/03/16/CS193P-第五课笔记/</id>
    <published>2016-03-16T07:44:00.000Z</published>
    <updated>2016-03-16T07:59:29.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="类型转换-Objective-C-和-Swift"><a href="#类型转换-Objective-C-和-Swift" class="headerlink" title="类型转换 Objective-C 和 Swift"></a>类型转换 Objective-C 和 Swift</h5><p>在 iOS 开发使用 Swift 时， 经常会遇到需要调用<code>Objective-C</code> 类方法的情况，苹果已经将几乎所有的<code>Objective－C</code>的API都已经无缝的转接到了 Swift，同时一些特别的类型也做了桥接，桥接意味着可以随意进行转换。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="type">Let</span> aString = (aString <span class="keyword">as</span> <span class="type">NSString</span>).lenght </div><div class="line">(anArray <span class="keyword">as</span> <span class="type">NSArray</span>).componentsJoinedByString(<span class="type">NSString</span>)</div><div class="line"><span class="comment">/**</span></div><div class="line">* Array 桥接到了 NSArray。对应的是AnyObject的数组。*</div><div class="line">* Dictionary 桥接到了 NSDictionary 对应的是 [NSObject：AnyObject]</div><div class="line">* Int, Float Double, Bool  都桥接到了 NSNumber （反过来不适用）</div><div class="line">* 如果需要从 NSNumber 对象中获取某个类型需要用 doubleValue，intValue 等。</div><div class="line">*/</div></pre></td></tr></table></figure></p>
<p>利用这种<code>括弧 + as</code>的方法可以直接调用<code>Objective-C</code>的方法， 同时实现了自动的类型转换，比如上面的例子，<code>lenght</code>是<code>NSString</code>的方法， 我们可直接在一行代码中将<code>String</code> 转换成<code>NSString</code>并调用其方法。<br><a id="more"></a><br><code>String Array</code> 和<code>Dictionary</code> 都是结构体，而不是类，但他们仍然可以对应 <code>AnyObject</code>，因为它们桥接到的<code>NS</code>类版本都是类。<br><code>Dictionary</code> 被桥接到了<code>NSDictionary -&gt; [NSObject：AnyObject]</code>。虽然Key值对应的并不是桥接的<code>NSString</code>,  但<code>NSString</code>继承自<code>NSObject</code> .</p>
<h5 id="typealias"><a href="#typealias" class="headerlink" title="typealias"></a>typealias</h5><p> 我们可以使用 typealias 关键字为某个类型声明别名。比如想让某个类型有特别的意思。例如<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typealias</span> <span class="type">AudioSample</span> = <span class="type">Int</span></div></pre></td></tr></table></figure></p>
<p>之后在代码中使用<code>Int</code>类型的话就可以直接使用别名<code>AudioSample</code>了。</p>
<h5 id="operation"><a href="#operation" class="headerlink" title="operation"></a>operation</h5><p> ++ 或 –放在前后的区别。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="keyword">prefix</span> = ++start </div><div class="line"><span class="comment">// prefix = 9 </span></div><div class="line"><span class="comment">// start = 9  </span></div><div class="line"><span class="keyword">let</span> <span class="keyword">postfix</span> = start++ </div><div class="line"><span class="comment">// postfix = 9 </span></div><div class="line"><span class="comment">// start = 10</span></div></pre></td></tr></table></figure></p>
<h5 id="Property-List"><a href="#Property-List" class="headerlink" title="Property List"></a>Property List</h5><p><code>Property List</code>表面上可以看作是 <code>AnyObject</code>， 它们是一组只有创建者才知道如何解释的数据，其包括的数据类型和<code>CoreData</code>中支持的数据类型类似，同时可以用于<code>泛型的数据结构</code>。<br>我们可以利用下列常用方法进行某些类型的存储：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">It can store/retrieve entire Property Lists by name (keys) …</div><div class="line">*/</div><div class="line">setObject(<span class="type">AnyObject</span>, forKey: <span class="type">String</span>)<span class="comment">// the AnyObject must be a Property List</span></div><div class="line">objectForKey(<span class="type">String</span>) -&gt; <span class="type">AnyObject</span>?</div><div class="line">arrayForKey(<span class="type">String</span>) -&gt; <span class="type">Array</span>&lt;<span class="type">AnyObject</span>&gt;? <span class="comment">// returns nil if value is not set or not an array</span></div><div class="line"><span class="comment">/**</span></div><div class="line">It can also store/retrieve little pieces of data …</div><div class="line">*/</div><div class="line">setDouble(<span class="type">Double</span>, forKey: <span class="type">String</span>)</div><div class="line">doubleForKey(<span class="type">String</span>) -&gt; <span class="type">Double</span> <span class="comment">// not an optional, returns 0 if no such key</span></div></pre></td></tr></table></figure></p>
<p><code>Property List</code>其中的一个使用场景就是<code>NSUserDefaults</code>，通常用来存储一些用户设置之类的小数据，因为性能问题，切记不要用来存储图片类的大数据。下面是使用 <code>NSUserDefault</code> 常用方法。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">使用类方法</div><div class="line"><span class="keyword">let</span> defaults = <span class="type">NSUserDefaults</span>.standardUserDefaults()</div><div class="line">读或写</div><div class="line"><span class="keyword">let</span> plist: <span class="type">AnyObject</span> = defaults.objectForKey(<span class="type">String</span>)</div><div class="line">defaults.setObject(<span class="type">AnyObject</span>, forKey: <span class="type">String</span>)</div><div class="line"><span class="comment">// AnyObject 必须是 PropertyList</span></div></pre></td></tr></table></figure></p>
<p>你在任何地方做的改变都会自动保存，而下面的方法会强制保存，比如在调试的时候直接在Xcode终止模拟器时，App是不会触发自动保存的，可以适时插入<code>synchronize</code>，进行强制保存。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> !defaults.synchronize() &#123;</div><div class="line"><span class="comment">//处理错误，能做的不多。</span></div></pre></td></tr></table></figure></p>
<h3 id="CGRect"><a href="#CGRect" class="headerlink" title="CGRect"></a>CGRect</h3><p>CGRect  在Swift 中是结构体，包括两个属性。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CGRect</span> </span>&#123;</div><div class="line">	<span class="keyword">var</span> origin: <span class="type">CGPoint</span></div><div class="line">	<span class="keyword">var</span> size: <span class="type">CGSize</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> rect = <span class="type">CGRect</span>(origin: aCGPoint, size: aCGRize) <span class="comment">// there are other inits as well</span></div></pre></td></tr></table></figure></p>
<p> CGRect 提供了很多便利的方法，帮助我们快速设置范围<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//<span class="doctag">TODO:</span></span></div></pre></td></tr></table></figure></p>
<h3 id="UIView"><a href="#UIView" class="headerlink" title="UIView"></a>UIView</h3><p>我们在开发过程经常需要自定义某个视图，比如需要绘制某些形状到屏幕上，或者希望通过与UIButton、Slider 不同的方式，让某个视图能够响应用户的某种触摸事件。这时候，就需要我们设计自己的UIView子类。</p>
<p>我们通过重写 UIView 的 drawRect（）方法，来实现在屏幕上的自定义绘制。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">drawRect</span><span class="params">(regionThatNeedsToBeDrawn: CGRect)</span></span></div></pre></td></tr></table></figure></p>
<p>在<code>drawRect()</code> 方法中， 我们既可以使用更接近底层的 C－Like API<code>Core Graphics</code>， 也可以使用面向对象的UIBezierPath类.</p>
<p>理所当然，这个方法会在视图初始化的时候即被调用，但当用户通过某个触摸事件更改了视图的某个属性，需要通知视图重新绘制时，<strong>不能直接调用子类的 <code>drawRect</code>方法</strong>，而是通过调用下面的方法来通知iOS某个视图需要重新绘制，系统会在合适的时间，调用<code>drawRect</code>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">setNeedsDisplay()</div><div class="line">setNeedsDisplayInRect(regionThatNeedsToBeRedrawn: <span class="type">CGRect</span>)</div></pre></td></tr></table></figure>
<p>在 drawRect 方法中进行绘制代码编写的时候,可参考下列顺序.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. 你需要拿到绘制的上下文`context`, 利用 `UIGraphicsGetCurrentContext()方法可以获得.</div><div class="line">2. 创建即将绘制的路径 Path, 通过线条和弧线或者类似的东西</div><div class="line">3. 设置绘制时的`attributes`, 比如:颜色,字体,textures, linwidths, linecaps. 等.</div><div class="line">4. 最后描边并且填充之前创建的路径 Path</div></pre></td></tr></table></figure></p>
<p>上面就是绘制的基本步骤, 不仅仅是绘制图片，文字也是如此，在知道字体的情况下，iOS 知道如何获得一个完美的路径来绘制漂亮的字母，并将其填充。</p>
<p>示例:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> path = <span class="type">UIBezierPath</span>()</div><div class="line"><span class="comment">//初始化之后就可以进行</span></div></pre></td></tr></table></figure></p>
<p> 如果需要绘制透明的颜色，需要将视图允许的属性设置成true，因为透明的系统资源<br> 你可以利用 UIBezierPath 来画一些比较复杂的图形<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//圆角矩形</div><div class="line">let rondRect = UIBezierPath(roundedRect: aCGRect, cornerRadius: aCGFloat)</div><div class="line">//椭圆</div><div class="line">let oval = UIBezierPath(ovalInRect: aCGRect)</div></pre></td></tr></table></figure></p>
<p> Clipping your drawing to a UIBezierPath’s path<br>你也可以剪切任意的 Path, 它意味着如果我设置好了,我有一个 Path, 我要剪切,如果我调用 addClip(), 那么在这之后的所有绘图操作只会影响到 Path 里面的部分.举个例子,比如你要在屏幕上画一张纸牌,纸牌有圆角的效果,所以你可以把纸牌画在一个大的矩形里面,然后剪切到一个圆角矩阵里,这样四个角就修圆了.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">addClip()</div></pre></td></tr></table></figure></p>
<p> Hit Detection<br>碰撞测试.判断某个坐标点是不是在 path 中.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">func containsPoint(CGPoint) -&gt; Bool </div><div class="line">// returns whether the point is inside the path</div><div class="line">The path must be closed. The winding rule can be set with userEvenOddFillRule property</div></pre></td></tr></table></figure></p>
<p>#####Drawing Text<br>我们通常使用UIKit的UILabel将字符呈现在屏幕上，但你同样可以通过<code>drawRect</code>进行字符的绘制。<br>我们需要用到 NSAttributedString 来描述字符的字体，颜色，大小，等等属性。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> text = <span class="type">NSAttributedString</span>(“hello”)</div><div class="line">text.drawAtPoint(aCGPoint)</div><div class="line"><span class="keyword">let</span> textSize: <span class="type">CGSize</span> = text.size</div><div class="line"><span class="comment">// how much space the string will take up 可以通过`text.size`拿到需要绘制字符的Size</span></div></pre></td></tr></table></figure>
<p>同时，NSAttributedString 还拥有一个可变类型，当需要动态的更改字符属性的时候使用。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> mutableText = <span class="type">NSMutableAttributedString</span>(“some string”)</div></pre></td></tr></table></figure>
<p>注意 NSAttributedString 不是 String 或者 NSString，我们需要通过它的<code>string</code> or <code>mutableString</code>来获取它的字符串。</p>
<p>创建NSAttributedString之后，我们就可以为字符串添加属性了</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setAttributes</span><span class="params">(attributes: Dictionary, range: NSRange)</span></span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">addAttributes</span><span class="params">(attributes: Dictionary, range: NSRange)</span></span></div><div class="line"><span class="comment">/**</span></div><div class="line">Warning! This is a pre-Swift API. NSRange is not a Range.And indexing into the string is using old-style indexing (not String.Index)</div><div class="line">*/</div></pre></td></tr></table></figure>
<p><em>这里可以展开讨论一下String.Index</em><br>字符的属性祖耀封装到字典中进行设置，我们常用到的属性包括：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="type">NSForegroundColorAttributeName</span> : <span class="type">UIColor</span></div><div class="line"><span class="type">NSStrokeWidthAttributeName</span> : <span class="type">CGFloat</span></div><div class="line"><span class="type">NSFontAttributeName</span> : <span class="type">UIFont</span></div><div class="line"><span class="comment">/**</span></div><div class="line">更多的信息可以查看文档，在NSAttributedString(NSStringDrawing) 下。</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>对于字符属性最重要的就是字体，自 iOS7 之后，苹果推出了动态调整全局字体大小的方案，如果需要让自己的App支持系统级的调整字体大小，我们就需要使用系统推荐的字体，我们可以通过下面的方法获取适合排版的字体样式。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">Get preferred font for a given text style (e.g. body, etc.) using this UIFont type method …</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">preferredFontForTextStyle</span>(<span class="title">UIFontTextStyle</span>) -&gt; <span class="title">UIFont</span></span></div><div class="line">/**</div><div class="line"><span class="title">Some</span> <span class="title">of</span> <span class="title">the</span> <span class="title">styles</span> (<span class="title">see</span> <span class="title">UIFontDescriptor</span> <span class="title">documentation</span> <span class="title">for</span> <span class="title">more</span>) …</div><div class="line">*/</div><div class="line"><span class="title">UIFontTextStyle</span>.<span class="title">Headline</span></div><div class="line"><span class="title">UIFontTextStyle</span>.<span class="title">Body</span></div><div class="line"><span class="title">UIFontTextStyle</span>.<span class="title">Footnote</span></div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">These appear usually on things like buttons</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">systemFontOfSize</span>(<span class="title">pointSize</span>: <span class="title">CGFloat</span>) -&gt; <span class="title">UIFont</span></span></div><div class="line"><span class="title">class</span> <span class="title">func</span> <span class="title">boldSystemFontOfSize</span>(<span class="title">pointSize</span>: <span class="title">CGFloat</span>) -&gt; <span class="title">UIFont</span></div><div class="line">/**</div><div class="line"><span class="title">Don</span>’<span class="title">t</span> <span class="title">use</span> <span class="title">these</span> <span class="title">for</span> <span class="title">your</span> <span class="title">user</span>’<span class="title">s</span> <span class="title">content</span>. <span class="title">Use</span> <span class="title">preferred</span> <span class="title">fonts</span> <span class="title">for</span> <span class="title">that</span>.</div><div class="line">你可以通过查看文档的<span class="title">UIFont</span>和<span class="title">UIFontDescriptor</span> 了解更多信息，但用到的不会太多。</div><div class="line">*/</div></pre></td></tr></table></figure>
<h5 id="Drawing-Image"><a href="#Drawing-Image" class="headerlink" title="Drawing Image"></a>Drawing Image</h5><p>和字符一样，通常我们需要在屏幕上呈现图片的时候会使用UIImageView，但是，你可能希望绘制某张图片到一个固定的范围，下面我们来看看如何在<code>drawRect</code>中创建UIImage对象。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> image: <span class="type">UIImage</span>? = <span class="type">UIImage</span>(named: “foo”) <span class="comment">// 这里的UIImage 是 optional</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">添加 foo.jpg 到你项目中的 Images.xcassets</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>你也可以将某个系统路径或者二进制数据作为UIImage的来源，图片的格式可以是：<code>jpg</code>,<code>png</code>,<code>tiff</code>等。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">But we haven’t talked about getting at ﬁles in the ﬁle system … anyway …)</div><div class="line">*/</div><div class="line"><span class="keyword">let</span> image: <span class="type">UIImage</span>? = <span class="type">UIImage</span>(contentsOfFile: aString)</div><div class="line"><span class="keyword">let</span> image: <span class="type">UIImage</span>? = <span class="type">UIImage</span>(data: anNSData）</div></pre></td></tr></table></figure>
<p>你还可以使用更底层的<code>Core Graphics</code> 创建图片，可从文档UIGraphicsBeginImageContext(CGSize) 中了解更详细的信息。</p>
<p>在创建UIImage之后，我们需要利用下面的方法进行屏幕中的定位和绘制。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> image: <span class="type">UIImage</span> =</div><div class="line">…</div><div class="line">image.drawAtPoint(aCGPoint）<span class="comment">//设置图片的位置（左上角）</span></div><div class="line">image.drawInRect(aCGRect)<span class="comment">//设置绘制的范围</span></div><div class="line">image.drawAsPatternInRect(aCGRect)</div><div class="line"><span class="comment">// tiles the image into aCGRect</span></div></pre></td></tr></table></figure>
<p>在绘制图片的时候，我们要考虑屏幕翻转带来的<code>bounds</code>变化，默认情况下，<code>bounds</code>改变后，View并不会重新绘制，其实UIView的<code>contentMode</code>属性可以帮助我们控制这种情况。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> contentMode: <span class="type">UIViewContentMode</span></div><div class="line"><span class="comment">/**</span></div><div class="line">contentMode 属性的关联值很多，我们可以将他们分成三个类别</div><div class="line">*/</div><div class="line"><span class="comment">//1. 不调整比例，只设置位置</span></div><div class="line">.<span class="type">Left</span></div><div class="line">.<span class="type">Right</span></div><div class="line">.<span class="type">Top</span></div><div class="line">.<span class="type">Botto</span></div><div class="line">.<span class="type">TopRight</span></div><div class="line">.<span class="type">BottomRight</span></div><div class="line">.<span class="type">BottomLeft</span></div><div class="line">.<span class="type">Center</span> </div><div class="line"><span class="comment">//2. 设置显示比例。 ScaleToFill是默认设置。</span></div><div class="line">.<span class="type">ScaleToFill</span></div><div class="line">.<span class="type">ScaleAspectFill</span></div><div class="line">.<span class="type">ScaleAspectFit</span></div><div class="line"><span class="comment">//3. 重新调用 drawRect 方法</span></div><div class="line">.<span class="type">Redraw</span></div></pre></td></tr></table></figure>
<p> 这些值我们不仅仅可以通过代码实现，在 Xcode 中的``也可以进行直接设置。</p>
<p>下面是重写<code>drawRect</code>绘制的Demo：<code>FaceView</code><br>Creat  a custom UIView subclass to draw a face with a specified amount of “smallness” </p>
<p>未完待续。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;类型转换-Objective-C-和-Swift&quot;&gt;&lt;a href=&quot;#类型转换-Objective-C-和-Swift&quot; class=&quot;headerlink&quot; title=&quot;类型转换 Objective-C 和 Swift&quot;&gt;&lt;/a&gt;类型转换 Objective-C 和 Swift&lt;/h5&gt;&lt;p&gt;在 iOS 开发使用 Swift 时， 经常会遇到需要调用&lt;code&gt;Objective-C&lt;/code&gt; 类方法的情况，苹果已经将几乎所有的&lt;code&gt;Objective－C&lt;/code&gt;的API都已经无缝的转接到了 Swift，同时一些特别的类型也做了桥接，桥接意味着可以随意进行转换。&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Let&lt;/span&gt; aString = (aString &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;NSString&lt;/span&gt;).lenght &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(anArray &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;NSArray&lt;/span&gt;).componentsJoinedByString(&lt;span class=&quot;type&quot;&gt;NSString&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* Array 桥接到了 NSArray。对应的是AnyObject的数组。*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* Dictionary 桥接到了 NSDictionary 对应的是 [NSObject：AnyObject]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* Int, Float Double, Bool  都桥接到了 NSNumber （反过来不适用）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* 如果需要从 NSNumber 对象中获取某个类型需要用 doubleValue，intValue 等。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;利用这种&lt;code&gt;括弧 + as&lt;/code&gt;的方法可以直接调用&lt;code&gt;Objective-C&lt;/code&gt;的方法， 同时实现了自动的类型转换，比如上面的例子，&lt;code&gt;lenght&lt;/code&gt;是&lt;code&gt;NSString&lt;/code&gt;的方法， 我们可直接在一行代码中将&lt;code&gt;String&lt;/code&gt; 转换成&lt;code&gt;NSString&lt;/code&gt;并调用其方法。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CS193P 第四课笔记</title>
    <link href="http://yoursite.com/2016/03/16/CS193P-%E7%AC%AC%E5%9B%9B%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/03/16/CS193P-第四课笔记/</id>
    <published>2016-03-16T07:42:15.000Z</published>
    <updated>2016-03-16T07:59:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>笔记信息的来源大部分来自课程随堂的Keynote，以及一些我个人的看法，因为没有软件开发的基础，难免容易混淆一些基础概念，还请各位看官斧正。<br>这节课主要介绍了在 iOS 开发中经常使用的结构类型，呈现了一些 Swift 语言的一些基础特性，更详细的语法和特性，还是需要仔细阅读苹果官方的<code>The Swift Programming Language</code>来了解的。<br><a id="more"></a></p>
<h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><h2 id="enum"><a href="#enum" class="headerlink" title="enum"></a><strong>enum</strong></h2><p>在 Swift中:类、结构体、 和枚举都可以定义属性 及方法。类相比结构体仅仅多了可被继承的特性，而 enum 不能够拥有<code>存储属性</code>，只可以使用<code>计算属性</code>。<br>enum 比较特别，在 Swift 中会经常被使用，当你需要声明一些东西，例如某个对象的多个不同状态，这些状态在不同的时候有不同的值，但一般不会同时拥有两个状态时候，比较适合使用 enum 来描述数据结构。<br>比如用来描述网络请求状态的时候，可以定义一个enum：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">//TODO:</div></pre></td></tr></table></figure></p>
<h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a><strong>Optional</strong></h2><p>在 Swift 中 <code>optional</code>是由 <code>enum</code> 实现的，我们可以试想一下其内部结构。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Optional</span> &lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">None</span></div><div class="line">    <span class="keyword">case</span> some（<span class="type">T</span>）</div><div class="line">&#125;</div><div class="line"><span class="comment">//它是一个泛型，T 表示 optional所关联值的类型，如果 Optional不是Nil，那T就是它的类型。</span></div><div class="line"><span class="keyword">let</span> x: <span class="type">String</span>? = <span class="literal">nil</span></div><div class="line">...<span class="keyword">is</span>...</div><div class="line"><span class="keyword">let</span> x = <span class="type">Optional</span></div><div class="line"><span class="keyword">let</span> x: <span class="type">String</span>? = <span class="string">"Hello"</span></div><div class="line">...<span class="keyword">is</span>...</div><div class="line"><span class="keyword">let</span> x = <span class="type">Optional</span> &lt;<span class="type">String</span>&gt;.some(<span class="string">"Hello"</span>)</div><div class="line"><span class="keyword">var</span> y = x!</div><div class="line"><span class="keyword">switch</span> x &#123;</div><div class="line">    <span class="keyword">case</span> some(<span class="keyword">let</span> value): y = value</div><div class="line">    <span class="keyword">case</span> <span class="type">None</span>: <span class="comment">// raise an exception</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a><strong>Array</strong></h2><p>数组是结构体，常用的方法如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="type">Array</span>&lt;<span class="type">String</span>&gt;()</div><div class="line">… <span class="keyword">is</span> the same <span class="keyword">as</span> …</div><div class="line"><span class="keyword">var</span> a = [<span class="type">String</span>]()</div><div class="line"><span class="keyword">let</span> animals = [“<span class="type">Giraffe</span>”, “<span class="type">Cow</span>”, “<span class="type">Doggie</span>”, “<span class="type">Bird</span>”]</div><div class="line">animals.append(“<span class="type">Ostrich</span>”) <span class="comment">// won’t compile, animals is immutable (because of let)</span></div><div class="line"><span class="keyword">let</span> animal = animals[<span class="number">5</span>] <span class="comment">// crash (array index out of bounds)</span></div><div class="line"><span class="comment">// enumerating an Array</span></div><div class="line"><span class="keyword">for</span> animal <span class="keyword">in</span> animals &#123;</div><div class="line"><span class="built_in">println</span>(“\(animal)”)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a><strong>Dictionary</strong></h2><p>字典在Swift中和数组一样，属于结构体。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var pac10teamRankings = Dictionary&lt;String, Int&gt;()</div><div class="line">… is the same as …</div><div class="line">var pac10teamRankings = [String:Int]()</div><div class="line">pac10teamRankings = [”Stanford”:1, ”Cal”:10]</div><div class="line">let ranking = pac10teamRankings[“Ohio State”] // ranking is an Int? (would be nil)</div><div class="line">// use a tuple with for-in to enumerate a Dictionary</div><div class="line">for (key, value) in pac10teamRankings &#123;</div><div class="line">println(“\(key) = \(value)”)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="属性—Properties"><a href="#属性—Properties" class="headerlink" title="属性—Properties"></a>属性—Properties</h1><ul>
<li><strong>计算型属性-Computed Properties</strong><br>在结构体，类，和枚举中都可以使用计算型属性，而存储型属性不能应用在枚举中。<br>某个属性在 set 和 get 的时候分别返回不同类型的参数的时候可以应用，或者在 set 或 get 的时候需要对参数进行加工时可以使用。<br>set 方法中包含一个隐藏参数<code>newValue</code>， 例如，displayValue = 5， 5就是 newValue<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var displayValue: Double &#123;</div><div class="line">get &#123;</div><div class="line">return NSNumberFormatter().numberFromString(display.text!)!.doubleValue</div><div class="line">&#125;</div><div class="line">set &#123;</div><div class="line">display.text = &quot;\(newValue)&quot;</div><div class="line">userIsInTheMiddleOfTypingANumber = false</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>从上面代码看set方法并没有为displayValue本身赋值，只是使用了其中的newValue为其他属性进行计算并赋值。</p>
<ul>
<li><strong>属性观察 Property Observers</strong><br>属性观察会在iOS开发中大量应用，你可以通过willset 和 didset 观察 Property 的变化。<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 这是一个直接的存储属性 </div><div class="line">*/</div><div class="line"><span class="keyword">var</span> someStoredProperty: <span class="type">Int</span> = <span class="number">42</span> &#123;     </div><div class="line">      <span class="keyword">willSet</span> &#123; newValue <span class="keyword">is</span> the new value &#125;</div><div class="line">      <span class="keyword">didSet</span> &#123; oldValue <span class="keyword">is</span> the old value &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">override</span> <span class="keyword">var</span> inheritedProperty &#123;     </div><div class="line">      <span class="keyword">willSet</span> &#123; newValue <span class="keyword">is</span> the new value &#125;</div><div class="line">      <span class="keyword">didSet</span> &#123; oldValue <span class="keyword">is</span> the old value &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>willSet</code>和<code>didSet</code>会在属性被设置值期间自动调用，你可以在两种情况下应用属性观察，一种情况是你在自己的类中拥有一个存储属性，当其他方法设置它的值时，你想获得一个notice，然后根据这歌notice做一些事情。另一种情况是你继承了某些类，你并不需要对类中的 property 做什么修改，但它们被改变的时候你想知道，所以你可以在某些继承的类上重写父类的 willSet 和 didSet 。<br>在 iOS 开发中，我们用属性观察最多的地方就是更新界面UI， 比如你有一个viewcontroller，其中有一个view的property，可以在didset中进行view的重新绘制。</p>
<ul>
<li><strong>惰性初始化 lazy initialization</strong><br>被标记 lazy 的 property 只有在被时候的时候才会初始化，你也可以在初始化的时候使用闭包（也就是在后面放一对括号）它会通过这个闭包来初始化自己。你甚至可以调用一个方法来初始化惰性属性，如果是普通的 property，在类初始化之前，类的方法都是不可用的。但在惰性属性中，直到有人试图去 get 这个惰性属性，它就被初始化了。我们对于惰性属性声明只能使用<code>var</code>，不能使用<code>let</code>.<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 如果CalculatorBrain需要消耗大量系统资源，可以使用lazy声明。</div><div class="line">*/</div><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> brain=<span class="type">CalculatorBrain</span>() </div><div class="line"><span class="comment">/**</span></div><div class="line"> 使用闭包声明惰性属性。</div><div class="line">*/</div><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> someProperty: <span class="type">Type</span> = &#123; <span class="comment">//constructthevalueofsomePropertyhere</span></div><div class="line">              <span class="keyword">return</span>&lt;theconstructedvalue&gt;</div><div class="line">    &#125;()</div><div class="line">lazyvarmyProperty=<span class="keyword">self</span>.initializeMyProperty</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>##<strong>Initialization</strong><br>讨论初始话我们先弄明白第一个问题：我们在什么情况下需要实现 <code>init</code>方法呢？事实上大多数时候并不需要init方法，因为类或者结构体里边大部分的常量和变量都会通过赋值被初始化，或者有些属性是 Optional 的，这样即使它们是nil也没有关系，就像 StoryBoard 里的 OutLet 一样，又或者可以用闭包来初始化，你也可以使用 lazy 机制，从而避免使用 init 方法。</p>
<p>但如果你确实需要一个 init 方法，我们来了解一下在默认的初始化方法是如何产生的。</p>
<ul>
<li><p>第一种情况就是如果一个基类<code>class</code>，<strong>基类指的是没有父类的类</strong>，它所有的属性都有默认值，那么它就会自动得到一个 <strong>没有参数</strong> 的 init 方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">ClalculatorBarin()  后面的括弧就是默认没有参数的init方法</div><div class="line">*/</div><div class="line"><span class="keyword">let</span> brain = <span class="type">ClalculatorBarin</span>()</div></pre></td></tr></table></figure>
</li>
<li><p>如果是一个结构体<code>struct</code>没有自定义初始化方法，它会默认得到一个包括 <strong>所有属性和参数</strong> 的<code>init</code>方法,  并且所有的属性和参数都比配</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> x: <span class="type">Int</span> = <span class="number">42</span></div><div class="line">    <span class="keyword">var</span> y: <span class="type">String</span> = <span class="string">"moltuae"</span></div><div class="line"></div><div class="line">    <span class="keyword">init</span>(x: <span class="type">Int</span>, y: <span class="type">String</span>) <span class="comment">// comes for free</span></div></pre></td></tr></table></figure>
<p>你可以在 init 方法中做什么？<br>你可以在里面设置任何 property 的值，你甚至可以给property 设置默认值，即使你把它设置为等于12，在你的init里，你可以把一些东西重置为别的什么。<br>你可以给常量 property 赋值<code>let</code><br>在你的类或者结构体里尼可以调用其他的init方法，使用self .init<br>你可以调用有不同参数的其它init方法<br>当然，在类中你也可以调用super.init，调用父类的初始化方法。</p>
</li>
</ul>
<p>当时调用其它的init方法有很多规则，尤其是在 <strong>类</strong> 里，在结构体中，这不是一个大问题。我们先来看看哪些事你必须要做的：<br>1.在你的类里，所有的property都必须初始化，它们都必须有值， <code>optionals 的nil也是值</code>。<br>2 在类中，提供了两种类型的构造器来初始化，一种是 <code>Convenience Init</code> 另一种是 <code>Designated Initializers</code></p>
<p>RxSwift</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔记信息的来源大部分来自课程随堂的Keynote，以及一些我个人的看法，因为没有软件开发的基础，难免容易混淆一些基础概念，还请各位看官斧正。&lt;br&gt;这节课主要介绍了在 iOS 开发中经常使用的结构类型，呈现了一些 Swift 语言的一些基础特性，更详细的语法和特性，还是需要仔细阅读苹果官方的&lt;code&gt;The Swift Programming Language&lt;/code&gt;来了解的。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title> Octopress的初级使用</title>
    <link href="http://yoursite.com/2016/03/16/Octopress%E7%9A%84%E5%88%9D%E7%BA%A7%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/03/16/Octopress的初级使用/</id>
    <published>2016-03-16T07:23:30.000Z</published>
    <updated>2016-03-16T07:35:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>前两天无意间看到一个部署 Octopress 的教程, 今天终于抽出时间折腾了一下.<br>因为对 Git、Rudy 和 HTML 没啥了解，遇到很多问题，所以先把今后可能用到的语法总结一下。<br><a href="http://octopress.org/docs/" target="_blank" rel="external">Octopress文档链接</a></p>
<h2 id="代码高亮的-Syntax"><a href="#代码高亮的-Syntax" class="headerlink" title="代码高亮的 Syntax"></a>代码高亮的 Syntax</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[language] [title] [url] [link text]</div><div class="line">code snippet</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Range</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">var</span> startIndex:<span class="type">T</span></div><div class="line">    <span class="keyword">var</span> endIndex:<span class="type">T</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p> 有些占位符在实际使用过程中可以被省略，比如目前不太常用的 url，可以帮助指向示例代码的详细内容链接，并且可以定位超链接的名字。</p>
<p>如果希望在文章中插入某个 swift 文件,用以呈现代码块,可使用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% include_code [title] [lang:language] path/to/file %&#125;</div></pre></td></tr></table></figure></p>
<p>这里的系统默认会读取<code>source/downloads/code</code>路径下的代码文件<em>(此路径可通过配置<code>_config.yml</code>文件进行修改)</em>,同时,这里的 title 不是用来自定义的,而是需要输入文件的名字,并包含其扩展名.</p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% include_code FilterHelper.swift %&#125;</div></pre></td></tr></table></figure>
<p>实现方法.</p>
<p>##新建文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo rake new_post[&quot;title&quot;]</div></pre></td></tr></table></figure></p>
<p>new_post 会自动创建一个自定义 title 的 markdown 文件, 并且将中文字符转成拼音用已生成文章的 HTML链接.</p>
<p>文章自动生成一些关键内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">layout: post</div><div class="line">title: &quot;Zombie Ninjas Attack: A survivor&apos;s retrospective&quot;</div><div class="line">date: 2011-07-03 5:59</div><div class="line">comments: true</div><div class="line">external-url:</div><div class="line">categories:</div></pre></td></tr></table></figure></p>
<p>如果希望这篇文章暂时以草稿的形式存在,可添加 published: false 阻止其公开.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// One category</div><div class="line">categories: Sass</div><div class="line"> </div><div class="line">// Multiple categories example 1</div><div class="line">categories: [CSS3, Sass, Media Queries]</div><div class="line"> </div><div class="line">// Multiple categories example 2</div><div class="line">categories:</div><div class="line">- CSS3</div><div class="line">- Sass</div><div class="line">- Media Queries</div></pre></td></tr></table></figure>
<p>categories 的配置我理解类似文章的 tag, 可以利用一些关键字方便归类.</p>
<p>##为文章增加新页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rake new_page[super-awesome]</div><div class="line">//creates /source/super-awesome/index.markdown</div><div class="line">rake new_page[super-awesome/page.html]</div><div class="line">creates /source/super-awesome/page.html</div></pre></td></tr></table></figure></p>
<p>感觉自己最近用不到,链接指向官方文档,需要的时候再实验具体内容.</p>
<p>##文章内容</p>
<p>在文章内插入<code>&lt;!-- more --&gt;</code>可以实现”点击此处”展开文章内容.</p>
<p>##生成文章</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rake generate   // Generates posts and pages into the public directory</div><div class="line">rake watch      // Watches source/ and sass/ for changes and regenerates</div><div class="line">rake preview    // Watches, and mounts a webserver at http://localhost:4000</div></pre></td></tr></table></figure>
<p>如果希望文章不被公开,在文章头信息中添加<code>published: false</code>,并利用<code>rake preview</code>进行本地浏览.<br>文章编辑结束,利用<code>rake generate</code>将文章从 source 移到 public,并使用 git 指令 commit 到远程 Hub.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo git push heroku master</div></pre></td></tr></table></figure></p>
<p>##终端使用 Tips</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ls 展示目录详情</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天无意间看到一个部署 Octopress 的教程, 今天终于抽出时间折腾了一下.&lt;br&gt;因为对 Git、Rudy 和 HTML 没啥了解，遇到很多问题，所以先把今后可能用到的语法总结一下。&lt;br&gt;&lt;a href=&quot;http://octopress.org/docs/&quot;&gt;Octopress文档链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码高亮的-Syntax&quot;&gt;&lt;a href=&quot;#代码高亮的-Syntax&quot; class=&quot;headerlink&quot; title=&quot;代码高亮的 Syntax&quot;&gt;&lt;/a&gt;代码高亮的 Syntax&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[language] [title] [url] [link text]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;code snippet&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Range&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; startIndex:&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; endIndex:&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS 中 UIGestureRecognizer 手势的使用</title>
    <link href="http://yoursite.com/2016/03/16/iOS-%E4%B8%AD-UIGestureRecognizer-%E6%89%8B%E5%8A%BF%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/03/16/iOS-中-UIGestureRecognizer-手势的使用/</id>
    <published>2016-03-16T07:21:37.000Z</published>
    <updated>2016-03-16T07:35:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 iOS 中包括下列几种手势识别，方便我们自定义一些与用户交互的操作方式。</p>
<p>###1.UIPinchGestureRecognizer<br> 两个手势放大或缩小，<code>Pinch</code> 手势传递的是比例，不是坐标。<br> 当手势开始的时候，比例是 1</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scale: <span class="type">CGFloat</span> <span class="comment">// not read-only (can set) 当两个手指扩大一倍的时候，scale 为2，靠拢到一半的时候 scale 变成 0.5 </span></div><div class="line"><span class="keyword">var</span> velocity: <span class="type">CGFloat</span> &#123; <span class="keyword">get</span> &#125; <span class="comment">// scale factor per second</span></div></pre></td></tr></table></figure>
<p>###2.UIRotationGestureRecognizer<br>两个手指的手势，在一个圆周上转动。就像一个旋转的按钮。他会告诉你旋转了多少弧度<code>retation</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> retation: <span class="type">CGFloat</span> <span class="comment">// not read-only (can reset); in radians</span></div><div class="line"><span class="keyword">var</span> velocity: <span class="type">CGFloat</span> &#123; <span class="keyword">get</span> &#125; <span class="comment">// radians per second</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>###3.UISwipeGestureRecognizer<br>当我创建了一个 <code>Swipe</code> 手势的时候，我需要设置它的属性，例如，点击的次数，或者滑动的方向，</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> direction: <span class="type">UISwipeGestureRecoginzerDirection</span> <span class="comment">// which swipes you want</span></div><div class="line"><span class="keyword">var</span> numberOfTouchesRequired: <span class="type">Int</span> <span class="comment">// finger count</span></div></pre></td></tr></table></figure>
<p>###4.UITapGestureRecognizer<br>当我创建一个 Tap 手势的时候，我需要设置 tap 的次数</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numberOfTapsRequired: <span class="type">Int</span> <span class="comment">// single tap, double tap, etc.</span></div><div class="line"><span class="keyword">var</span> numberOfTouchesRequired: <span class="type">Int</span> <span class="comment">// finger count</span></div></pre></td></tr></table></figure>
<p>我们在为某个 View 添加手势响应的时候</p>
<p>##创建手势-初始化<br>我们当然可以在 StoryBoard 中直接从对象库中拖转手势到视图控制器，并为其设定 <code>IBOutlet</code>.<br>同样可以采用在手势目标视图的观察器中设置。<br>例如：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> panableView: <span class="type">UIView</span> &#123;</div><div class="line">    <span class="keyword">didSet</span> &#123;</div><div class="line">        <span class="keyword">let</span> recognizer = <span class="type">UIPanGestureRecognizer</span>(target: <span class="keyword">self</span>, action: <span class="string">"pan:"</span>)</div><div class="line">        panableView.addGesturerecognizer(recognizer)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>panableView 是一个自定义视图，在 StoryBoard 中创建，可以利用属性观察，在视图被从 StoryBoard 中创建的时候添加手势，这是一个完美的地方。<br><!-- more --></p>
<p>##手势的状态-State<br>抽象类<code>UIGestureRecognizer</code>有一个重要的属性叫做<code>state</code>， 拖转一个手势会产生很多状态，<br><code>.Possible</code> 标识是否响应的状态。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.<span class="type">Began</span></div><div class="line">.<span class="type">Changed</span></div><div class="line">.<span class="type">Ended</span></div><div class="line">.<span class="type">Failed</span></div><div class="line">.<span class="type">Cancelled</span> <span class="comment">//来电话了</span></div></pre></td></tr></table></figure>
<p>识别手势的状态可以使用<code>switch</code>语法<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">pan</span><span class="params">(gesture: UIPanGestureRecognizer)</span></span> &#123;</div><div class="line">    <span class="keyword">switch</span> gestureL.state &#123;</div><div class="line">      <span class="keyword">case</span> .<span class="type">Changed</span>: <span class="keyword">fallthrough</span></div><div class="line">      <span class="keyword">case</span> .<span class="type">Ended</span>:</div><div class="line">            <span class="keyword">let</span> translation = gesture.translationInView(panableView)</div><div class="line">            <span class="comment">// ipdate anythging that depends on the pan gesture using rtranslation.x and .y</span></div><div class="line">            gesture.setTranslation(<span class="type">CGPointZero</span>, inView: panableView)</div><div class="line">      <span class="keyword">default</span>: <span class="keyword">break</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>为视图添加手势并处理的例子，来自斯坦福大学的第六课，笑脸可以响应两手指的放大和缩小。上下滑动调整嘴的弧度，用以表示开心或伤心。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//in faceView didSet (viewController)</span></div><div class="line">faceView.addGestureRecognizer(<span class="type">UIPinchGesutreRecognizer</span>(target: faceView, action:<span class="string">"scale:"</span>))</div><div class="line">faceView.addGestureRecognizer(<span class="type">UIPanGestureRecognizer</span>(target:<span class="keyword">self</span>, action: <span class="string">"changeHappiness:"</span>))</div><div class="line">  </div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">struct</span> <span class="title">Costants</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">HappinessGestureScale</span>: <span class="type">CGFloat</span> = <span class="number">4</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeHappiness</span><span class="params">(gesture: UIPanGestureRecognizer)</span></span> &#123;</div><div class="line">    <span class="keyword">switch</span> gesture.state &#123;</div><div class="line">      <span class="keyword">case</span> .<span class="type">Ended</span>: <span class="keyword">fallthrough</span></div><div class="line">      <span class="keyword">case</span> .<span class="type">Changed</span>: </div><div class="line">            <span class="keyword">let</span> translation = gesture.translationInView(faceView)</div><div class="line">             <span class="keyword">let</span> happinessChange = -<span class="type">Int</span>(translation.y / <span class="type">Costants</span>.<span class="type">HappinessGestureScale</span>)</div><div class="line">             <span class="keyword">if</span> happinessChange != <span class="number">0</span> &#123;</div><div class="line">                happiness += happinessChange</div><div class="line">                gesture.setTranslation(<span class="type">CGPointZero</span>, inView:faceView)</div><div class="line">             &#125;</div><div class="line">       <span class="keyword">default</span>: <span class="keyword">break</span></div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="comment">//in faceView file</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">scale</span><span class="params">(gesture: UIPinchGestureRecognizer)</span></span> &#123;</div><div class="line">     <span class="keyword">if</span> gesture.state == .<span class="type">Changed</span> &#123;</div><div class="line">         scale *= gesture.scale</div><div class="line">        gesture.scale = <span class="number">1</span></div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 iOS 中包括下列几种手势识别，方便我们自定义一些与用户交互的操作方式。&lt;/p&gt;
&lt;p&gt;###1.UIPinchGestureRecognizer&lt;br&gt; 两个手势放大或缩小，&lt;code&gt;Pinch&lt;/code&gt; 手势传递的是比例，不是坐标。&lt;br&gt; 当手势开始的时候，比例是 1&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; scale: &lt;span class=&quot;type&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// not read-only (can set) 当两个手指扩大一倍的时候，scale 为2，靠拢到一半的时候 scale 变成 0.5 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; velocity: &lt;span class=&quot;type&quot;&gt;CGFloat&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &amp;#125; &lt;span class=&quot;comment&quot;&gt;// scale factor per second&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###2.UIRotationGestureRecognizer&lt;br&gt;两个手指的手势，在一个圆周上转动。就像一个旋转的按钮。他会告诉你旋转了多少弧度&lt;code&gt;retation&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; retation: &lt;span class=&quot;type&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// not read-only (can reset); in radians&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; velocity: &lt;span class=&quot;type&quot;&gt;CGFloat&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &amp;#125; &lt;span class=&quot;comment&quot;&gt;// radians per second&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
